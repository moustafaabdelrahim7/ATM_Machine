
ATM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000219a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002ce  00800060  0000219a  0000222e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000048  0080032e  0080032e  000024fc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000024fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002558  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f8  00000000  00000000  00002594  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c09  00000000  00000000  0000288c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001192  00000000  00000000  00006495  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000020fa  00000000  00000000  00007627  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000077c  00000000  00000000  00009724  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f08  00000000  00000000  00009ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024d3  00000000  00000000  0000ada8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  0000d27b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
       4:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__vector_1>
       8:	0c 94 80 09 	jmp	0x1300	; 0x1300 <__vector_2>
       c:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__vector_3>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__vector_5>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      54:	f6 09       	sbc	r31, r6
      56:	00 0a       	sbc	r0, r16
      58:	0a 0a       	sbc	r0, r26
      5a:	14 0a       	sbc	r1, r20
      5c:	1e 0a       	sbc	r1, r30
      5e:	28 0a       	sbc	r2, r24
      60:	32 0a       	sbc	r3, r18
      62:	a6 0b       	sbc	r26, r22
      64:	b1 0b       	sbc	r27, r17
      66:	c7 0b       	sbc	r28, r23
      68:	bc 0b       	sbc	r27, r28
      6a:	d2 0b       	sbc	r29, r18
      6c:	dd 0b       	sbc	r29, r29
      6e:	e8 0b       	sbc	r30, r24

00000070 <__trampolines_end>:
      70:	4e 41       	sbci	r20, 0x1E	; 30
      72:	4e 49       	Address 0x00000072 is out of bounds.
.word	0xffff	; ????

00000073 <pstr_inity>:
      73:	49 4e 49 54 59                                      INITY

00000078 <pstr_inf>:
      78:	49 4e 46                                            INF

0000007b <pwr_m10>:
      7b:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      8b:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000093 <pwr_p10>:
      93:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      a3:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf e5       	ldi	r28, 0x5F	; 95
      b2:	d8 e0       	ldi	r29, 0x08	; 8
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	13 e0       	ldi	r17, 0x03	; 3
      ba:	a0 e6       	ldi	r26, 0x60	; 96
      bc:	b0 e0       	ldi	r27, 0x00	; 0
      be:	ea e9       	ldi	r30, 0x9A	; 154
      c0:	f1 e2       	ldi	r31, 0x21	; 33
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	ae 32       	cpi	r26, 0x2E	; 46
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
      ce:	23 e0       	ldi	r18, 0x03	; 3
      d0:	ae e2       	ldi	r26, 0x2E	; 46
      d2:	b3 e0       	ldi	r27, 0x03	; 3
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	a6 37       	cpi	r26, 0x76	; 118
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 d2 06 	call	0xda4	; 0xda4 <main>
      e2:	0c 94 cb 10 	jmp	0x2196	; 0x2196 <_exit>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <set_sage>:
/*DESCRIPTION :-
	- used for the call back function of interrupt 0
	- used to set stage flag to the PIN_Entery stage
*/
void set_sage(){
	Stage_flag = RECIEVE_STAGE ;
      ea:	83 e0       	ldi	r24, 0x03	; 3
      ec:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Stage_flag>
      f0:	08 95       	ret

000000f2 <app_Init>:
                                   FUNCTION IMPLMENTATION
************************************************************************************************************************/


void app_Init(void){
	SPI_SlaveInit(PRESCALER_16);	
      f2:	83 e0       	ldi	r24, 0x03	; 3
      f4:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <SPI_SlaveInit>
	DIO_INITPIN(pind2,INPLUP);
      f8:	62 e0       	ldi	r22, 0x02	; 2
      fa:	8a e1       	ldi	r24, 0x1A	; 26
      fc:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_INITPIN>
	EXI_Enable(EXT_INT_0);
     100:	80 e0       	ldi	r24, 0x00	; 0
     102:	0e 94 c2 08 	call	0x1184	; 0x1184 <EXI_Enable>
	EXI_Trigger(EXT_INT_0,ANY_LOGIC_CHANGE);
     106:	61 e0       	ldi	r22, 0x01	; 1
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <EXI_Trigger>
	EXI_SetCallBack(EXT_INT_0,set_sage);
     10e:	65 e7       	ldi	r22, 0x75	; 117
     110:	70 e0       	ldi	r23, 0x00	; 0
     112:	80 e0       	ldi	r24, 0x00	; 0
     114:	0e 94 42 09 	call	0x1284	; 0x1284 <EXI_SetCallBack>
	KEYPAD_init();
     118:	0e 94 44 04 	call	0x888	; 0x888 <KEYPAD_init>
	LCD_INIT();
     11c:	0e 94 ed 05 	call	0xbda	; 0xbda <LCD_INIT>
	buzzer_init();
     120:	0e 94 35 04 	call	0x86a	; 0x86a <buzzer_init>
	TIMER_0_init(NORMAL_MODE);
     124:	80 e0       	ldi	r24, 0x00	; 0
     126:	0e 94 48 0a 	call	0x1490	; 0x1490 <TIMER_0_init>
	DIO_INITPIN(BUTTON_PIN,INFREE);
     12a:	61 e0       	ldi	r22, 0x01	; 1
     12c:	8a e0       	ldi	r24, 0x0A	; 10
     12e:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_INITPIN>
	DIO_INITPIN(pinb3,OUTPUT);
     132:	60 e0       	ldi	r22, 0x00	; 0
     134:	8b e0       	ldi	r24, 0x0B	; 11
     136:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_INITPIN>
	TIMER_2_INT();
     13a:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <TIMER_2_INT>
     13e:	08 95       	ret

00000140 <welcome>:

/*DESCRIPTION :-
	- used to display welcome message	
*/
void welcome(void){
	LCD_Write_String(" WELCOME TO ATM ");
     140:	88 e2       	ldi	r24, 0x28	; 40
     142:	92 e0       	ldi	r25, 0x02	; 2
     144:	0e 94 3d 06 	call	0xc7a	; 0xc7a <LCD_Write_String>
	TIMER_0_DELAY_MS(1000);
     148:	60 e0       	ldi	r22, 0x00	; 0
     14a:	70 e0       	ldi	r23, 0x00	; 0
     14c:	8a e7       	ldi	r24, 0x7A	; 122
     14e:	94 e4       	ldi	r25, 0x44	; 68
     150:	0e 94 43 0b 	call	0x1686	; 0x1686 <TIMER_0_DELAY_MS>
	Stage_flag = INSERTION_STAGE ;
     154:	82 e0       	ldi	r24, 0x02	; 2
     156:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Stage_flag>
     15a:	08 95       	ret

0000015c <insertion>:
/*DESCRIPTION :-
	- used to display a message to the user to insert the card 
*/
void insertion(void){
	
	LCD_GoTo(1,0);
     15c:	60 e0       	ldi	r22, 0x00	; 0
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_GoTo>
	LCD_Write_String("INSERT YOUR CARD");
     164:	89 e3       	ldi	r24, 0x39	; 57
     166:	92 e0       	ldi	r25, 0x02	; 2
     168:	0e 94 3d 06 	call	0xc7a	; 0xc7a <LCD_Write_String>
     16c:	08 95       	ret

0000016e <RECIEVE_data>:
	
}

void RECIEVE_data(void){
     16e:	1f 93       	push	r17
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
	// start receiving data
	LCD_Clear();
     174:	0e 94 a2 06 	call	0xd44	; 0xd44 <LCD_Clear>
	uint8_t index = 0;
     178:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t index2 = 0;
	while (1)
	{
		if (SPI_RecievePeriodicChecking(&spi_rec[index]))
     17a:	c1 2f       	mov	r28, r17
     17c:	d0 e0       	ldi	r29, 0x00	; 0
     17e:	ce 01       	movw	r24, r28
     180:	82 5d       	subi	r24, 0xD2	; 210
     182:	9c 4f       	sbci	r25, 0xFC	; 252
     184:	0e 94 3d 0a 	call	0x147a	; 0x147a <SPI_RecievePeriodicChecking>
     188:	88 23       	and	r24, r24
     18a:	b9 f3       	breq	.-18     	; 0x17a <RECIEVE_data+0xc>
		{
			LCD_GoTo(1,0);
     18c:	60 e0       	ldi	r22, 0x00	; 0
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_GoTo>
			LCD_Write_String("LOADING ...");
     194:	8a e4       	ldi	r24, 0x4A	; 74
     196:	92 e0       	ldi	r25, 0x02	; 2
     198:	0e 94 3d 06 	call	0xc7a	; 0xc7a <LCD_Write_String>
			if (spi_rec[index] == '\0')
     19c:	fe 01       	movw	r30, r28
     19e:	e2 5d       	subi	r30, 0xD2	; 210
     1a0:	fc 4f       	sbci	r31, 0xFC	; 252
     1a2:	80 81       	ld	r24, Z
     1a4:	81 11       	cpse	r24, r1
     1a6:	03 c0       	rjmp	.+6      	; 0x1ae <RECIEVE_data+0x40>
			{
				spi_rec[index] = '\0';
     1a8:	10 82       	st	Z, r1
		
	}
	
	//TIMER_0_DELAY_MS(3000);

	for(uint8_t i =0 ; i<16 ; i++){
     1aa:	20 e0       	ldi	r18, 0x00	; 0
     1ac:	0d c0       	rjmp	.+26     	; 0x1c8 <RECIEVE_data+0x5a>
			{
				spi_rec[index] = '\0';
				break;
				
			}
			index++;
     1ae:	1f 5f       	subi	r17, 0xFF	; 255
     1b0:	e4 cf       	rjmp	.-56     	; 0x17a <RECIEVE_data+0xc>
	}
	
	//TIMER_0_DELAY_MS(3000);

	for(uint8_t i =0 ; i<16 ; i++){
		pan[i]= spi_rec[i];
     1b2:	82 2f       	mov	r24, r18
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	fc 01       	movw	r30, r24
     1b8:	e2 5d       	subi	r30, 0xD2	; 210
     1ba:	fc 4f       	sbci	r31, 0xFC	; 252
     1bc:	30 81       	ld	r19, Z
     1be:	fc 01       	movw	r30, r24
     1c0:	ed 5b       	subi	r30, 0xBD	; 189
     1c2:	fc 4f       	sbci	r31, 0xFC	; 252
     1c4:	30 83       	st	Z, r19
		
	}
	
	//TIMER_0_DELAY_MS(3000);

	for(uint8_t i =0 ; i<16 ; i++){
     1c6:	2f 5f       	subi	r18, 0xFF	; 255
     1c8:	20 31       	cpi	r18, 0x10	; 16
     1ca:	98 f3       	brcs	.-26     	; 0x1b2 <RECIEVE_data+0x44>
     1cc:	20 e0       	ldi	r18, 0x00	; 0
     1ce:	0b c0       	rjmp	.+22     	; 0x1e6 <RECIEVE_data+0x78>
		pan[i]= spi_rec[i];
	}
	
	for(uint8_t i =0 ; i<5 ; i++){
		pin[i]= spi_rec[i+16];
     1d0:	82 2f       	mov	r24, r18
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	fc 01       	movw	r30, r24
     1d6:	e2 5c       	subi	r30, 0xC2	; 194
     1d8:	fc 4f       	sbci	r31, 0xFC	; 252
     1da:	30 81       	ld	r19, Z
     1dc:	fc 01       	movw	r30, r24
     1de:	ec 5a       	subi	r30, 0xAC	; 172
     1e0:	fc 4f       	sbci	r31, 0xFC	; 252
     1e2:	30 83       	st	Z, r19

	for(uint8_t i =0 ; i<16 ; i++){
		pan[i]= spi_rec[i];
	}
	
	for(uint8_t i =0 ; i<5 ; i++){
     1e4:	2f 5f       	subi	r18, 0xFF	; 255
     1e6:	25 30       	cpi	r18, 0x05	; 5
     1e8:	98 f3       	brcs	.-26     	; 0x1d0 <RECIEVE_data+0x62>
		pin[i]= spi_rec[i+16];
	}
		LCD_Clear();
     1ea:	0e 94 a2 06 	call	0xd44	; 0xd44 <LCD_Clear>
		TIMER_0_DELAY_MS(3000);
		LCD_Clear();
		LCD_Write_String(pin);
		TIMER_0_DELAY_MS(3000);
		*/
		Stage_flag = PIN_ENTRY_STAGE;
     1ee:	84 e0       	ldi	r24, 0x04	; 4
     1f0:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Stage_flag>
}
     1f4:	df 91       	pop	r29
     1f6:	cf 91       	pop	r28
     1f8:	1f 91       	pop	r17
     1fa:	08 95       	ret

000001fc <PIN_Entery>:
	- used to enter pin 
	- if user entered more than 4 numbers it will go to the next stage (PIN_Check) with status of incorrect pin
	- if user entered less than or equal to 4 numbers and then pressed enter it will go to the next stage to check if it is correct or not
*/
void PIN_Entery (void)
{
     1fc:	cf 93       	push	r28
	

	
		uint8_t key ;
		DIO_READPIN(BUTTON_PIN,&state);
     1fe:	6f e6       	ldi	r22, 0x6F	; 111
     200:	73 e0       	ldi	r23, 0x03	; 3
     202:	8a e0       	ldi	r24, 0x0A	; 10
     204:	0e 94 76 08 	call	0x10ec	; 0x10ec <DIO_READPIN>
	
				LCD_Clear();
     208:	0e 94 a2 06 	call	0xd44	; 0xd44 <LCD_Clear>
				LCD_GoTo(1,1);
     20c:	61 e0       	ldi	r22, 0x01	; 1
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_GoTo>
				LCD_Write_String("Enter Your PIN");
     214:	86 e5       	ldi	r24, 0x56	; 86
     216:	92 e0       	ldi	r25, 0x02	; 2
     218:	0e 94 3d 06 	call	0xc7a	; 0xc7a <LCD_Write_String>
				TIMER_0_DELAY_MS(200);
     21c:	60 e0       	ldi	r22, 0x00	; 0
     21e:	70 e0       	ldi	r23, 0x00	; 0
     220:	88 e4       	ldi	r24, 0x48	; 72
     222:	93 e4       	ldi	r25, 0x43	; 67
     224:	0e 94 43 0b 	call	0x1686	; 0x1686 <TIMER_0_DELAY_MS>
				pin_index = 0 ;
     228:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <pin_index>
				while (1)
				{
					DIO_READPIN(BUTTON_PIN,&state);
     22c:	6f e6       	ldi	r22, 0x6F	; 111
     22e:	73 e0       	ldi	r23, 0x03	; 3
     230:	8a e0       	ldi	r24, 0x0A	; 10
     232:	0e 94 76 08 	call	0x10ec	; 0x10ec <DIO_READPIN>
					 key = KEYPAD_getKey();
     236:	0e 94 5d 04 	call	0x8ba	; 0x8ba <KEYPAD_getKey>
     23a:	c8 2f       	mov	r28, r24
			
			 
					 if(pin_index > 4) // check if the user entered 5 numbers not 4
     23c:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <pin_index>
     240:	95 30       	cpi	r25, 0x05	; 5
     242:	48 f0       	brcs	.+18     	; 0x256 <PIN_Entery+0x5a>
					 {
							 Stage_flag = PIN_CHECK_STAGE ; 
     244:	85 e0       	ldi	r24, 0x05	; 5
     246:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Stage_flag>
							 check = 1 ;  // wrong entry 
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <check>
							 pin_index = 0 ;
     250:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <pin_index>
							 break;
     254:	4c c0       	rjmp	.+152    	; 0x2ee <PIN_Entery+0xf2>
						 
					 }else 
					 {
							 
							 if (enter_zeroFlag ==1) // check if the enter button pressed
     256:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <enter_zeroFlag>
     25a:	81 30       	cpi	r24, 0x01	; 1
     25c:	49 f4       	brne	.+18     	; 0x270 <PIN_Entery+0x74>
							 {
								 check = 2 ;
     25e:	82 e0       	ldi	r24, 0x02	; 2
     260:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <check>
								 Stage_flag = PIN_CHECK_STAGE ;
     264:	85 e0       	ldi	r24, 0x05	; 5
     266:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Stage_flag>
								 pin_index =0;
     26a:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <pin_index>
								 break ;
     26e:	3f c0       	rjmp	.+126    	; 0x2ee <PIN_Entery+0xf2>
								 
							 }
							 
						 }
			 
					  if (enter_zeroFlag == 2 && pin_index <4)  // check if the zero button pressed
     270:	82 30       	cpi	r24, 0x02	; 2
     272:	29 f5       	brne	.+74     	; 0x2be <PIN_Entery+0xc2>
     274:	94 30       	cpi	r25, 0x04	; 4
     276:	90 f0       	brcs	.+36     	; 0x29c <PIN_Entery+0xa0>
     278:	22 c0       	rjmp	.+68     	; 0x2be <PIN_Entery+0xc2>
					  {
				 
						  while(state==1 && enter_zeroFlag == 2) 
						  {
							  DIO_READPIN(BUTTON_PIN,&state);
     27a:	6f e6       	ldi	r22, 0x6F	; 111
     27c:	73 e0       	ldi	r23, 0x03	; 3
     27e:	8a e0       	ldi	r24, 0x0A	; 10
     280:	0e 94 76 08 	call	0x10ec	; 0x10ec <DIO_READPIN>
							  PIN[pin_index] = '0';
     284:	60 91 5a 03 	lds	r22, 0x035A	; 0x80035a <pin_index>
     288:	e6 2f       	mov	r30, r22
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	e5 5a       	subi	r30, 0xA5	; 165
     28e:	fc 4f       	sbci	r31, 0xFC	; 252
     290:	80 e3       	ldi	r24, 0x30	; 48
     292:	80 83       	st	Z, r24
							  LCD_GoTo(2,4+pin_index);
     294:	6c 5f       	subi	r22, 0xFC	; 252
     296:	82 e0       	ldi	r24, 0x02	; 2
     298:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_GoTo>
						 }
			 
					  if (enter_zeroFlag == 2 && pin_index <4)  // check if the zero button pressed
					  {
				 
						  while(state==1 && enter_zeroFlag == 2) 
     29c:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <state>
     2a0:	81 30       	cpi	r24, 0x01	; 1
     2a2:	21 f4       	brne	.+8      	; 0x2ac <PIN_Entery+0xb0>
     2a4:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <enter_zeroFlag>
     2a8:	82 30       	cpi	r24, 0x02	; 2
     2aa:	39 f3       	breq	.-50     	; 0x27a <PIN_Entery+0x7e>
							  DIO_READPIN(BUTTON_PIN,&state);
							  PIN[pin_index] = '0';
							  LCD_GoTo(2,4+pin_index);
						  }
						  
						  LCD_Write_String("*");
     2ac:	85 e6       	ldi	r24, 0x65	; 101
     2ae:	92 e0       	ldi	r25, 0x02	; 2
     2b0:	0e 94 3d 06 	call	0xc7a	; 0xc7a <LCD_Write_String>
						  pin_index++;
     2b4:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <pin_index>
     2b8:	8f 5f       	subi	r24, 0xFF	; 255
     2ba:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <pin_index>
				  
					  }
					  
					  if(key!=0) // if keypad pressed
     2be:	cc 23       	and	r28, r28
     2c0:	09 f4       	brne	.+2      	; 0x2c4 <PIN_Entery+0xc8>
     2c2:	b4 cf       	rjmp	.-152    	; 0x22c <PIN_Entery+0x30>
					  {
							PIN[pin_index] = key;
     2c4:	60 91 5a 03 	lds	r22, 0x035A	; 0x80035a <pin_index>
     2c8:	e6 2f       	mov	r30, r22
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	e5 5a       	subi	r30, 0xA5	; 165
     2ce:	fc 4f       	sbci	r31, 0xFC	; 252
     2d0:	c0 83       	st	Z, r28
							LCD_GoTo(2,4+pin_index);
     2d2:	6c 5f       	subi	r22, 0xFC	; 252
     2d4:	82 e0       	ldi	r24, 0x02	; 2
     2d6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_GoTo>
							LCD_Write_String("*");
     2da:	85 e6       	ldi	r24, 0x65	; 101
     2dc:	92 e0       	ldi	r25, 0x02	; 2
     2de:	0e 94 3d 06 	call	0xc7a	; 0xc7a <LCD_Write_String>
							pin_index++;
     2e2:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <pin_index>
     2e6:	8f 5f       	subi	r24, 0xFF	; 255
     2e8:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <pin_index>
     2ec:	9f cf       	rjmp	.-194    	; 0x22c <PIN_Entery+0x30>
					  }
						   
			   
	}
				
}
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <PIN_Check>:


void PIN_Check (void)
{
	
	while (check == 2)  // if the pin entered was 4 numbers
     2f2:	1a c0       	rjmp	.+52     	; 0x328 <PIN_Check+0x36>
	{
		
	for (uint8_t i=0; i <4; i++)
		{
			if (PIN[i] !=  pin[i] /*EEPROM PIN)*/ ) // check if the pin was not matched
     2f4:	82 2f       	mov	r24, r18
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	fc 01       	movw	r30, r24
     2fa:	e5 5a       	subi	r30, 0xA5	; 165
     2fc:	fc 4f       	sbci	r31, 0xFC	; 252
     2fe:	30 81       	ld	r19, Z
     300:	fc 01       	movw	r30, r24
     302:	ec 5a       	subi	r30, 0xAC	; 172
     304:	fc 4f       	sbci	r31, 0xFC	; 252
     306:	80 81       	ld	r24, Z
     308:	38 17       	cp	r19, r24
     30a:	19 f0       	breq	.+6      	; 0x312 <PIN_Check+0x20>
			{
				
				check = 1 ; 
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <check>
{
	
	while (check == 2)  // if the pin entered was 4 numbers
	{
		
	for (uint8_t i=0; i <4; i++)
     312:	2f 5f       	subi	r18, 0xFF	; 255
     314:	01 c0       	rjmp	.+2      	; 0x318 <PIN_Check+0x26>
     316:	20 e0       	ldi	r18, 0x00	; 0
     318:	24 30       	cpi	r18, 0x04	; 4
     31a:	60 f3       	brcs	.-40     	; 0x2f4 <PIN_Check+0x2>
				
				check = 1 ; 
			}
		}
		
		if (check != 1) // check if the pin was correct
     31c:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <check>
     320:	81 30       	cpi	r24, 0x01	; 1
     322:	11 f0       	breq	.+4      	; 0x328 <PIN_Check+0x36>
		{
			check = 0 ;
     324:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <check>


void PIN_Check (void)
{
	
	while (check == 2)  // if the pin entered was 4 numbers
     328:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <check>
     32c:	82 30       	cpi	r24, 0x02	; 2
     32e:	99 f3       	breq	.-26     	; 0x316 <PIN_Check+0x24>
		{
			check = 0 ;
		}
	}
	
	if (check == 1)  // if the pin was incorrect
     330:	81 30       	cpi	r24, 0x01	; 1
     332:	09 f0       	breq	.+2      	; 0x336 <PIN_Check+0x44>
     334:	4d c0       	rjmp	.+154    	; 0x3d0 <PIN_Check+0xde>
	{
	
		if(Wrong_Counter <3){
     336:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Wrong_Counter>
     33a:	83 30       	cpi	r24, 0x03	; 3
     33c:	60 f5       	brcc	.+88     	; 0x396 <PIN_Check+0xa4>
			
				Stage_flag = PIN_ENTRY_STAGE ;
     33e:	84 e0       	ldi	r24, 0x04	; 4
     340:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Stage_flag>
				pin_index = 0;
     344:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <pin_index>
				LCD_Clear();
     348:	0e 94 a2 06 	call	0xd44	; 0xd44 <LCD_Clear>
				LCD_GoTo(1,3);
     34c:	63 e0       	ldi	r22, 0x03	; 3
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_GoTo>
				LCD_Write_String("TRY AGAIN ");
     354:	87 e6       	ldi	r24, 0x67	; 103
     356:	92 e0       	ldi	r25, 0x02	; 2
     358:	0e 94 3d 06 	call	0xc7a	; 0xc7a <LCD_Write_String>
				LCD_GoTo(2,7);
     35c:	67 e0       	ldi	r22, 0x07	; 7
     35e:	82 e0       	ldi	r24, 0x02	; 2
     360:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_GoTo>
				LCD_Write_String("TRIALS :");
     364:	82 e7       	ldi	r24, 0x72	; 114
     366:	92 e0       	ldi	r25, 0x02	; 2
     368:	0e 94 3d 06 	call	0xc7a	; 0xc7a <LCD_Write_String>
				LCD_Write_Number(Wrong_Counter);
     36c:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <Wrong_Counter>
     370:	70 e0       	ldi	r23, 0x00	; 0
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_Write_Number>
				Wrong_Counter++;
     37a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Wrong_Counter>
     37e:	8f 5f       	subi	r24, 0xFF	; 255
     380:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Wrong_Counter>
				TIMER_0_DELAY_MS(2000);
     384:	60 e0       	ldi	r22, 0x00	; 0
     386:	70 e0       	ldi	r23, 0x00	; 0
     388:	8a ef       	ldi	r24, 0xFA	; 250
     38a:	94 e4       	ldi	r25, 0x44	; 68
     38c:	0e 94 43 0b 	call	0x1686	; 0x1686 <TIMER_0_DELAY_MS>
				LCD_Clear();
     390:	0e 94 a2 06 	call	0xd44	; 0xd44 <LCD_Clear>
     394:	1d c0       	rjmp	.+58     	; 0x3d0 <PIN_Check+0xde>
		}
		else // if the user entered the pin wrong 3 times
		 {
				 LCD_Create_Charecter(bell,0);
     396:	60 e0       	ldi	r22, 0x00	; 0
     398:	80 e6       	ldi	r24, 0x60	; 96
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <LCD_Create_Charecter>
				buzzer_On();
     3a0:	0e 94 3a 04 	call	0x874	; 0x874 <buzzer_On>
				LCD_Clear();
     3a4:	0e 94 a2 06 	call	0xd44	; 0xd44 <LCD_Clear>
				LCD_GoTo(1,3);
     3a8:	63 e0       	ldi	r22, 0x03	; 3
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_GoTo>
				LCD_Write_String(" BLOCKED ");
     3b0:	8b e7       	ldi	r24, 0x7B	; 123
     3b2:	92 e0       	ldi	r25, 0x02	; 2
     3b4:	0e 94 3d 06 	call	0xc7a	; 0xc7a <LCD_Write_String>
				LCD_Write_Charecter(0);
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	0e 94 b4 06 	call	0xd68	; 0xd68 <LCD_Write_Charecter>
				EXI_Disable(EXT_INT_0);
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <EXI_Disable>
				TIMER_0_DELAY_MS(200000);
     3c4:	60 e0       	ldi	r22, 0x00	; 0
     3c6:	70 e5       	ldi	r23, 0x50	; 80
     3c8:	83 e4       	ldi	r24, 0x43	; 67
     3ca:	98 e4       	ldi	r25, 0x48	; 72
     3cc:	0e 94 43 0b 	call	0x1686	; 0x1686 <TIMER_0_DELAY_MS>
	
		
		
	}
	
	if (check == 0) // if the pin was correct
     3d0:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <check>
     3d4:	81 11       	cpse	r24, r1
     3d6:	0a c0       	rjmp	.+20     	; 0x3ec <PIN_Check+0xfa>
	{
		Stage_flag = TRANSACTION_ENTRY_STAGE ;
     3d8:	86 e0       	ldi	r24, 0x06	; 6
     3da:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Stage_flag>
		Wrong_Counter = 1;
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Wrong_Counter>
		pin_index = 0;
     3e4:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <pin_index>
		LCD_Clear();
     3e8:	0e 94 a2 06 	call	0xd44	; 0xd44 <LCD_Clear>
     3ec:	08 95       	ret

000003ee <transaction_Entry>:
/************************************************************************************************************/

/**DESCRIPTION:-
	
*/
void transaction_Entry(void){
     3ee:	1f 93       	push	r17
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
	uint8_t key = 0,flag=0,temp=0,i=0;

	LCD_Clear();
     3f4:	0e 94 a2 06 	call	0xd44	; 0xd44 <LCD_Clear>
	LCD_GoTo(1,0);
     3f8:	60 e0       	ldi	r22, 0x00	; 0
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_GoTo>
	LCD_Write_String("Enter Amount");
     400:	85 e8       	ldi	r24, 0x85	; 133
     402:	92 e0       	ldi	r25, 0x02	; 2
     404:	0e 94 3d 06 	call	0xc7a	; 0xc7a <LCD_Write_String>
	LCD_GoTo(2,0);
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	82 e0       	ldi	r24, 0x02	; 2
     40c:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_GoTo>
	LCD_Write_String("0000.00");
     410:	82 e9       	ldi	r24, 0x92	; 146
     412:	92 e0       	ldi	r25, 0x02	; 2
     414:	0e 94 3d 06 	call	0xc7a	; 0xc7a <LCD_Write_String>

/**DESCRIPTION:-
	
*/
void transaction_Entry(void){
	uint8_t key = 0,flag=0,temp=0,i=0;
     418:	d0 e0       	ldi	r29, 0x00	; 0
     41a:	c0 e0       	ldi	r28, 0x00	; 0
	LCD_GoTo(1,0);
	LCD_Write_String("Enter Amount");
	LCD_GoTo(2,0);
	LCD_Write_String("0000.00");
	
	while (i<=4) 
     41c:	52 c0       	rjmp	.+164    	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
	
	
	{
		key=KEYPAD_getKey();
     41e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <KEYPAD_getKey>
     422:	18 2f       	mov	r17, r24
		DIO_READPIN(BUTTON_PIN,&state);
     424:	6f e6       	ldi	r22, 0x6F	; 111
     426:	73 e0       	ldi	r23, 0x03	; 3
     428:	8a e0       	ldi	r24, 0x0A	; 10
     42a:	0e 94 76 08 	call	0x10ec	; 0x10ec <DIO_READPIN>
		
		
		while (enter_zeroFlag == 2 && state ==1) // check the zero button is pressed
     42e:	0c c0       	rjmp	.+24     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
		{
				DIO_READPIN(BUTTON_PIN,&state);
     430:	6f e6       	ldi	r22, 0x6F	; 111
     432:	73 e0       	ldi	r23, 0x03	; 3
     434:	8a e0       	ldi	r24, 0x0A	; 10
     436:	0e 94 76 08 	call	0x10ec	; 0x10ec <DIO_READPIN>
				Balance[i]='0'; // save zero to the balance array
     43a:	ed 2f       	mov	r30, r29
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	ec 5a       	subi	r30, 0xAC	; 172
     440:	fc 4f       	sbci	r31, 0xFC	; 252
     442:	80 e3       	ldi	r24, 0x30	; 48
     444:	80 83       	st	Z, r24
					flag = 1 ;
     446:	c1 e0       	ldi	r28, 0x01	; 1
	{
		key=KEYPAD_getKey();
		DIO_READPIN(BUTTON_PIN,&state);
		
		
		while (enter_zeroFlag == 2 && state ==1) // check the zero button is pressed
     448:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <enter_zeroFlag>
     44c:	82 30       	cpi	r24, 0x02	; 2
     44e:	21 f4       	brne	.+8      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
     450:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <state>
     454:	81 30       	cpi	r24, 0x01	; 1
     456:	61 f3       	breq	.-40     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
		}
			
		
		
		
		if (key!=0 )  // check if keypad is pressed
     458:	11 23       	and	r17, r17
     45a:	89 f1       	breq	.+98     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
		{
			
			Balance[i]=key;	// save entered value to the balance array
     45c:	ed 2f       	mov	r30, r29
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	ec 5a       	subi	r30, 0xAC	; 172
     462:	fc 4f       	sbci	r31, 0xFC	; 252
     464:	10 83       	st	Z, r17
				
			flag = 1;
     466:	c1 e0       	ldi	r28, 0x01	; 1
     468:	2a c0       	rjmp	.+84     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
		while(flag == 1  ) // when zero button or keypad is pressed
		{
		
		
			
			if (enter_zeroFlag == 1) // if enter button is pressed
     46a:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <enter_zeroFlag>
     46e:	81 30       	cpi	r24, 0x01	; 1
     470:	59 f4       	brne	.+22     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
				{
				Balance[i]='\0';   
     472:	ed 2f       	mov	r30, r29
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	ec 5a       	subi	r30, 0xAC	; 172
     478:	fc 4f       	sbci	r31, 0xFC	; 252
     47a:	10 82       	st	Z, r1
				Stage_flag = ACCOUNT_CHECK_STAGE ;
     47c:	87 e0       	ldi	r24, 0x07	; 7
     47e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Stage_flag>
				i=5 ;
     482:	d5 e0       	ldi	r29, 0x05	; 5
				flag = 0;
     484:	c0 e0       	ldi	r28, 0x00	; 0
     486:	1b c0       	rjmp	.+54     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
				
			}else if(enter_zeroFlag == 2){
     488:	82 30       	cpi	r24, 0x02	; 2
     48a:	c9 f0       	breq	.+50     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
					
			}
			else // if enter or zero button not pressed
			{
				
				DIO_READPIN(BUTTON_PIN,&state);
     48c:	6f e6       	ldi	r22, 0x6F	; 111
     48e:	73 e0       	ldi	r23, 0x03	; 3
     490:	8a e0       	ldi	r24, 0x0A	; 10
     492:	0e 94 76 08 	call	0x10ec	; 0x10ec <DIO_READPIN>
				for (uint8_t c =0 ; c<=i ; c++) // display numbers and shift them to left
     496:	c0 e0       	ldi	r28, 0x00	; 0
     498:	0e c0       	rjmp	.+28     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
				{
							
					LCD_GoTo(2,3-(i-c));
     49a:	6c 2f       	mov	r22, r28
     49c:	6d 1b       	sub	r22, r29
     49e:	6d 5f       	subi	r22, 0xFD	; 253
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_GoTo>
					LCD_Write_Charecter(Balance[(c)]);  
     4a6:	ec 2f       	mov	r30, r28
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	ec 5a       	subi	r30, 0xAC	; 172
     4ac:	fc 4f       	sbci	r31, 0xFC	; 252
     4ae:	80 81       	ld	r24, Z
     4b0:	0e 94 b4 06 	call	0xd68	; 0xd68 <LCD_Write_Charecter>
			}
			else // if enter or zero button not pressed
			{
				
				DIO_READPIN(BUTTON_PIN,&state);
				for (uint8_t c =0 ; c<=i ; c++) // display numbers and shift them to left
     4b4:	cf 5f       	subi	r28, 0xFF	; 255
     4b6:	dc 17       	cp	r29, r28
     4b8:	80 f7       	brcc	.-32     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
					LCD_GoTo(2,3-(i-c));
					LCD_Write_Charecter(Balance[(c)]);  
						
				}
				flag =0 ;
				i++;
     4ba:	df 5f       	subi	r29, 0xFF	; 255
							
					LCD_GoTo(2,3-(i-c));
					LCD_Write_Charecter(Balance[(c)]);  
						
				}
				flag =0 ;
     4bc:	c0 e0       	ldi	r28, 0x00	; 0
				
			flag = 1;
		}
			
			
		while(flag == 1  ) // when zero button or keypad is pressed
     4be:	c1 30       	cpi	r28, 0x01	; 1
     4c0:	a1 f2       	breq	.-88     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
	LCD_GoTo(1,0);
	LCD_Write_String("Enter Amount");
	LCD_GoTo(2,0);
	LCD_Write_String("0000.00");
	
	while (i<=4) 
     4c2:	d5 30       	cpi	r29, 0x05	; 5
     4c4:	08 f4       	brcc	.+2      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
     4c6:	ab cf       	rjmp	.-170    	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
		
	}
	
	
	
}
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	1f 91       	pop	r17
     4ce:	08 95       	ret

000004d0 <account_checks>:

/************************************************************************************************************/
/**DESCRIPTION:-
	
*/
void account_checks(void){
     4d0:	0f 93       	push	r16
     4d2:	1f 93       	push	r17
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	00 d0       	rcall	.+0      	; 0x4da <account_checks+0xa>
     4da:	00 d0       	rcall	.+0      	; 0x4dc <account_checks+0xc>
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
	
		
	LCD_Create_Charecter(bell,0);
     4e0:	60 e0       	ldi	r22, 0x00	; 0
     4e2:	80 e6       	ldi	r24, 0x60	; 96
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 b7 06 	call	0xd6e	; 0xd6e <LCD_Create_Charecter>
	float transAmount = atof(Balance);
     4ea:	84 e5       	ldi	r24, 0x54	; 84
     4ec:	93 e0       	ldi	r25, 0x03	; 3
     4ee:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <atof>
     4f2:	69 83       	std	Y+1, r22	; 0x01
     4f4:	7a 83       	std	Y+2, r23	; 0x02
     4f6:	8b 83       	std	Y+3, r24	; 0x03
     4f8:	9c 83       	std	Y+4, r25	; 0x04
	uint8_t approved_flag = 0 ;
	
	LCD_Clear();
     4fa:	0e 94 a2 06 	call	0xd44	; 0xd44 <LCD_Clear>
	LCD_Write_String(Balance);
     4fe:	84 e5       	ldi	r24, 0x54	; 84
     500:	93 e0       	ldi	r25, 0x03	; 3
     502:	0e 94 3d 06 	call	0xc7a	; 0xc7a <LCD_Write_String>
	LCD_GoTo(2,0);
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	82 e0       	ldi	r24, 0x02	; 2
     50a:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_GoTo>
	
	
	LCD_Clear();
     50e:	0e 94 a2 06 	call	0xd44	; 0xd44 <LCD_Clear>
	
	if(isValidAccount(pan) == SERVER_OK){
     512:	83 e4       	ldi	r24, 0x43	; 67
     514:	93 e0       	ldi	r25, 0x03	; 3
     516:	0e 94 d5 03 	call	0x7aa	; 0x7aa <isValidAccount>
     51a:	81 11       	cpse	r24, r1
     51c:	80 c0       	rjmp	.+256    	; 0x61e <account_checks+0x14e>
		
		if(isBlockedAccount()==SERVER_OK){
     51e:	0e 94 06 04 	call	0x80c	; 0x80c <isBlockedAccount>
     522:	81 11       	cpse	r24, r1
     524:	5b c0       	rjmp	.+182    	; 0x5dc <account_checks+0x10c>
		
			if (transAmount<= dailyMax)
     526:	69 81       	ldd	r22, Y+1	; 0x01
     528:	7a 81       	ldd	r23, Y+2	; 0x02
     52a:	8b 81       	ldd	r24, Y+3	; 0x03
     52c:	9c 81       	ldd	r25, Y+4	; 0x04
     52e:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <dailyMax>
     532:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <dailyMax+0x1>
     536:	40 91 6a 00 	lds	r20, 0x006A	; 0x80006a <dailyMax+0x2>
     53a:	50 91 6b 00 	lds	r21, 0x006B	; 0x80006b <dailyMax+0x3>
     53e:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__cmpsf2>
     542:	18 16       	cp	r1, r24
     544:	4c f1       	brlt	.+82     	; 0x598 <account_checks+0xc8>
			{
				if(isAmountAvailable(&transAmount) == SERVER_OK){
     546:	ce 01       	movw	r24, r28
     548:	01 96       	adiw	r24, 0x01	; 1
     54a:	0e 94 15 04 	call	0x82a	; 0x82a <isAmountAvailable>
     54e:	88 23       	and	r24, r24
     550:	09 f4       	brne	.+2      	; 0x554 <account_checks+0x84>
     552:	86 c0       	rjmp	.+268    	; 0x660 <account_checks+0x190>
					
					approved_flag = 1 ;
					
				}else{
					
					LCD_GoTo(1,3);
     554:	63 e0       	ldi	r22, 0x03	; 3
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_GoTo>
					LCD_Write_String("INSUFFICIENT ");
     55c:	8a e9       	ldi	r24, 0x9A	; 154
     55e:	92 e0       	ldi	r25, 0x02	; 2
     560:	0e 94 3d 06 	call	0xc7a	; 0xc7a <LCD_Write_String>
					LCD_GoTo(2,5);
     564:	65 e0       	ldi	r22, 0x05	; 5
     566:	82 e0       	ldi	r24, 0x02	; 2
     568:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_GoTo>
					LCD_Write_String(" FUND !!");
     56c:	88 ea       	ldi	r24, 0xA8	; 168
     56e:	92 e0       	ldi	r25, 0x02	; 2
     570:	0e 94 3d 06 	call	0xc7a	; 0xc7a <LCD_Write_String>
					LCD_GoTo(2,15);
     574:	6f e0       	ldi	r22, 0x0F	; 15
     576:	82 e0       	ldi	r24, 0x02	; 2
     578:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_GoTo>
					LCD_Write_Charecter(0);
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	0e 94 b4 06 	call	0xd68	; 0xd68 <LCD_Write_Charecter>
					TIMER_0_DELAY_MS(DELAY_VALUE);
     582:	60 e0       	ldi	r22, 0x00	; 0
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	8a e7       	ldi	r24, 0x7A	; 122
     588:	94 e4       	ldi	r25, 0x44	; 68
     58a:	0e 94 43 0b 	call	0x1686	; 0x1686 <TIMER_0_DELAY_MS>
					Stage_flag = TRANSACTION_ENTRY_STAGE ;
     58e:	86 e0       	ldi	r24, 0x06	; 6
     590:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Stage_flag>
void account_checks(void){
	
		
	LCD_Create_Charecter(bell,0);
	float transAmount = atof(Balance);
	uint8_t approved_flag = 0 ;
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	65 c0       	rjmp	.+202    	; 0x662 <account_checks+0x192>
					Stage_flag = TRANSACTION_ENTRY_STAGE ;
				}// end of balance check
				
			}else{
				
					LCD_GoTo(1,4);
     598:	64 e0       	ldi	r22, 0x04	; 4
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_GoTo>
					LCD_Write_String("MAX LIMIT");
     5a0:	81 eb       	ldi	r24, 0xB1	; 177
     5a2:	92 e0       	ldi	r25, 0x02	; 2
     5a4:	0e 94 3d 06 	call	0xc7a	; 0xc7a <LCD_Write_String>
					LCD_GoTo(2,1);
     5a8:	61 e0       	ldi	r22, 0x01	; 1
     5aa:	82 e0       	ldi	r24, 0x02	; 2
     5ac:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_GoTo>
					LCD_Write_String(" IS EXCEEDED ");
     5b0:	8b eb       	ldi	r24, 0xBB	; 187
     5b2:	92 e0       	ldi	r25, 0x02	; 2
     5b4:	0e 94 3d 06 	call	0xc7a	; 0xc7a <LCD_Write_String>
					LCD_GoTo(2,15);
     5b8:	6f e0       	ldi	r22, 0x0F	; 15
     5ba:	82 e0       	ldi	r24, 0x02	; 2
     5bc:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_GoTo>
					LCD_Write_Charecter(0);
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	0e 94 b4 06 	call	0xd68	; 0xd68 <LCD_Write_Charecter>
					TIMER_0_DELAY_MS(DELAY_VALUE);
     5c6:	60 e0       	ldi	r22, 0x00	; 0
     5c8:	70 e0       	ldi	r23, 0x00	; 0
     5ca:	8a e7       	ldi	r24, 0x7A	; 122
     5cc:	94 e4       	ldi	r25, 0x44	; 68
     5ce:	0e 94 43 0b 	call	0x1686	; 0x1686 <TIMER_0_DELAY_MS>
					Stage_flag = TRANSACTION_ENTRY_STAGE ;
     5d2:	86 e0       	ldi	r24, 0x06	; 6
     5d4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Stage_flag>
void account_checks(void){
	
		
	LCD_Create_Charecter(bell,0);
	float transAmount = atof(Balance);
	uint8_t approved_flag = 0 ;
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	43 c0       	rjmp	.+134    	; 0x662 <account_checks+0x192>
					Stage_flag = TRANSACTION_ENTRY_STAGE ;
			}// end of amount check
		
		}else{
			
			buzzer_On();
     5dc:	0e 94 3a 04 	call	0x874	; 0x874 <buzzer_On>
			LCD_GoTo(1,4);
     5e0:	64 e0       	ldi	r22, 0x04	; 4
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_GoTo>
			LCD_Write_String("THIS IS");
     5e8:	89 ec       	ldi	r24, 0xC9	; 201
     5ea:	92 e0       	ldi	r25, 0x02	; 2
     5ec:	0e 94 3d 06 	call	0xc7a	; 0xc7a <LCD_Write_String>
			LCD_GoTo(2,1);
     5f0:	61 e0       	ldi	r22, 0x01	; 1
     5f2:	82 e0       	ldi	r24, 0x02	; 2
     5f4:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_GoTo>
			LCD_Write_String("A STOLEN CARD !!");	
     5f8:	81 ed       	ldi	r24, 0xD1	; 209
     5fa:	92 e0       	ldi	r25, 0x02	; 2
     5fc:	0e 94 3d 06 	call	0xc7a	; 0xc7a <LCD_Write_String>
			LCD_GoTo(2,15);
     600:	6f e0       	ldi	r22, 0x0F	; 15
     602:	82 e0       	ldi	r24, 0x02	; 2
     604:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_GoTo>
			LCD_Write_Charecter(0);		
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	0e 94 b4 06 	call	0xd68	; 0xd68 <LCD_Write_Charecter>
			TIMER_0_DELAY_MS(500000);
     60e:	60 e0       	ldi	r22, 0x00	; 0
     610:	74 e2       	ldi	r23, 0x24	; 36
     612:	84 ef       	ldi	r24, 0xF4	; 244
     614:	98 e4       	ldi	r25, 0x48	; 72
     616:	0e 94 43 0b 	call	0x1686	; 0x1686 <TIMER_0_DELAY_MS>
void account_checks(void){
	
		
	LCD_Create_Charecter(bell,0);
	float transAmount = atof(Balance);
	uint8_t approved_flag = 0 ;
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	22 c0       	rjmp	.+68     	; 0x662 <account_checks+0x192>
		} //  end of blocked check
		
	}
	
	else{
		buzzer_On();
     61e:	0e 94 3a 04 	call	0x874	; 0x874 <buzzer_On>
		LCD_GoTo(1,4);
     622:	64 e0       	ldi	r22, 0x04	; 4
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_GoTo>
		LCD_Write_String("THIS IS");
     62a:	89 ec       	ldi	r24, 0xC9	; 201
     62c:	92 e0       	ldi	r25, 0x02	; 2
     62e:	0e 94 3d 06 	call	0xc7a	; 0xc7a <LCD_Write_String>
		LCD_GoTo(2,1);
     632:	61 e0       	ldi	r22, 0x01	; 1
     634:	82 e0       	ldi	r24, 0x02	; 2
     636:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_GoTo>
		LCD_Write_String("A FRAUD CARD !!");
     63a:	82 ee       	ldi	r24, 0xE2	; 226
     63c:	92 e0       	ldi	r25, 0x02	; 2
     63e:	0e 94 3d 06 	call	0xc7a	; 0xc7a <LCD_Write_String>
		LCD_GoTo(2,15);
     642:	6f e0       	ldi	r22, 0x0F	; 15
     644:	82 e0       	ldi	r24, 0x02	; 2
     646:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_GoTo>
		LCD_Write_Charecter(0);
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	0e 94 b4 06 	call	0xd68	; 0xd68 <LCD_Write_Charecter>
		TIMER_0_DELAY_MS(DELAY_VALUE);
     650:	60 e0       	ldi	r22, 0x00	; 0
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	8a e7       	ldi	r24, 0x7A	; 122
     656:	94 e4       	ldi	r25, 0x44	; 68
     658:	0e 94 43 0b 	call	0x1686	; 0x1686 <TIMER_0_DELAY_MS>
void account_checks(void){
	
		
	LCD_Create_Charecter(bell,0);
	float transAmount = atof(Balance);
	uint8_t approved_flag = 0 ;
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	01 c0       	rjmp	.+2      	; 0x662 <account_checks+0x192>
		
			if (transAmount<= dailyMax)
			{
				if(isAmountAvailable(&transAmount) == SERVER_OK){
					
					approved_flag = 1 ;
     660:	81 e0       	ldi	r24, 0x01	; 1
		TIMER_0_DELAY_MS(DELAY_VALUE);
		
	}
	
	
	if ( approved_flag)
     662:	88 23       	and	r24, r24
     664:	09 f4       	brne	.+2      	; 0x668 <account_checks+0x198>
     666:	73 c0       	rjmp	.+230    	; 0x74e <account_checks+0x27e>
	{
		buzzer_Off();
     668:	0e 94 3f 04 	call	0x87e	; 0x87e <buzzer_Off>
		p_account->balance -= transAmount ;
     66c:	00 91 6e 00 	lds	r16, 0x006E	; 0x80006e <p_account>
     670:	10 91 6f 00 	lds	r17, 0x006F	; 0x80006f <p_account+0x1>
     674:	29 81       	ldd	r18, Y+1	; 0x01
     676:	3a 81       	ldd	r19, Y+2	; 0x02
     678:	4b 81       	ldd	r20, Y+3	; 0x03
     67a:	5c 81       	ldd	r21, Y+4	; 0x04
     67c:	f8 01       	movw	r30, r16
     67e:	60 81       	ld	r22, Z
     680:	71 81       	ldd	r23, Z+1	; 0x01
     682:	82 81       	ldd	r24, Z+2	; 0x02
     684:	93 81       	ldd	r25, Z+3	; 0x03
     686:	0e 94 4d 0c 	call	0x189a	; 0x189a <__subsf3>
     68a:	f8 01       	movw	r30, r16
     68c:	60 83       	st	Z, r22
     68e:	71 83       	std	Z+1, r23	; 0x01
     690:	82 83       	std	Z+2, r24	; 0x02
     692:	93 83       	std	Z+3, r25	; 0x03
		LCD_Clear();
     694:	0e 94 a2 06 	call	0xd44	; 0xd44 <LCD_Clear>
		LCD_GoTo(1,4);
     698:	64 e0       	ldi	r22, 0x04	; 4
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_GoTo>
		LCD_Write_String("APPROVED ");
     6a0:	82 ef       	ldi	r24, 0xF2	; 242
     6a2:	92 e0       	ldi	r25, 0x02	; 2
     6a4:	0e 94 3d 06 	call	0xc7a	; 0xc7a <LCD_Write_String>
		LCD_GoTo(2,3);
     6a8:	63 e0       	ldi	r22, 0x03	; 3
     6aa:	82 e0       	ldi	r24, 0x02	; 2
     6ac:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_GoTo>
		LCD_Write_String("TRANSACTION ");
     6b0:	8c ef       	ldi	r24, 0xFC	; 252
     6b2:	92 e0       	ldi	r25, 0x02	; 2
     6b4:	0e 94 3d 06 	call	0xc7a	; 0xc7a <LCD_Write_String>
		TIMER_0_DELAY_MS(DELAY_VALUE);
     6b8:	60 e0       	ldi	r22, 0x00	; 0
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	8a e7       	ldi	r24, 0x7A	; 122
     6be:	94 e4       	ldi	r25, 0x44	; 68
     6c0:	0e 94 43 0b 	call	0x1686	; 0x1686 <TIMER_0_DELAY_MS>
		
		LCD_Clear();
     6c4:	0e 94 a2 06 	call	0xd44	; 0xd44 <LCD_Clear>
		LCD_GoTo(1,4);
     6c8:	64 e0       	ldi	r22, 0x04	; 4
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_GoTo>
		LCD_Write_String("REMAINING");
     6d0:	89 e0       	ldi	r24, 0x09	; 9
     6d2:	93 e0       	ldi	r25, 0x03	; 3
     6d4:	0e 94 3d 06 	call	0xc7a	; 0xc7a <LCD_Write_String>
		LCD_GoTo(2,0);
     6d8:	60 e0       	ldi	r22, 0x00	; 0
     6da:	82 e0       	ldi	r24, 0x02	; 2
     6dc:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_GoTo>
		LCD_Write_String("BALANCE :");
     6e0:	83 e1       	ldi	r24, 0x13	; 19
     6e2:	93 e0       	ldi	r25, 0x03	; 3
     6e4:	0e 94 3d 06 	call	0xc7a	; 0xc7a <LCD_Write_String>
		LCD_Write_Number(p_account->balance);
     6e8:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <p_account>
     6ec:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <p_account+0x1>
     6f0:	60 81       	ld	r22, Z
     6f2:	71 81       	ldd	r23, Z+1	; 0x01
     6f4:	82 81       	ldd	r24, Z+2	; 0x02
     6f6:	93 81       	ldd	r25, Z+3	; 0x03
     6f8:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
     6fc:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_Write_Number>
		LCD_Write_String(".00");
     700:	86 e9       	ldi	r24, 0x96	; 150
     702:	92 e0       	ldi	r25, 0x02	; 2
     704:	0e 94 3d 06 	call	0xc7a	; 0xc7a <LCD_Write_String>
		TIMER_0_DELAY_MS(DELAY_VALUE);
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	8a e7       	ldi	r24, 0x7A	; 122
     70e:	94 e4       	ldi	r25, 0x44	; 68
     710:	0e 94 43 0b 	call	0x1686	; 0x1686 <TIMER_0_DELAY_MS>
		
		LCD_Clear();
     714:	0e 94 a2 06 	call	0xd44	; 0xd44 <LCD_Clear>
		LCD_GoTo(1,4);
     718:	64 e0       	ldi	r22, 0x04	; 4
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_GoTo>
		LCD_Write_String("EJECTING ");
     720:	8d e1       	ldi	r24, 0x1D	; 29
     722:	93 e0       	ldi	r25, 0x03	; 3
     724:	0e 94 3d 06 	call	0xc7a	; 0xc7a <LCD_Write_String>
		LCD_GoTo(2,6);
     728:	66 e0       	ldi	r22, 0x06	; 6
     72a:	82 e0       	ldi	r24, 0x02	; 2
     72c:	0e 94 a6 06 	call	0xd4c	; 0xd4c <LCD_GoTo>
		LCD_Write_String("CARD ");
     730:	87 e2       	ldi	r24, 0x27	; 39
     732:	93 e0       	ldi	r25, 0x03	; 3
     734:	0e 94 3d 06 	call	0xc7a	; 0xc7a <LCD_Write_String>
		TIMER_0_DELAY_MS(DELAY_VALUE);
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	8a e7       	ldi	r24, 0x7A	; 122
     73e:	94 e4       	ldi	r25, 0x44	; 68
     740:	0e 94 43 0b 	call	0x1686	; 0x1686 <TIMER_0_DELAY_MS>
		LCD_Clear();
     744:	0e 94 a2 06 	call	0xd44	; 0xd44 <LCD_Clear>
		Stage_flag = WELCOME_STAGE ;
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Stage_flag>

	}
	

}
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	0f 90       	pop	r0
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	1f 91       	pop	r17
     75c:	0f 91       	pop	r16
     75e:	08 95       	ret

00000760 <app_Start>:
	
void app_Start(void){
	
	

	if (Stage_flag == WELCOME_STAGE)
     760:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <Stage_flag>
     764:	81 30       	cpi	r24, 0x01	; 1
     766:	19 f4       	brne	.+6      	; 0x76e <app_Start+0xe>
	{
		welcome();
     768:	0e 94 a0 00 	call	0x140	; 0x140 <welcome>
     76c:	08 95       	ret
	}
	else if (Stage_flag == INSERTION_STAGE)
     76e:	82 30       	cpi	r24, 0x02	; 2
     770:	19 f4       	brne	.+6      	; 0x778 <app_Start+0x18>
	{
		insertion();
     772:	0e 94 ae 00 	call	0x15c	; 0x15c <insertion>
     776:	08 95       	ret
	}
	
	else if (Stage_flag == RECIEVE_STAGE)
     778:	83 30       	cpi	r24, 0x03	; 3
     77a:	19 f4       	brne	.+6      	; 0x782 <app_Start+0x22>
	{
		RECIEVE_data();
     77c:	0e 94 b7 00 	call	0x16e	; 0x16e <RECIEVE_data>
     780:	08 95       	ret
	}
	else if (Stage_flag == PIN_ENTRY_STAGE)
     782:	84 30       	cpi	r24, 0x04	; 4
     784:	19 f4       	brne	.+6      	; 0x78c <app_Start+0x2c>
	{
		PIN_Entery();
     786:	0e 94 fe 00 	call	0x1fc	; 0x1fc <PIN_Entery>
     78a:	08 95       	ret
	}
	else if (Stage_flag == PIN_CHECK_STAGE){
     78c:	85 30       	cpi	r24, 0x05	; 5
     78e:	19 f4       	brne	.+6      	; 0x796 <app_Start+0x36>
		
		PIN_Check();
     790:	0e 94 79 01 	call	0x2f2	; 0x2f2 <PIN_Check>
     794:	08 95       	ret
		
	}else if (Stage_flag == TRANSACTION_ENTRY_STAGE){
     796:	86 30       	cpi	r24, 0x06	; 6
     798:	19 f4       	brne	.+6      	; 0x7a0 <app_Start+0x40>
		
		transaction_Entry();
     79a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <transaction_Entry>
     79e:	08 95       	ret

	}else if (Stage_flag == ACCOUNT_CHECK_STAGE){
     7a0:	87 30       	cpi	r24, 0x07	; 7
     7a2:	11 f4       	brne	.+4      	; 0x7a8 <app_Start+0x48>
	
		account_checks();
     7a4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <account_checks>
     7a8:	08 95       	ret

000007aa <isValidAccount>:

/******************************************* isValidAccount **********************************************/
//calling database and card data

EN_serverError_t isValidAccount(uint8_t *pan )
{
     7aa:	dc 01       	movw	r26, r24

    uint8_t exist_flag = 0 ;
    EN_serverError_t server_status ;

    for(uint8_t account_num= 0 ; account_num< 10 ; account_num++) // num of accounts
     7ac:	80 e0       	ldi	r24, 0x00	; 0
//calling database and card data

EN_serverError_t isValidAccount(uint8_t *pan )
{

    uint8_t exist_flag = 0 ;
     7ae:	20 e0       	ldi	r18, 0x00	; 0
    EN_serverError_t server_status ;

    for(uint8_t account_num= 0 ; account_num< 10 ; account_num++) // num of accounts
     7b0:	21 c0       	rjmp	.+66     	; 0x7f4 <isValidAccount+0x4a>
    {
        for(uint8_t counter = 0 ; counter < 16 ; counter++)
        {
            if( pan[counter] == (p_account)->primaryAccountNumber[counter] )
     7b2:	29 2f       	mov	r18, r25
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	fd 01       	movw	r30, r26
     7b8:	e2 0f       	add	r30, r18
     7ba:	f3 1f       	adc	r31, r19
     7bc:	60 81       	ld	r22, Z
     7be:	40 91 6e 00 	lds	r20, 0x006E	; 0x80006e <p_account>
     7c2:	50 91 6f 00 	lds	r21, 0x006F	; 0x80006f <p_account+0x1>
     7c6:	fa 01       	movw	r30, r20
     7c8:	e2 0f       	add	r30, r18
     7ca:	f3 1f       	adc	r31, r19
     7cc:	25 81       	ldd	r18, Z+5	; 0x05
     7ce:	62 13       	cpse	r22, r18
     7d0:	03 c0       	rjmp	.+6      	; 0x7d8 <isValidAccount+0x2e>
    uint8_t exist_flag = 0 ;
    EN_serverError_t server_status ;

    for(uint8_t account_num= 0 ; account_num< 10 ; account_num++) // num of accounts
    {
        for(uint8_t counter = 0 ; counter < 16 ; counter++)
     7d2:	9f 5f       	subi	r25, 0xFF	; 255
        {
            if( pan[counter] == (p_account)->primaryAccountNumber[counter] )
            {
                exist_flag =1 ;
     7d4:	21 e0       	ldi	r18, 0x01	; 1
     7d6:	09 c0       	rjmp	.+18     	; 0x7ea <isValidAccount+0x40>
				
            }
            else
            {
                p_account++;
     7d8:	4a 5e       	subi	r20, 0xEA	; 234
     7da:	5f 4f       	sbci	r21, 0xFF	; 255
     7dc:	50 93 6f 00 	sts	0x006F, r21	; 0x80006f <p_account+0x1>
     7e0:	40 93 6e 00 	sts	0x006E, r20	; 0x80006e <p_account>
                exist_flag =0;
     7e4:	20 e0       	ldi	r18, 0x00	; 0
                break ;
     7e6:	03 c0       	rjmp	.+6      	; 0x7ee <isValidAccount+0x44>
     7e8:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t exist_flag = 0 ;
    EN_serverError_t server_status ;

    for(uint8_t account_num= 0 ; account_num< 10 ; account_num++) // num of accounts
    {
        for(uint8_t counter = 0 ; counter < 16 ; counter++)
     7ea:	90 31       	cpi	r25, 0x10	; 16
     7ec:	10 f3       	brcs	.-60     	; 0x7b2 <isValidAccount+0x8>
                exist_flag =0;
                break ;
            }
        }
		
		if (exist_flag)
     7ee:	21 11       	cpse	r18, r1
     7f0:	03 c0       	rjmp	.+6      	; 0x7f8 <isValidAccount+0x4e>
{

    uint8_t exist_flag = 0 ;
    EN_serverError_t server_status ;

    for(uint8_t account_num= 0 ; account_num< 10 ; account_num++) // num of accounts
     7f2:	8f 5f       	subi	r24, 0xFF	; 255
     7f4:	8a 30       	cpi	r24, 0x0A	; 10
     7f6:	c0 f3       	brcs	.-16     	; 0x7e8 <isValidAccount+0x3e>
		}
		
		
    }

    if(exist_flag)
     7f8:	21 11       	cpse	r18, r1
     7fa:	06 c0       	rjmp	.+12     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
        server_status = SERVER_OK ;
    }
    else
    {
        server_status =ACCOUNT_NOT_FOUND  ;
        p_account = NULL ;
     7fc:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <p_account+0x1>
     800:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <p_account>
    {
        server_status = SERVER_OK ;
    }
    else
    {
        server_status =ACCOUNT_NOT_FOUND  ;
     804:	83 e0       	ldi	r24, 0x03	; 3
     806:	08 95       	ret
		
    }

    if(exist_flag)
    {
        server_status = SERVER_OK ;
     808:	80 e0       	ldi	r24, 0x00	; 0




    return server_status ;
}
     80a:	08 95       	ret

0000080c <isBlockedAccount>:


EN_serverError_t isBlockedAccount()
{

    if(_isValidAccount== SERVER_OK)
     80c:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <_isValidAccount>
     810:	81 11       	cpse	r24, r1
     812:	08 c0       	rjmp	.+16     	; 0x824 <isBlockedAccount+0x18>
    {
        if (p_account->state==BLOCKED)
     814:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <p_account>
     818:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <p_account+0x1>
     81c:	94 81       	ldd	r25, Z+4	; 0x04
     81e:	91 30       	cpi	r25, 0x01	; 1
     820:	19 f4       	brne	.+6      	; 0x828 <isBlockedAccount+0x1c>
     822:	01 c0       	rjmp	.+2      	; 0x826 <isBlockedAccount+0x1a>

        }

    }

}
     824:	08 95       	ret
    {
        if (p_account->state==BLOCKED)
        {


            return BLOCKED_ACCOUNT ;
     826:	85 e0       	ldi	r24, 0x05	; 5

        }

    }

}
     828:	08 95       	ret

0000082a <isAmountAvailable>:


/******************************************* isAmountAvailable **********************************************/
// calling terminal data and database
EN_serverError_t isAmountAvailable(float *termData)
{
     82a:	cf 93       	push	r28

    if(_isValidAccount==SERVER_OK && _isBlockedAccount == SERVER_OK)
     82c:	20 91 72 03 	lds	r18, 0x0372	; 0x800372 <_isValidAccount>
     830:	21 11       	cpse	r18, r1
     832:	16 c0       	rjmp	.+44     	; 0x860 <__stack+0x1>
     834:	c0 91 70 03 	lds	r28, 0x0370	; 0x800370 <_isBlockedAccount>
     838:	c1 11       	cpse	r28, r1
     83a:	12 c0       	rjmp	.+36     	; 0x860 <__stack+0x1>
     83c:	dc 01       	movw	r26, r24
    {
        if ((p_account->balance)<(*termData))
     83e:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <p_account>
     842:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <p_account+0x1>
     846:	60 81       	ld	r22, Z
     848:	71 81       	ldd	r23, Z+1	; 0x01
     84a:	82 81       	ldd	r24, Z+2	; 0x02
     84c:	93 81       	ldd	r25, Z+3	; 0x03
     84e:	2d 91       	ld	r18, X+
     850:	3d 91       	ld	r19, X+
     852:	4d 91       	ld	r20, X+
     854:	5c 91       	ld	r21, X
     856:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__cmpsf2>
     85a:	88 23       	and	r24, r24
     85c:	14 f0       	brlt	.+4      	; 0x862 <__stack+0x3>
     85e:	02 c0       	rjmp	.+4      	; 0x864 <__stack+0x5>
        {
            return SERVER_OK;
        }

    }
}
     860:	02 c0       	rjmp	.+4      	; 0x866 <__stack+0x7>

    if(_isValidAccount==SERVER_OK && _isBlockedAccount == SERVER_OK)
    {
        if ((p_account->balance)<(*termData))
        {
            return LOW_BALANCE;
     862:	c4 e0       	ldi	r28, 0x04	; 4
     864:	8c 2f       	mov	r24, r28
        {
            return SERVER_OK;
        }

    }
}
     866:	cf 91       	pop	r28
     868:	08 95       	ret

0000086a <buzzer_init>:
/* Description:
Function used to initialize the buzzer connected pin as output
*********************************************************************************************************************************************/
void buzzer_init(void)
{
	DIO_INITPIN(pinb3,OUTPUT);
     86a:	60 e0       	ldi	r22, 0x00	; 0
     86c:	8b e0       	ldi	r24, 0x0B	; 11
     86e:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_INITPIN>
     872:	08 95       	ret

00000874 <buzzer_On>:
/* Description:
Function used to put high voltage in buzzer pin
*******************************************************************************************************************************************/
void buzzer_On(void)
{
	DIO_WRITEPIN(pinb3,HIGH)	;
     874:	61 e0       	ldi	r22, 0x01	; 1
     876:	8b e0       	ldi	r24, 0x0B	; 11
     878:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
     87c:	08 95       	ret

0000087e <buzzer_Off>:
/* Description:
Function used to put low voltage in buzzer pin
********************************************************************************************************************************************/
void buzzer_Off(void)
{
	DIO_WRITEPIN(pinb3,LOW)	;
     87e:	60 e0       	ldi	r22, 0x00	; 0
     880:	8b e0       	ldi	r24, 0x0B	; 11
     882:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
     886:	08 95       	ret

00000888 <KEYPAD_init>:
/* Description:
- Function used to initialize the rows pins of keypad as output and set them high and initialize the columns pins of keypad as  input pullup
- FIRST_ROW_PIN , LAST_ROW_PIN ,FIRST_COL_PIN , LAST_COL_PIN are used to define the keypad dimensions and can be changed in configurations
************************************************************************************************************************************************/

void KEYPAD_init(void){
     888:	cf 93       	push	r28
	
	for (uint8_t row_pins = FIRST_ROW_PIN ; row_pins <= LAST_ROW_PIN ; row_pins++)
     88a:	c2 e1       	ldi	r28, 0x12	; 18
     88c:	09 c0       	rjmp	.+18     	; 0x8a0 <KEYPAD_init+0x18>
	{
		DIO_INITPIN(row_pins,OUTPUT);
     88e:	60 e0       	ldi	r22, 0x00	; 0
     890:	8c 2f       	mov	r24, r28
     892:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_INITPIN>
		DIO_WRITEPIN(row_pins,HIGH);
     896:	61 e0       	ldi	r22, 0x01	; 1
     898:	8c 2f       	mov	r24, r28
     89a:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
- FIRST_ROW_PIN , LAST_ROW_PIN ,FIRST_COL_PIN , LAST_COL_PIN are used to define the keypad dimensions and can be changed in configurations
************************************************************************************************************************************************/

void KEYPAD_init(void){
	
	for (uint8_t row_pins = FIRST_ROW_PIN ; row_pins <= LAST_ROW_PIN ; row_pins++)
     89e:	cf 5f       	subi	r28, 0xFF	; 255
     8a0:	c5 31       	cpi	r28, 0x15	; 21
     8a2:	a8 f3       	brcs	.-22     	; 0x88e <KEYPAD_init+0x6>
     8a4:	c5 e1       	ldi	r28, 0x15	; 21
     8a6:	05 c0       	rjmp	.+10     	; 0x8b2 <KEYPAD_init+0x2a>
		DIO_WRITEPIN(row_pins,HIGH);
	}
	
	for (uint8_t col_pins = FIRST_COL_PIN ; col_pins <= LAST_COL_PIN ; col_pins++)
	{
		DIO_INITPIN(col_pins,INPLUP);
     8a8:	62 e0       	ldi	r22, 0x02	; 2
     8aa:	8c 2f       	mov	r24, r28
     8ac:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_INITPIN>
	{
		DIO_INITPIN(row_pins,OUTPUT);
		DIO_WRITEPIN(row_pins,HIGH);
	}
	
	for (uint8_t col_pins = FIRST_COL_PIN ; col_pins <= LAST_COL_PIN ; col_pins++)
     8b0:	cf 5f       	subi	r28, 0xFF	; 255
     8b2:	c8 31       	cpi	r28, 0x18	; 24
     8b4:	c8 f3       	brcs	.-14     	; 0x8a8 <KEYPAD_init+0x20>
		

	}
	
	
}
     8b6:	cf 91       	pop	r28
     8b8:	08 95       	ret

000008ba <KEYPAD_getKey>:
/* Description:
- Function used to return the data of the pressed key
- data can be changed in configurations
*************************************************************************************************************************************************/

uint8_t KEYPAD_getKey(){
     8ba:	ff 92       	push	r15
     8bc:	0f 93       	push	r16
     8be:	1f 93       	push	r17
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	1f 92       	push	r1
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t a_col_state =1 ;
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	89 83       	std	Y+1, r24	; 0x01
	uint8_t  a_keychar ;
	
	//loop for rows
	for (uint8_t a_rows = FIRST_ROW_PIN ; a_rows <= LAST_ROW_PIN ; a_rows ++)
     8ce:	02 e1       	ldi	r16, 0x12	; 18
     8d0:	b1 c0       	rjmp	.+354    	; 0xa34 <KEYPAD_getKey+0x17a>
	{
		
		DIO_WRITEPIN(a_rows,LOW);
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	80 2f       	mov	r24, r16
     8d6:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8da:	87 e8       	ldi	r24, 0x87	; 135
     8dc:	93 e1       	ldi	r25, 0x13	; 19
     8de:	01 97       	sbiw	r24, 0x01	; 1
     8e0:	f1 f7       	brne	.-4      	; 0x8de <KEYPAD_getKey+0x24>
     8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <KEYPAD_getKey+0x2a>
     8e4:	00 00       	nop
		_delay_ms(20);
		
		//loop  for columns
		for(uint8_t a_cols = FIRST_COL_PIN ; a_cols <= LAST_COL_PIN ; a_cols++){
     8e6:	15 e1       	ldi	r17, 0x15	; 21
     8e8:	9d c0       	rjmp	.+314    	; 0xa24 <KEYPAD_getKey+0x16a>
			DIO_READPIN(a_cols,&a_col_state);
     8ea:	be 01       	movw	r22, r28
     8ec:	6f 5f       	subi	r22, 0xFF	; 255
     8ee:	7f 4f       	sbci	r23, 0xFF	; 255
     8f0:	81 2f       	mov	r24, r17
     8f2:	0e 94 76 08 	call	0x10ec	; 0x10ec <DIO_READPIN>
	
			while(a_col_state == 0){
     8f6:	91 c0       	rjmp	.+290    	; 0xa1a <KEYPAD_getKey+0x160>
				DIO_READPIN(a_cols,&a_col_state);
     8f8:	be 01       	movw	r22, r28
     8fa:	6f 5f       	subi	r22, 0xFF	; 255
     8fc:	7f 4f       	sbci	r23, 0xFF	; 255
     8fe:	81 2f       	mov	r24, r17
     900:	0e 94 76 08 	call	0x10ec	; 0x10ec <DIO_READPIN>
				
				//check the pressed row0
				switch(a_rows){
     904:	03 31       	cpi	r16, 0x13	; 19
     906:	29 f1       	breq	.+74     	; 0x952 <KEYPAD_getKey+0x98>
     908:	18 f4       	brcc	.+6      	; 0x910 <KEYPAD_getKey+0x56>
     90a:	02 31       	cpi	r16, 0x12	; 18
     90c:	39 f0       	breq	.+14     	; 0x91c <KEYPAD_getKey+0x62>
     90e:	70 c0       	rjmp	.+224    	; 0x9f0 <KEYPAD_getKey+0x136>
     910:	04 31       	cpi	r16, 0x14	; 20
     912:	d1 f1       	breq	.+116    	; 0x988 <KEYPAD_getKey+0xce>
     914:	05 31       	cpi	r16, 0x15	; 21
     916:	09 f4       	brne	.+2      	; 0x91a <KEYPAD_getKey+0x60>
     918:	51 c0       	rjmp	.+162    	; 0x9bc <KEYPAD_getKey+0x102>
     91a:	6a c0       	rjmp	.+212    	; 0x9f0 <KEYPAD_getKey+0x136>
				
					case ROW_0 :
						
						//check the pressed column
						switch(a_cols){
     91c:	16 31       	cpi	r17, 0x16	; 22
     91e:	51 f0       	breq	.+20     	; 0x934 <KEYPAD_getKey+0x7a>
     920:	20 f4       	brcc	.+8      	; 0x92a <KEYPAD_getKey+0x70>
     922:	15 31       	cpi	r17, 0x15	; 21
     924:	09 f4       	brne	.+2      	; 0x928 <KEYPAD_getKey+0x6e>
     926:	66 c0       	rjmp	.+204    	; 0x9f4 <KEYPAD_getKey+0x13a>
     928:	78 c0       	rjmp	.+240    	; 0xa1a <KEYPAD_getKey+0x160>
     92a:	17 31       	cpi	r17, 0x17	; 23
     92c:	41 f0       	breq	.+16     	; 0x93e <KEYPAD_getKey+0x84>
     92e:	18 31       	cpi	r17, 0x18	; 24
     930:	59 f0       	breq	.+22     	; 0x948 <KEYPAD_getKey+0x8e>
     932:	73 c0       	rjmp	.+230    	; 0xa1a <KEYPAD_getKey+0x160>
							case COL_0 :
							a_keychar = KEYPAD_ROW_0_COLUMN_0 ;
							break;
							
							case COL_1 :
							a_keychar = KEYPAD_ROW_0_COLUMN_1;
     934:	0f 2e       	mov	r0, r31
     936:	f8 e3       	ldi	r31, 0x38	; 56
     938:	ff 2e       	mov	r15, r31
     93a:	f0 2d       	mov	r31, r0
							break;
     93c:	6e c0       	rjmp	.+220    	; 0xa1a <KEYPAD_getKey+0x160>
							
							case COL_2 :
							a_keychar = KEYPAD_ROW_0_COLUMN_2;
     93e:	0f 2e       	mov	r0, r31
     940:	f9 e3       	ldi	r31, 0x39	; 57
     942:	ff 2e       	mov	r15, r31
     944:	f0 2d       	mov	r31, r0
							break;
     946:	69 c0       	rjmp	.+210    	; 0xa1a <KEYPAD_getKey+0x160>
							
							case COL_3 :
							a_keychar = KEYPAD_ROW_0_COLUMN_3;
     948:	0f 2e       	mov	r0, r31
     94a:	ff e2       	ldi	r31, 0x2F	; 47
     94c:	ff 2e       	mov	r15, r31
     94e:	f0 2d       	mov	r31, r0
							break;
     950:	64 c0       	rjmp	.+200    	; 0xa1a <KEYPAD_getKey+0x160>
						
						
						
				  case ROW_1 :
					//check the pressed column
					switch(a_cols){
     952:	16 31       	cpi	r17, 0x16	; 22
     954:	51 f0       	breq	.+20     	; 0x96a <KEYPAD_getKey+0xb0>
     956:	20 f4       	brcc	.+8      	; 0x960 <KEYPAD_getKey+0xa6>
     958:	15 31       	cpi	r17, 0x15	; 21
     95a:	09 f4       	brne	.+2      	; 0x95e <KEYPAD_getKey+0xa4>
     95c:	50 c0       	rjmp	.+160    	; 0x9fe <KEYPAD_getKey+0x144>
     95e:	5d c0       	rjmp	.+186    	; 0xa1a <KEYPAD_getKey+0x160>
     960:	17 31       	cpi	r17, 0x17	; 23
     962:	41 f0       	breq	.+16     	; 0x974 <KEYPAD_getKey+0xba>
     964:	18 31       	cpi	r17, 0x18	; 24
     966:	59 f0       	breq	.+22     	; 0x97e <KEYPAD_getKey+0xc4>
     968:	58 c0       	rjmp	.+176    	; 0xa1a <KEYPAD_getKey+0x160>
							case COL_0 :
							a_keychar= KEYPAD_ROW_1_COLUMN_0 ;
							break;
							
							case COL_1 :
							a_keychar = KEYPAD_ROW_1_COLUMN_1;
     96a:	0f 2e       	mov	r0, r31
     96c:	f5 e3       	ldi	r31, 0x35	; 53
     96e:	ff 2e       	mov	r15, r31
     970:	f0 2d       	mov	r31, r0
							break;
     972:	53 c0       	rjmp	.+166    	; 0xa1a <KEYPAD_getKey+0x160>
							
							case COL_2 :
							a_keychar= KEYPAD_ROW_1_COLUMN_2;
     974:	0f 2e       	mov	r0, r31
     976:	f6 e3       	ldi	r31, 0x36	; 54
     978:	ff 2e       	mov	r15, r31
     97a:	f0 2d       	mov	r31, r0
							break;
     97c:	4e c0       	rjmp	.+156    	; 0xa1a <KEYPAD_getKey+0x160>
							
							case COL_3 :
							a_keychar = KEYPAD_ROW_1_COLUMN_3;
     97e:	0f 2e       	mov	r0, r31
     980:	fa e2       	ldi	r31, 0x2A	; 42
     982:	ff 2e       	mov	r15, r31
     984:	f0 2d       	mov	r31, r0
							break;
     986:	49 c0       	rjmp	.+146    	; 0xa1a <KEYPAD_getKey+0x160>
						
						
				  case ROW_2 :
						
					//check the pressed column
					switch(a_cols){
     988:	16 31       	cpi	r17, 0x16	; 22
     98a:	49 f0       	breq	.+18     	; 0x99e <KEYPAD_getKey+0xe4>
     98c:	18 f4       	brcc	.+6      	; 0x994 <KEYPAD_getKey+0xda>
     98e:	15 31       	cpi	r17, 0x15	; 21
     990:	d9 f1       	breq	.+118    	; 0xa08 <KEYPAD_getKey+0x14e>
     992:	43 c0       	rjmp	.+134    	; 0xa1a <KEYPAD_getKey+0x160>
     994:	17 31       	cpi	r17, 0x17	; 23
     996:	41 f0       	breq	.+16     	; 0x9a8 <KEYPAD_getKey+0xee>
     998:	18 31       	cpi	r17, 0x18	; 24
     99a:	59 f0       	breq	.+22     	; 0x9b2 <KEYPAD_getKey+0xf8>
     99c:	3e c0       	rjmp	.+124    	; 0xa1a <KEYPAD_getKey+0x160>
							case COL_0 :
							a_keychar= KEYPAD_ROW_2_COLUMN_0 ;
							break;
							
							case COL_1 :
							a_keychar = KEYPAD_ROW_2_COLUMN_1;
     99e:	0f 2e       	mov	r0, r31
     9a0:	f2 e3       	ldi	r31, 0x32	; 50
     9a2:	ff 2e       	mov	r15, r31
     9a4:	f0 2d       	mov	r31, r0
							break;
     9a6:	39 c0       	rjmp	.+114    	; 0xa1a <KEYPAD_getKey+0x160>
							
							case COL_2 :
							a_keychar= KEYPAD_ROW_2_COLUMN_2;
     9a8:	0f 2e       	mov	r0, r31
     9aa:	f3 e3       	ldi	r31, 0x33	; 51
     9ac:	ff 2e       	mov	r15, r31
     9ae:	f0 2d       	mov	r31, r0
							break;
     9b0:	34 c0       	rjmp	.+104    	; 0xa1a <KEYPAD_getKey+0x160>
							
							case COL_3 :
							a_keychar = KEYPAD_ROW_2_COLUMN_3;
     9b2:	0f 2e       	mov	r0, r31
     9b4:	fd e2       	ldi	r31, 0x2D	; 45
     9b6:	ff 2e       	mov	r15, r31
     9b8:	f0 2d       	mov	r31, r0
							break;
     9ba:	2f c0       	rjmp	.+94     	; 0xa1a <KEYPAD_getKey+0x160>
						
						
				  case ROW_3 :
						
					//check the pressed column
				   switch(a_cols){
     9bc:	16 31       	cpi	r17, 0x16	; 22
     9be:	49 f0       	breq	.+18     	; 0x9d2 <KEYPAD_getKey+0x118>
     9c0:	18 f4       	brcc	.+6      	; 0x9c8 <KEYPAD_getKey+0x10e>
     9c2:	15 31       	cpi	r17, 0x15	; 21
     9c4:	31 f1       	breq	.+76     	; 0xa12 <KEYPAD_getKey+0x158>
     9c6:	29 c0       	rjmp	.+82     	; 0xa1a <KEYPAD_getKey+0x160>
     9c8:	17 31       	cpi	r17, 0x17	; 23
     9ca:	41 f0       	breq	.+16     	; 0x9dc <KEYPAD_getKey+0x122>
     9cc:	18 31       	cpi	r17, 0x18	; 24
     9ce:	59 f0       	breq	.+22     	; 0x9e6 <KEYPAD_getKey+0x12c>
     9d0:	24 c0       	rjmp	.+72     	; 0xa1a <KEYPAD_getKey+0x160>
							case COL_0 :
							a_keychar= KEYPAD_ROW_3_COLUMN_0 ;
							break;
							
							case COL_1 :
							a_keychar = KEYPAD_ROW_3_COLUMN_1;
     9d2:	0f 2e       	mov	r0, r31
     9d4:	f0 e3       	ldi	r31, 0x30	; 48
     9d6:	ff 2e       	mov	r15, r31
     9d8:	f0 2d       	mov	r31, r0
							break;
     9da:	1f c0       	rjmp	.+62     	; 0xa1a <KEYPAD_getKey+0x160>
							
							case COL_2 :
							a_keychar= KEYPAD_ROW_3_COLUMN_2;
     9dc:	0f 2e       	mov	r0, r31
     9de:	fd e3       	ldi	r31, 0x3D	; 61
     9e0:	ff 2e       	mov	r15, r31
     9e2:	f0 2d       	mov	r31, r0
							break;
     9e4:	1a c0       	rjmp	.+52     	; 0xa1a <KEYPAD_getKey+0x160>
							
							case COL_3 :
							a_keychar = KEYPAD_ROW_3_COLUMN_3;
     9e6:	0f 2e       	mov	r0, r31
     9e8:	fb e2       	ldi	r31, 0x2B	; 43
     9ea:	ff 2e       	mov	r15, r31
     9ec:	f0 2d       	mov	r31, r0
							break;
     9ee:	15 c0       	rjmp	.+42     	; 0xa1a <KEYPAD_getKey+0x160>
						
						

			// no press			
			default: 
			a_keychar = 0;
     9f0:	f1 2c       	mov	r15, r1
     9f2:	13 c0       	rjmp	.+38     	; 0xa1a <KEYPAD_getKey+0x160>
						
						//check the pressed column
						switch(a_cols){
							
							case COL_0 :
							a_keychar = KEYPAD_ROW_0_COLUMN_0 ;
     9f4:	0f 2e       	mov	r0, r31
     9f6:	f7 e3       	ldi	r31, 0x37	; 55
     9f8:	ff 2e       	mov	r15, r31
     9fa:	f0 2d       	mov	r31, r0
     9fc:	0e c0       	rjmp	.+28     	; 0xa1a <KEYPAD_getKey+0x160>
				  case ROW_1 :
					//check the pressed column
					switch(a_cols){
							
							case COL_0 :
							a_keychar= KEYPAD_ROW_1_COLUMN_0 ;
     9fe:	0f 2e       	mov	r0, r31
     a00:	f4 e3       	ldi	r31, 0x34	; 52
     a02:	ff 2e       	mov	r15, r31
     a04:	f0 2d       	mov	r31, r0
     a06:	09 c0       	rjmp	.+18     	; 0xa1a <KEYPAD_getKey+0x160>
						
					//check the pressed column
					switch(a_cols){
							
							case COL_0 :
							a_keychar= KEYPAD_ROW_2_COLUMN_0 ;
     a08:	0f 2e       	mov	r0, r31
     a0a:	f1 e3       	ldi	r31, 0x31	; 49
     a0c:	ff 2e       	mov	r15, r31
     a0e:	f0 2d       	mov	r31, r0
     a10:	04 c0       	rjmp	.+8      	; 0xa1a <KEYPAD_getKey+0x160>
						
					//check the pressed column
				   switch(a_cols){
							
							case COL_0 :
							a_keychar= KEYPAD_ROW_3_COLUMN_0 ;
     a12:	0f 2e       	mov	r0, r31
     a14:	f1 e4       	ldi	r31, 0x41	; 65
     a16:	ff 2e       	mov	r15, r31
     a18:	f0 2d       	mov	r31, r0
		
		//loop  for columns
		for(uint8_t a_cols = FIRST_COL_PIN ; a_cols <= LAST_COL_PIN ; a_cols++){
			DIO_READPIN(a_cols,&a_col_state);
	
			while(a_col_state == 0){
     a1a:	89 81       	ldd	r24, Y+1	; 0x01
     a1c:	88 23       	and	r24, r24
     a1e:	09 f4       	brne	.+2      	; 0xa22 <KEYPAD_getKey+0x168>
     a20:	6b cf       	rjmp	.-298    	; 0x8f8 <KEYPAD_getKey+0x3e>
		
		DIO_WRITEPIN(a_rows,LOW);
		_delay_ms(20);
		
		//loop  for columns
		for(uint8_t a_cols = FIRST_COL_PIN ; a_cols <= LAST_COL_PIN ; a_cols++){
     a22:	1f 5f       	subi	r17, 0xFF	; 255
     a24:	18 31       	cpi	r17, 0x18	; 24
     a26:	08 f4       	brcc	.+2      	; 0xa2a <KEYPAD_getKey+0x170>
     a28:	60 cf       	rjmp	.-320    	; 0x8ea <KEYPAD_getKey+0x30>
				}
			
		}
		
		
		DIO_WRITEPIN(a_rows,HIGH);
     a2a:	61 e0       	ldi	r22, 0x01	; 1
     a2c:	80 2f       	mov	r24, r16
     a2e:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
	
	uint8_t a_col_state =1 ;
	uint8_t  a_keychar ;
	
	//loop for rows
	for (uint8_t a_rows = FIRST_ROW_PIN ; a_rows <= LAST_ROW_PIN ; a_rows ++)
     a32:	0f 5f       	subi	r16, 0xFF	; 255
     a34:	05 31       	cpi	r16, 0x15	; 21
     a36:	08 f4       	brcc	.+2      	; 0xa3a <KEYPAD_getKey+0x180>
     a38:	4c cf       	rjmp	.-360    	; 0x8d2 <KEYPAD_getKey+0x18>
		DIO_WRITEPIN(a_rows,HIGH);
		
	}
	
	return a_keychar ;
     a3a:	8f 2d       	mov	r24, r15
     a3c:	0f 90       	pop	r0
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	ff 90       	pop	r15
     a48:	08 95       	ret

00000a4a <LCD_WRITE_COMMAND>:
/*************************************************************************************************
                                     4_bit_mode
*****************************************************************************************************/

void LCD_WRITE_COMMAND(uint8_t a_COMMAND)
{
     a4a:	cf 93       	push	r28
     a4c:	c8 2f       	mov	r28, r24
	DIO_WRITEPIN(RS,LOW);
     a4e:	60 e0       	ldi	r22, 0x00	; 0
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
	DIO_WRITEPIN(RW,LOW);
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	82 e0       	ldi	r24, 0x02	; 2
     a5a:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
	/**for the 4 most significant bits**/
	DIO_WRITEPIN(D4,read_bit(a_COMMAND,4));
     a5e:	c4 fb       	bst	r28, 4
     a60:	66 27       	eor	r22, r22
     a62:	60 f9       	bld	r22, 0
     a64:	84 e0       	ldi	r24, 0x04	; 4
     a66:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
	DIO_WRITEPIN(D5,read_bit(a_COMMAND,5));
     a6a:	c5 fb       	bst	r28, 5
     a6c:	66 27       	eor	r22, r22
     a6e:	60 f9       	bld	r22, 0
     a70:	85 e0       	ldi	r24, 0x05	; 5
     a72:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
	DIO_WRITEPIN(D6,read_bit(a_COMMAND,6));
     a76:	c6 fb       	bst	r28, 6
     a78:	66 27       	eor	r22, r22
     a7a:	60 f9       	bld	r22, 0
     a7c:	86 e0       	ldi	r24, 0x06	; 6
     a7e:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
	DIO_WRITEPIN(D7,read_bit(a_COMMAND,7));
     a82:	6c 2f       	mov	r22, r28
     a84:	66 1f       	adc	r22, r22
     a86:	66 27       	eor	r22, r22
     a88:	66 1f       	adc	r22, r22
     a8a:	87 e0       	ldi	r24, 0x07	; 7
     a8c:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
	DIO_WRITEPIN(EN,HIGH);
     a90:	61 e0       	ldi	r22, 0x01	; 1
     a92:	83 e0       	ldi	r24, 0x03	; 3
     a94:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
     a98:	89 ef       	ldi	r24, 0xF9	; 249
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	01 97       	sbiw	r24, 0x01	; 1
     a9e:	f1 f7       	brne	.-4      	; 0xa9c <LCD_WRITE_COMMAND+0x52>
     aa0:	00 c0       	rjmp	.+0      	; 0xaa2 <LCD_WRITE_COMMAND+0x58>
     aa2:	00 00       	nop
	_delay_ms(1);
	DIO_WRITEPIN(EN,LOW);
     aa4:	60 e0       	ldi	r22, 0x00	; 0
     aa6:	83 e0       	ldi	r24, 0x03	; 3
     aa8:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
     aac:	89 ef       	ldi	r24, 0xF9	; 249
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	01 97       	sbiw	r24, 0x01	; 1
     ab2:	f1 f7       	brne	.-4      	; 0xab0 <LCD_WRITE_COMMAND+0x66>
     ab4:	00 c0       	rjmp	.+0      	; 0xab6 <LCD_WRITE_COMMAND+0x6c>
     ab6:	00 00       	nop
	_delay_ms(1);
	/**for the 4 least significant bits**/
	DIO_WRITEPIN(D4,read_bit(a_COMMAND,0));
     ab8:	6c 2f       	mov	r22, r28
     aba:	61 70       	andi	r22, 0x01	; 1
     abc:	84 e0       	ldi	r24, 0x04	; 4
     abe:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
	DIO_WRITEPIN(D5,read_bit(a_COMMAND,1));
     ac2:	c1 fb       	bst	r28, 1
     ac4:	66 27       	eor	r22, r22
     ac6:	60 f9       	bld	r22, 0
     ac8:	85 e0       	ldi	r24, 0x05	; 5
     aca:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
	DIO_WRITEPIN(D6,read_bit(a_COMMAND,2));
     ace:	c2 fb       	bst	r28, 2
     ad0:	66 27       	eor	r22, r22
     ad2:	60 f9       	bld	r22, 0
     ad4:	86 e0       	ldi	r24, 0x06	; 6
     ad6:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
	DIO_WRITEPIN(D7,read_bit(a_COMMAND,3));
     ada:	c3 fb       	bst	r28, 3
     adc:	66 27       	eor	r22, r22
     ade:	60 f9       	bld	r22, 0
     ae0:	87 e0       	ldi	r24, 0x07	; 7
     ae2:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
	DIO_WRITEPIN(EN,HIGH);
     ae6:	61 e0       	ldi	r22, 0x01	; 1
     ae8:	83 e0       	ldi	r24, 0x03	; 3
     aea:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
     aee:	89 ef       	ldi	r24, 0xF9	; 249
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	01 97       	sbiw	r24, 0x01	; 1
     af4:	f1 f7       	brne	.-4      	; 0xaf2 <LCD_WRITE_COMMAND+0xa8>
     af6:	00 c0       	rjmp	.+0      	; 0xaf8 <LCD_WRITE_COMMAND+0xae>
     af8:	00 00       	nop
	_delay_ms(1);
	DIO_WRITEPIN(EN,LOW);
     afa:	60 e0       	ldi	r22, 0x00	; 0
     afc:	83 e0       	ldi	r24, 0x03	; 3
     afe:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
     b02:	89 ef       	ldi	r24, 0xF9	; 249
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	01 97       	sbiw	r24, 0x01	; 1
     b08:	f1 f7       	brne	.-4      	; 0xb06 <LCD_WRITE_COMMAND+0xbc>
     b0a:	00 c0       	rjmp	.+0      	; 0xb0c <LCD_WRITE_COMMAND+0xc2>
     b0c:	00 00       	nop
	_delay_ms(1);
}
     b0e:	cf 91       	pop	r28
     b10:	08 95       	ret

00000b12 <LCD_WRITE_DATA>:

/*************************************************************************************************************************/

void LCD_WRITE_DATA(uint8_t a_DATA)
{
     b12:	cf 93       	push	r28
     b14:	c8 2f       	mov	r28, r24
	DIO_WRITEPIN(RS,HIGH);
     b16:	61 e0       	ldi	r22, 0x01	; 1
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
	DIO_WRITEPIN(RW,LOW);
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	82 e0       	ldi	r24, 0x02	; 2
     b22:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
	/**for the 4 most significant bits**/
	DIO_WRITEPIN(D4,read_bit(a_DATA,4));
     b26:	c4 fb       	bst	r28, 4
     b28:	66 27       	eor	r22, r22
     b2a:	60 f9       	bld	r22, 0
     b2c:	84 e0       	ldi	r24, 0x04	; 4
     b2e:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
	DIO_WRITEPIN(D5,read_bit(a_DATA,5));
     b32:	c5 fb       	bst	r28, 5
     b34:	66 27       	eor	r22, r22
     b36:	60 f9       	bld	r22, 0
     b38:	85 e0       	ldi	r24, 0x05	; 5
     b3a:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
	DIO_WRITEPIN(D6,read_bit(a_DATA,6));
     b3e:	c6 fb       	bst	r28, 6
     b40:	66 27       	eor	r22, r22
     b42:	60 f9       	bld	r22, 0
     b44:	86 e0       	ldi	r24, 0x06	; 6
     b46:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
	DIO_WRITEPIN(D7,read_bit(a_DATA,7));
     b4a:	6c 2f       	mov	r22, r28
     b4c:	66 1f       	adc	r22, r22
     b4e:	66 27       	eor	r22, r22
     b50:	66 1f       	adc	r22, r22
     b52:	87 e0       	ldi	r24, 0x07	; 7
     b54:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
	DIO_WRITEPIN(EN,HIGH);
     b58:	61 e0       	ldi	r22, 0x01	; 1
     b5a:	83 e0       	ldi	r24, 0x03	; 3
     b5c:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
     b60:	89 ef       	ldi	r24, 0xF9	; 249
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	f1 f7       	brne	.-4      	; 0xb64 <LCD_WRITE_DATA+0x52>
     b68:	00 c0       	rjmp	.+0      	; 0xb6a <LCD_WRITE_DATA+0x58>
     b6a:	00 00       	nop
	_delay_ms(1);
	DIO_WRITEPIN(EN,LOW);
     b6c:	60 e0       	ldi	r22, 0x00	; 0
     b6e:	83 e0       	ldi	r24, 0x03	; 3
     b70:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
     b74:	89 ef       	ldi	r24, 0xF9	; 249
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	01 97       	sbiw	r24, 0x01	; 1
     b7a:	f1 f7       	brne	.-4      	; 0xb78 <LCD_WRITE_DATA+0x66>
     b7c:	00 c0       	rjmp	.+0      	; 0xb7e <LCD_WRITE_DATA+0x6c>
     b7e:	00 00       	nop
	_delay_ms(1);
	/**for the 4 least significant bits**/
	DIO_WRITEPIN(D4,read_bit(a_DATA,0));
     b80:	6c 2f       	mov	r22, r28
     b82:	61 70       	andi	r22, 0x01	; 1
     b84:	84 e0       	ldi	r24, 0x04	; 4
     b86:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
	DIO_WRITEPIN(D5,read_bit(a_DATA,1));
     b8a:	c1 fb       	bst	r28, 1
     b8c:	66 27       	eor	r22, r22
     b8e:	60 f9       	bld	r22, 0
     b90:	85 e0       	ldi	r24, 0x05	; 5
     b92:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
	DIO_WRITEPIN(D6,read_bit(a_DATA,2));
     b96:	c2 fb       	bst	r28, 2
     b98:	66 27       	eor	r22, r22
     b9a:	60 f9       	bld	r22, 0
     b9c:	86 e0       	ldi	r24, 0x06	; 6
     b9e:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
	DIO_WRITEPIN(D7,read_bit(a_DATA,3));
     ba2:	c3 fb       	bst	r28, 3
     ba4:	66 27       	eor	r22, r22
     ba6:	60 f9       	bld	r22, 0
     ba8:	87 e0       	ldi	r24, 0x07	; 7
     baa:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
	DIO_WRITEPIN(EN,HIGH);
     bae:	61 e0       	ldi	r22, 0x01	; 1
     bb0:	83 e0       	ldi	r24, 0x03	; 3
     bb2:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
     bb6:	89 ef       	ldi	r24, 0xF9	; 249
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	01 97       	sbiw	r24, 0x01	; 1
     bbc:	f1 f7       	brne	.-4      	; 0xbba <LCD_WRITE_DATA+0xa8>
     bbe:	00 c0       	rjmp	.+0      	; 0xbc0 <LCD_WRITE_DATA+0xae>
     bc0:	00 00       	nop
	_delay_ms(1);
	DIO_WRITEPIN(EN,LOW);
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	83 e0       	ldi	r24, 0x03	; 3
     bc6:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
     bca:	89 ef       	ldi	r24, 0xF9	; 249
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	01 97       	sbiw	r24, 0x01	; 1
     bd0:	f1 f7       	brne	.-4      	; 0xbce <LCD_WRITE_DATA+0xbc>
     bd2:	00 c0       	rjmp	.+0      	; 0xbd4 <LCD_WRITE_DATA+0xc2>
     bd4:	00 00       	nop
	_delay_ms(1);
}
     bd6:	cf 91       	pop	r28
     bd8:	08 95       	ret

00000bda <LCD_INIT>:
/*************************************************************************************************************************/

void LCD_INIT(void)
{
	
	DIO_INITPIN(pina1,OUTPUT);
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_INITPIN>
	DIO_INITPIN(pina2,OUTPUT);
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	82 e0       	ldi	r24, 0x02	; 2
     be6:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_INITPIN>
	DIO_INITPIN(pina3,OUTPUT);
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	83 e0       	ldi	r24, 0x03	; 3
     bee:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_INITPIN>
	DIO_INITPIN(pina4,OUTPUT);
     bf2:	60 e0       	ldi	r22, 0x00	; 0
     bf4:	84 e0       	ldi	r24, 0x04	; 4
     bf6:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_INITPIN>
	DIO_INITPIN(pina5,OUTPUT);
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	85 e0       	ldi	r24, 0x05	; 5
     bfe:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_INITPIN>
	DIO_INITPIN(pina6,OUTPUT);
     c02:	60 e0       	ldi	r22, 0x00	; 0
     c04:	86 e0       	ldi	r24, 0x06	; 6
     c06:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_INITPIN>
	DIO_INITPIN(pina7,OUTPUT);
     c0a:	60 e0       	ldi	r22, 0x00	; 0
     c0c:	87 e0       	ldi	r24, 0x07	; 7
     c0e:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_INITPIN>
     c12:	83 ed       	ldi	r24, 0xD3	; 211
     c14:	90 e3       	ldi	r25, 0x30	; 48
     c16:	01 97       	sbiw	r24, 0x01	; 1
     c18:	f1 f7       	brne	.-4      	; 0xc16 <LCD_INIT+0x3c>
     c1a:	00 c0       	rjmp	.+0      	; 0xc1c <LCD_INIT+0x42>
     c1c:	00 00       	nop
	
	
	_delay_ms(50);
	LCD_WRITE_COMMAND(0x02);
     c1e:	82 e0       	ldi	r24, 0x02	; 2
     c20:	0e 94 25 05 	call	0xa4a	; 0xa4a <LCD_WRITE_COMMAND>
     c24:	89 ef       	ldi	r24, 0xF9	; 249
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	f1 f7       	brne	.-4      	; 0xc28 <LCD_INIT+0x4e>
     c2c:	00 c0       	rjmp	.+0      	; 0xc2e <LCD_INIT+0x54>
     c2e:	00 00       	nop
	_delay_ms(1);
	LCD_WRITE_COMMAND(0X28);                     /* THIS IS FOR FUNCTION SET IN THE DATA SHEET  4BIT MODE, 2LINE, 5*7*/
     c30:	88 e2       	ldi	r24, 0x28	; 40
     c32:	0e 94 25 05 	call	0xa4a	; 0xa4a <LCD_WRITE_COMMAND>
     c36:	89 ef       	ldi	r24, 0xF9	; 249
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	f1 f7       	brne	.-4      	; 0xc3a <LCD_INIT+0x60>
     c3e:	00 c0       	rjmp	.+0      	; 0xc40 <LCD_INIT+0x66>
     c40:	00 00       	nop
	_delay_ms(1);
	LCD_WRITE_COMMAND(0x0c);                     /*SCREEN ON, CURSOR OFF*/
     c42:	8c e0       	ldi	r24, 0x0C	; 12
     c44:	0e 94 25 05 	call	0xa4a	; 0xa4a <LCD_WRITE_COMMAND>
     c48:	89 ef       	ldi	r24, 0xF9	; 249
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	f1 f7       	brne	.-4      	; 0xc4c <LCD_INIT+0x72>
     c50:	00 c0       	rjmp	.+0      	; 0xc52 <LCD_INIT+0x78>
     c52:	00 00       	nop
	_delay_ms(1);
	LCD_WRITE_COMMAND(0X01);                      /*CLEAR SCREEN*/
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	0e 94 25 05 	call	0xa4a	; 0xa4a <LCD_WRITE_COMMAND>
     c5a:	83 ef       	ldi	r24, 0xF3	; 243
     c5c:	91 e0       	ldi	r25, 0x01	; 1
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <LCD_INIT+0x84>
     c62:	00 c0       	rjmp	.+0      	; 0xc64 <LCD_INIT+0x8a>
     c64:	00 00       	nop
	_delay_ms(2);
	LCD_WRITE_COMMAND(0X06);
     c66:	86 e0       	ldi	r24, 0x06	; 6
     c68:	0e 94 25 05 	call	0xa4a	; 0xa4a <LCD_WRITE_COMMAND>
     c6c:	89 ef       	ldi	r24, 0xF9	; 249
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	f1 f7       	brne	.-4      	; 0xc70 <LCD_INIT+0x96>
     c74:	00 c0       	rjmp	.+0      	; 0xc76 <LCD_INIT+0x9c>
     c76:	00 00       	nop
     c78:	08 95       	ret

00000c7a <LCD_Write_String>:
********************************************************************************************************/
/**DESCRIPTION:-
  This Function Takes a Full String and Displays It
  **/
void LCD_Write_String(uint8_t*a_String)
{
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	8c 01       	movw	r16, r24
	uint8_t L_Index_i=0;
     c82:	c0 e0       	ldi	r28, 0x00	; 0
	while(a_String[L_Index_i])
     c84:	03 c0       	rjmp	.+6      	; 0xc8c <LCD_Write_String+0x12>
	{
		LCD_WRITE_DATA(a_String[L_Index_i]);
     c86:	0e 94 89 05 	call	0xb12	; 0xb12 <LCD_WRITE_DATA>
		L_Index_i++;
     c8a:	cf 5f       	subi	r28, 0xFF	; 255
  This Function Takes a Full String and Displays It
  **/
void LCD_Write_String(uint8_t*a_String)
{
	uint8_t L_Index_i=0;
	while(a_String[L_Index_i])
     c8c:	f8 01       	movw	r30, r16
     c8e:	ec 0f       	add	r30, r28
     c90:	f1 1d       	adc	r31, r1
     c92:	80 81       	ld	r24, Z
     c94:	81 11       	cpse	r24, r1
     c96:	f7 cf       	rjmp	.-18     	; 0xc86 <LCD_Write_String+0xc>
	{
		LCD_WRITE_DATA(a_String[L_Index_i]);
		L_Index_i++;
	}
}
     c98:	cf 91       	pop	r28
     c9a:	1f 91       	pop	r17
     c9c:	0f 91       	pop	r16
     c9e:	08 95       	ret

00000ca0 <LCD_Write_Number>:
/********************************************************************************************/
/**DESCRIPTION:-
  This Function Takes a Number and Displays IT
  **/
void LCD_Write_Number(uint32_t a_number)
{
     ca0:	cf 92       	push	r12
     ca2:	df 92       	push	r13
     ca4:	ef 92       	push	r14
     ca6:	ff 92       	push	r15
     ca8:	1f 93       	push	r17
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
     cb2:	60 97       	sbiw	r28, 0x10	; 16
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	f8 94       	cli
     cb8:	de bf       	out	0x3e, r29	; 62
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	cd bf       	out	0x3d, r28	; 61
     cbe:	6b 01       	movw	r12, r22
     cc0:	7c 01       	movw	r14, r24
	uint8_t L_Remainder=0,L_Arr[16],L_Index_i=0,L_Index_j;
	if (a_number==0)
     cc2:	67 2b       	or	r22, r23
     cc4:	68 2b       	or	r22, r24
     cc6:	69 2b       	or	r22, r25
     cc8:	19 f4       	brne	.+6      	; 0xcd0 <LCD_Write_Number+0x30>
	{
		LCD_WRITE_DATA('0');
     cca:	80 e3       	ldi	r24, 0x30	; 48
     ccc:	0e 94 89 05 	call	0xb12	; 0xb12 <LCD_WRITE_DATA>
/********************************************************************************************/
/**DESCRIPTION:-
  This Function Takes a Number and Displays IT
  **/
void LCD_Write_Number(uint32_t a_number)
{
     cd0:	10 e0       	ldi	r17, 0x00	; 0
     cd2:	15 c0       	rjmp	.+42     	; 0xcfe <LCD_Write_Number+0x5e>
	{
		LCD_WRITE_DATA('0');
	}
	while(a_number>0)
	{
	L_Remainder=a_number%10;
     cd4:	c7 01       	movw	r24, r14
     cd6:	b6 01       	movw	r22, r12
     cd8:	2a e0       	ldi	r18, 0x0A	; 10
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	40 e0       	ldi	r20, 0x00	; 0
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__udivmodsi4>
	L_Arr[L_Index_i]=L_Remainder+'0';    /*tp display the number it self, when we add the zero asci it shits the number to it's asci*/
     ce4:	e1 e0       	ldi	r30, 0x01	; 1
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	ec 0f       	add	r30, r28
     cea:	fd 1f       	adc	r31, r29
     cec:	e1 0f       	add	r30, r17
     cee:	f1 1d       	adc	r31, r1
     cf0:	60 5d       	subi	r22, 0xD0	; 208
     cf2:	60 83       	st	Z, r22
	L_Index_i++;
     cf4:	1f 5f       	subi	r17, 0xFF	; 255
	a_number/=10;
     cf6:	c2 2e       	mov	r12, r18
     cf8:	d3 2e       	mov	r13, r19
     cfa:	e4 2e       	mov	r14, r20
     cfc:	f5 2e       	mov	r15, r21
	uint8_t L_Remainder=0,L_Arr[16],L_Index_i=0,L_Index_j;
	if (a_number==0)
	{
		LCD_WRITE_DATA('0');
	}
	while(a_number>0)
     cfe:	c1 14       	cp	r12, r1
     d00:	d1 04       	cpc	r13, r1
     d02:	e1 04       	cpc	r14, r1
     d04:	f1 04       	cpc	r15, r1
     d06:	31 f7       	brne	.-52     	; 0xcd4 <LCD_Write_Number+0x34>
     d08:	0d c0       	rjmp	.+26     	; 0xd24 <LCD_Write_Number+0x84>
	a_number/=10;
	}
	
	for (L_Index_j=L_Index_i;L_Index_j>0;L_Index_j--)    /*to display the array of number */
	{
		LCD_WRITE_DATA(L_Arr[L_Index_j-1]);
     d0a:	e1 2f       	mov	r30, r17
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	31 97       	sbiw	r30, 0x01	; 1
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	8c 0f       	add	r24, r28
     d16:	9d 1f       	adc	r25, r29
     d18:	e8 0f       	add	r30, r24
     d1a:	f9 1f       	adc	r31, r25
     d1c:	80 81       	ld	r24, Z
     d1e:	0e 94 89 05 	call	0xb12	; 0xb12 <LCD_WRITE_DATA>
	L_Arr[L_Index_i]=L_Remainder+'0';    /*tp display the number it self, when we add the zero asci it shits the number to it's asci*/
	L_Index_i++;
	a_number/=10;
	}
	
	for (L_Index_j=L_Index_i;L_Index_j>0;L_Index_j--)    /*to display the array of number */
     d22:	11 50       	subi	r17, 0x01	; 1
     d24:	11 11       	cpse	r17, r1
     d26:	f1 cf       	rjmp	.-30     	; 0xd0a <LCD_Write_Number+0x6a>
	{
		LCD_WRITE_DATA(L_Arr[L_Index_j-1]);
	}
}
     d28:	60 96       	adiw	r28, 0x10	; 16
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	1f 91       	pop	r17
     d3a:	ff 90       	pop	r15
     d3c:	ef 90       	pop	r14
     d3e:	df 90       	pop	r13
     d40:	cf 90       	pop	r12
     d42:	08 95       	ret

00000d44 <LCD_Clear>:
/**DESCRIPTION:-
  This Function Clears The LCD
  **/
void LCD_Clear(void)
{
	LCD_WRITE_COMMAND(0x01);
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	0e 94 25 05 	call	0xa4a	; 0xa4a <LCD_WRITE_COMMAND>
     d4a:	08 95       	ret

00000d4c <LCD_GoTo>:
  This Function Takes a Specific Line and a Cell On The LCD and Displays the Data In That Location
  **/
void LCD_GoTo(uint8_t a_line,uint8_t a_cell)
{
//0x80 this is from data sheet to write an address on the DDRAM"screen"*/
	if (a_line==1)
     d4c:	81 30       	cpi	r24, 0x01	; 1
     d4e:	29 f4       	brne	.+10     	; 0xd5a <LCD_GoTo+0xe>
	{
		LCD_WRITE_COMMAND(0x80+a_cell);    /*0x80 means we ant to write an address and a_cell is the address we want*/
     d50:	80 e8       	ldi	r24, 0x80	; 128
     d52:	86 0f       	add	r24, r22
     d54:	0e 94 25 05 	call	0xa4a	; 0xa4a <LCD_WRITE_COMMAND>
     d58:	08 95       	ret
	}
	else if (a_line==2)
     d5a:	82 30       	cpi	r24, 0x02	; 2
     d5c:	21 f4       	brne	.+8      	; 0xd66 <LCD_GoTo+0x1a>
	{
		LCD_WRITE_COMMAND(0x80+0x40+a_cell);  /*0x40 to start from cell 0 at line 2 from the data sheet*/	
     d5e:	80 ec       	ldi	r24, 0xC0	; 192
     d60:	86 0f       	add	r24, r22
     d62:	0e 94 25 05 	call	0xa4a	; 0xa4a <LCD_WRITE_COMMAND>
     d66:	08 95       	ret

00000d68 <LCD_Write_Charecter>:
/**DESCRIPTION:-
  This Function Is Used To Display Any Character And It also used To Display the Shapes Saved In The CGRAM
  **/
void LCD_Write_Charecter(uint8_t a_char)
{
	LCD_WRITE_DATA(a_char);
     d68:	0e 94 89 05 	call	0xb12	; 0xb12 <LCD_WRITE_DATA>
     d6c:	08 95       	ret

00000d6e <LCD_Create_Charecter>:
/*****************************************************************************************/
/**DESCRIPTION
   This Function Is Used To Store New Charecter in The CGRAM Of The LCD
   **/
void LCD_Create_Charecter(uint8_t*a_Pattern,uint8_t a_Adress)
{
     d6e:	0f 93       	push	r16
     d70:	1f 93       	push	r17
     d72:	cf 93       	push	r28
     d74:	8c 01       	movw	r16, r24
	uint8_t Index_I;
	LCD_WRITE_COMMAND(0x40+a_Adress*8);   //we multiply it by 8 to make it block addressable //
     d76:	86 2f       	mov	r24, r22
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	08 96       	adiw	r24, 0x08	; 8
     d7c:	88 0f       	add	r24, r24
     d7e:	88 0f       	add	r24, r24
     d80:	88 0f       	add	r24, r24
     d82:	0e 94 25 05 	call	0xa4a	; 0xa4a <LCD_WRITE_COMMAND>
	
	for (Index_I=0;Index_I<8;Index_I++)
     d86:	c0 e0       	ldi	r28, 0x00	; 0
     d88:	07 c0       	rjmp	.+14     	; 0xd98 <LCD_Create_Charecter+0x2a>
	{
		LCD_WRITE_DATA(a_Pattern[Index_I]);
     d8a:	f8 01       	movw	r30, r16
     d8c:	ec 0f       	add	r30, r28
     d8e:	f1 1d       	adc	r31, r1
     d90:	80 81       	ld	r24, Z
     d92:	0e 94 89 05 	call	0xb12	; 0xb12 <LCD_WRITE_DATA>
void LCD_Create_Charecter(uint8_t*a_Pattern,uint8_t a_Adress)
{
	uint8_t Index_I;
	LCD_WRITE_COMMAND(0x40+a_Adress*8);   //we multiply it by 8 to make it block addressable //
	
	for (Index_I=0;Index_I<8;Index_I++)
     d96:	cf 5f       	subi	r28, 0xFF	; 255
     d98:	c8 30       	cpi	r28, 0x08	; 8
     d9a:	b8 f3       	brcs	.-18     	; 0xd8a <LCD_Create_Charecter+0x1c>
	{
		LCD_WRITE_DATA(a_Pattern[Index_I]);
	}
	
}
     d9c:	cf 91       	pop	r28
     d9e:	1f 91       	pop	r17
     da0:	0f 91       	pop	r16
     da2:	08 95       	ret

00000da4 <main>:

#include "APP/APP.h"

int main(void)
{
 app_Init();
     da4:	0e 94 79 00 	call	0xf2	; 0xf2 <app_Init>
   while (1)
   {
	
		
	app_Start();
     da8:	0e 94 b0 03 	call	0x760	; 0x760 <app_Start>
     dac:	fd cf       	rjmp	.-6      	; 0xda8 <main+0x4>

00000dae <DIO_INITPIN>:
   */
DIO_ERROR_TYPE DIO_INITPIN(DIO_PIN_TYPE PIN,DIO_PINSTATUS_TYPE STATUS)
{
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;                                  //to determine which port i'm using
     dae:	98 2f       	mov	r25, r24
     db0:	96 95       	lsr	r25
     db2:	96 95       	lsr	r25
     db4:	96 95       	lsr	r25
	PIN_NUM=PIN%8;                               //to determine which pin in the port i'm using 
     db6:	87 70       	andi	r24, 0x07	; 7
	DIO_ERROR_TYPE error=VALID_DIO;
	if(PORT>4)
     db8:	95 30       	cpi	r25, 0x05	; 5
     dba:	08 f0       	brcs	.+2      	; 0xdbe <DIO_INITPIN+0x10>
     dbc:	f8 c0       	rjmp	.+496    	; 0xfae <DIO_INITPIN+0x200>
	{
		return INVALID_PIN_NUMBER;
	}
	else
	 {
	switch(STATUS)
     dbe:	61 30       	cpi	r22, 0x01	; 1
     dc0:	31 f0       	breq	.+12     	; 0xdce <DIO_INITPIN+0x20>
     dc2:	08 f4       	brcc	.+2      	; 0xdc6 <DIO_INITPIN+0x18>
     dc4:	a4 c0       	rjmp	.+328    	; 0xf0e <DIO_INITPIN+0x160>
     dc6:	62 30       	cpi	r22, 0x02	; 2
     dc8:	09 f4       	brne	.+2      	; 0xdcc <DIO_INITPIN+0x1e>
     dca:	51 c0       	rjmp	.+162    	; 0xe6e <DIO_INITPIN+0xc0>
     dcc:	ef c0       	rjmp	.+478    	; 0xfac <DIO_INITPIN+0x1fe>
	{
		case INFREE:
		switch(PORT)
     dce:	91 30       	cpi	r25, 0x01	; 1
     dd0:	c1 f0       	breq	.+48     	; 0xe02 <DIO_INITPIN+0x54>
     dd2:	28 f0       	brcs	.+10     	; 0xdde <DIO_INITPIN+0x30>
     dd4:	92 30       	cpi	r25, 0x02	; 2
     dd6:	39 f1       	breq	.+78     	; 0xe26 <DIO_INITPIN+0x78>
     dd8:	93 30       	cpi	r25, 0x03	; 3
     dda:	b9 f1       	breq	.+110    	; 0xe4a <DIO_INITPIN+0x9c>
     ddc:	e7 c0       	rjmp	.+462    	; 0xfac <DIO_INITPIN+0x1fe>
		{
			case PA:
			clear_bit(DDRA,PIN_NUM);
     dde:	4a b3       	in	r20, 0x1a	; 26
     de0:	21 e0       	ldi	r18, 0x01	; 1
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	b9 01       	movw	r22, r18
     de6:	02 c0       	rjmp	.+4      	; 0xdec <DIO_INITPIN+0x3e>
     de8:	66 0f       	add	r22, r22
     dea:	77 1f       	adc	r23, r23
     dec:	8a 95       	dec	r24
     dee:	e2 f7       	brpl	.-8      	; 0xde8 <DIO_INITPIN+0x3a>
     df0:	cb 01       	movw	r24, r22
     df2:	80 95       	com	r24
     df4:	94 2f       	mov	r25, r20
     df6:	98 23       	and	r25, r24
     df8:	9a bb       	out	0x1a, r25	; 26
			clear_bit(PORTA,PIN_NUM);       /*to make sure that the port register  is cleared in case of reuse*/
     dfa:	9b b3       	in	r25, 0x1b	; 27
     dfc:	89 23       	and	r24, r25
     dfe:	8b bb       	out	0x1b, r24	; 27
			break;
     e00:	d5 c0       	rjmp	.+426    	; 0xfac <DIO_INITPIN+0x1fe>
			case PB:
			clear_bit(DDRB,PIN_NUM);
     e02:	47 b3       	in	r20, 0x17	; 23
     e04:	21 e0       	ldi	r18, 0x01	; 1
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	b9 01       	movw	r22, r18
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <DIO_INITPIN+0x62>
     e0c:	66 0f       	add	r22, r22
     e0e:	77 1f       	adc	r23, r23
     e10:	8a 95       	dec	r24
     e12:	e2 f7       	brpl	.-8      	; 0xe0c <DIO_INITPIN+0x5e>
     e14:	cb 01       	movw	r24, r22
     e16:	80 95       	com	r24
     e18:	94 2f       	mov	r25, r20
     e1a:	98 23       	and	r25, r24
     e1c:	97 bb       	out	0x17, r25	; 23
			clear_bit(PORTB,PIN_NUM);
     e1e:	98 b3       	in	r25, 0x18	; 24
     e20:	89 23       	and	r24, r25
     e22:	88 bb       	out	0x18, r24	; 24
			break;
     e24:	c3 c0       	rjmp	.+390    	; 0xfac <DIO_INITPIN+0x1fe>

			case PC:
			clear_bit(DDRC,PIN_NUM);
     e26:	44 b3       	in	r20, 0x14	; 20
     e28:	21 e0       	ldi	r18, 0x01	; 1
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	b9 01       	movw	r22, r18
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <DIO_INITPIN+0x86>
     e30:	66 0f       	add	r22, r22
     e32:	77 1f       	adc	r23, r23
     e34:	8a 95       	dec	r24
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <DIO_INITPIN+0x82>
     e38:	cb 01       	movw	r24, r22
     e3a:	80 95       	com	r24
     e3c:	94 2f       	mov	r25, r20
     e3e:	98 23       	and	r25, r24
     e40:	94 bb       	out	0x14, r25	; 20
			clear_bit(PORTC,PIN_NUM);
     e42:	95 b3       	in	r25, 0x15	; 21
     e44:	89 23       	and	r24, r25
     e46:	85 bb       	out	0x15, r24	; 21
			break;
     e48:	b1 c0       	rjmp	.+354    	; 0xfac <DIO_INITPIN+0x1fe>

			case PD:
			clear_bit(DDRD,PIN_NUM);
     e4a:	41 b3       	in	r20, 0x11	; 17
     e4c:	21 e0       	ldi	r18, 0x01	; 1
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	b9 01       	movw	r22, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <DIO_INITPIN+0xaa>
     e54:	66 0f       	add	r22, r22
     e56:	77 1f       	adc	r23, r23
     e58:	8a 95       	dec	r24
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <DIO_INITPIN+0xa6>
     e5c:	cb 01       	movw	r24, r22
     e5e:	80 95       	com	r24
     e60:	94 2f       	mov	r25, r20
     e62:	98 23       	and	r25, r24
     e64:	91 bb       	out	0x11, r25	; 17
			clear_bit(PORTD,PIN_NUM);
     e66:	92 b3       	in	r25, 0x12	; 18
     e68:	89 23       	and	r24, r25
     e6a:	82 bb       	out	0x12, r24	; 18
			break;
     e6c:	9f c0       	rjmp	.+318    	; 0xfac <DIO_INITPIN+0x1fe>
		}
		break;
		
		case INPLUP:
		switch(PORT)
     e6e:	91 30       	cpi	r25, 0x01	; 1
     e70:	c1 f0       	breq	.+48     	; 0xea2 <DIO_INITPIN+0xf4>
     e72:	28 f0       	brcs	.+10     	; 0xe7e <DIO_INITPIN+0xd0>
     e74:	92 30       	cpi	r25, 0x02	; 2
     e76:	39 f1       	breq	.+78     	; 0xec6 <DIO_INITPIN+0x118>
     e78:	93 30       	cpi	r25, 0x03	; 3
     e7a:	b9 f1       	breq	.+110    	; 0xeea <DIO_INITPIN+0x13c>
     e7c:	97 c0       	rjmp	.+302    	; 0xfac <DIO_INITPIN+0x1fe>
		{
			case PA:
			clear_bit(DDRA,PIN_NUM);
     e7e:	4a b3       	in	r20, 0x1a	; 26
     e80:	21 e0       	ldi	r18, 0x01	; 1
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	b9 01       	movw	r22, r18
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <DIO_INITPIN+0xde>
     e88:	66 0f       	add	r22, r22
     e8a:	77 1f       	adc	r23, r23
     e8c:	8a 95       	dec	r24
     e8e:	e2 f7       	brpl	.-8      	; 0xe88 <DIO_INITPIN+0xda>
     e90:	cb 01       	movw	r24, r22
     e92:	96 2f       	mov	r25, r22
     e94:	90 95       	com	r25
     e96:	94 23       	and	r25, r20
     e98:	9a bb       	out	0x1a, r25	; 26
			set_bit(PORTA,PIN_NUM);
     e9a:	9b b3       	in	r25, 0x1b	; 27
     e9c:	89 2b       	or	r24, r25
     e9e:	8b bb       	out	0x1b, r24	; 27
			break;
     ea0:	85 c0       	rjmp	.+266    	; 0xfac <DIO_INITPIN+0x1fe>
			
			case PB:
			clear_bit(DDRB,PIN_NUM);
     ea2:	47 b3       	in	r20, 0x17	; 23
     ea4:	21 e0       	ldi	r18, 0x01	; 1
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	b9 01       	movw	r22, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <DIO_INITPIN+0x102>
     eac:	66 0f       	add	r22, r22
     eae:	77 1f       	adc	r23, r23
     eb0:	8a 95       	dec	r24
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <DIO_INITPIN+0xfe>
     eb4:	cb 01       	movw	r24, r22
     eb6:	96 2f       	mov	r25, r22
     eb8:	90 95       	com	r25
     eba:	94 23       	and	r25, r20
     ebc:	97 bb       	out	0x17, r25	; 23
			set_bit(PORTB,PIN_NUM);
     ebe:	98 b3       	in	r25, 0x18	; 24
     ec0:	89 2b       	or	r24, r25
     ec2:	88 bb       	out	0x18, r24	; 24
			break;
     ec4:	73 c0       	rjmp	.+230    	; 0xfac <DIO_INITPIN+0x1fe>

			case PC:
			clear_bit(DDRC,PIN_NUM);
     ec6:	44 b3       	in	r20, 0x14	; 20
     ec8:	21 e0       	ldi	r18, 0x01	; 1
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	b9 01       	movw	r22, r18
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <DIO_INITPIN+0x126>
     ed0:	66 0f       	add	r22, r22
     ed2:	77 1f       	adc	r23, r23
     ed4:	8a 95       	dec	r24
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <DIO_INITPIN+0x122>
     ed8:	cb 01       	movw	r24, r22
     eda:	96 2f       	mov	r25, r22
     edc:	90 95       	com	r25
     ede:	94 23       	and	r25, r20
     ee0:	94 bb       	out	0x14, r25	; 20
			set_bit(PORTC,PIN_NUM);
     ee2:	95 b3       	in	r25, 0x15	; 21
     ee4:	89 2b       	or	r24, r25
     ee6:	85 bb       	out	0x15, r24	; 21
			break;
     ee8:	61 c0       	rjmp	.+194    	; 0xfac <DIO_INITPIN+0x1fe>

			case PD:
			clear_bit(DDRD,PIN_NUM);
     eea:	41 b3       	in	r20, 0x11	; 17
     eec:	21 e0       	ldi	r18, 0x01	; 1
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	b9 01       	movw	r22, r18
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <DIO_INITPIN+0x14a>
     ef4:	66 0f       	add	r22, r22
     ef6:	77 1f       	adc	r23, r23
     ef8:	8a 95       	dec	r24
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <DIO_INITPIN+0x146>
     efc:	cb 01       	movw	r24, r22
     efe:	96 2f       	mov	r25, r22
     f00:	90 95       	com	r25
     f02:	94 23       	and	r25, r20
     f04:	91 bb       	out	0x11, r25	; 17
			set_bit(PORTD,PIN_NUM);
     f06:	92 b3       	in	r25, 0x12	; 18
     f08:	89 2b       	or	r24, r25
     f0a:	82 bb       	out	0x12, r24	; 18
			break;
     f0c:	4f c0       	rjmp	.+158    	; 0xfac <DIO_INITPIN+0x1fe>
		}
		break;
		return VALID_DIO;
		
		case OUTPUT:
		switch(PORT)
     f0e:	91 30       	cpi	r25, 0x01	; 1
     f10:	c1 f0       	breq	.+48     	; 0xf42 <DIO_INITPIN+0x194>
     f12:	28 f0       	brcs	.+10     	; 0xf1e <DIO_INITPIN+0x170>
     f14:	92 30       	cpi	r25, 0x02	; 2
     f16:	39 f1       	breq	.+78     	; 0xf66 <DIO_INITPIN+0x1b8>
     f18:	93 30       	cpi	r25, 0x03	; 3
     f1a:	b9 f1       	breq	.+110    	; 0xf8a <DIO_INITPIN+0x1dc>
     f1c:	47 c0       	rjmp	.+142    	; 0xfac <DIO_INITPIN+0x1fe>
		{
			case PA:
			clear_bit(PORTA,PIN_NUM);
     f1e:	4b b3       	in	r20, 0x1b	; 27
     f20:	21 e0       	ldi	r18, 0x01	; 1
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	b9 01       	movw	r22, r18
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_INITPIN+0x17e>
     f28:	66 0f       	add	r22, r22
     f2a:	77 1f       	adc	r23, r23
     f2c:	8a 95       	dec	r24
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <DIO_INITPIN+0x17a>
     f30:	cb 01       	movw	r24, r22
     f32:	96 2f       	mov	r25, r22
     f34:	90 95       	com	r25
     f36:	94 23       	and	r25, r20
     f38:	9b bb       	out	0x1b, r25	; 27
			set_bit(DDRA,PIN_NUM);
     f3a:	9a b3       	in	r25, 0x1a	; 26
     f3c:	89 2b       	or	r24, r25
     f3e:	8a bb       	out	0x1a, r24	; 26
			break;
     f40:	35 c0       	rjmp	.+106    	; 0xfac <DIO_INITPIN+0x1fe>
			
			case PB:
			clear_bit(PORTB,PIN_NUM);
     f42:	48 b3       	in	r20, 0x18	; 24
     f44:	21 e0       	ldi	r18, 0x01	; 1
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	b9 01       	movw	r22, r18
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <DIO_INITPIN+0x1a2>
     f4c:	66 0f       	add	r22, r22
     f4e:	77 1f       	adc	r23, r23
     f50:	8a 95       	dec	r24
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <DIO_INITPIN+0x19e>
     f54:	cb 01       	movw	r24, r22
     f56:	96 2f       	mov	r25, r22
     f58:	90 95       	com	r25
     f5a:	94 23       	and	r25, r20
     f5c:	98 bb       	out	0x18, r25	; 24
			set_bit(DDRB,PIN_NUM);
     f5e:	97 b3       	in	r25, 0x17	; 23
     f60:	89 2b       	or	r24, r25
     f62:	87 bb       	out	0x17, r24	; 23
			break;
     f64:	23 c0       	rjmp	.+70     	; 0xfac <DIO_INITPIN+0x1fe>

			case PC:
			clear_bit(PORTC,PIN_NUM);
     f66:	45 b3       	in	r20, 0x15	; 21
     f68:	21 e0       	ldi	r18, 0x01	; 1
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	b9 01       	movw	r22, r18
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <DIO_INITPIN+0x1c6>
     f70:	66 0f       	add	r22, r22
     f72:	77 1f       	adc	r23, r23
     f74:	8a 95       	dec	r24
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <DIO_INITPIN+0x1c2>
     f78:	cb 01       	movw	r24, r22
     f7a:	96 2f       	mov	r25, r22
     f7c:	90 95       	com	r25
     f7e:	94 23       	and	r25, r20
     f80:	95 bb       	out	0x15, r25	; 21
			set_bit(DDRC,PIN_NUM);
     f82:	94 b3       	in	r25, 0x14	; 20
     f84:	89 2b       	or	r24, r25
     f86:	84 bb       	out	0x14, r24	; 20
			break;
     f88:	11 c0       	rjmp	.+34     	; 0xfac <DIO_INITPIN+0x1fe>

			case PD:
			clear_bit(PORTD,PIN_NUM);
     f8a:	42 b3       	in	r20, 0x12	; 18
     f8c:	21 e0       	ldi	r18, 0x01	; 1
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	b9 01       	movw	r22, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <DIO_INITPIN+0x1ea>
     f94:	66 0f       	add	r22, r22
     f96:	77 1f       	adc	r23, r23
     f98:	8a 95       	dec	r24
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <DIO_INITPIN+0x1e6>
     f9c:	cb 01       	movw	r24, r22
     f9e:	96 2f       	mov	r25, r22
     fa0:	90 95       	com	r25
     fa2:	94 23       	and	r25, r20
     fa4:	92 bb       	out	0x12, r25	; 18
			set_bit(DDRD,PIN_NUM);
     fa6:	91 b3       	in	r25, 0x11	; 17
     fa8:	89 2b       	or	r24, r25
     faa:	81 bb       	out	0x11, r24	; 17
		break;
		return VALID_DIO;

	}
		}
}
     fac:	08 95       	ret
     fae:	82 e0       	ldi	r24, 0x02	; 2
     fb0:	08 95       	ret

00000fb2 <DIO_WRITEPIN>:
DIO_ERROR_TYPE DIO_WRITEPIN(DIO_PIN_TYPE PIN,DIO_VOLTAGE_TYPE VOLTAGE)
{
	
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
     fb2:	98 2f       	mov	r25, r24
     fb4:	96 95       	lsr	r25
     fb6:	96 95       	lsr	r25
     fb8:	96 95       	lsr	r25
	PIN_NUM=PIN%8;
     fba:	87 70       	andi	r24, 0x07	; 7
	if(PORT>4)
     fbc:	95 30       	cpi	r25, 0x05	; 5
     fbe:	08 f0       	brcs	.+2      	; 0xfc2 <DIO_WRITEPIN+0x10>
     fc0:	8d c0       	rjmp	.+282    	; 0x10dc <DIO_WRITEPIN+0x12a>
	}
	else if(PIN_NUM>32)
	{
		return INVALID_PIN_NUMBER;
	}
	else if(VOLTAGE>2)
     fc2:	63 30       	cpi	r22, 0x03	; 3
     fc4:	08 f0       	brcs	.+2      	; 0xfc8 <DIO_WRITEPIN+0x16>
     fc6:	8c c0       	rjmp	.+280    	; 0x10e0 <DIO_WRITEPIN+0x12e>
		return INVALID_VOLTAGE;
	}
	else 
	{
	
	if(VOLTAGE==HIGH)
     fc8:	61 30       	cpi	r22, 0x01	; 1
     fca:	09 f0       	breq	.+2      	; 0xfce <DIO_WRITEPIN+0x1c>
     fcc:	40 c0       	rjmp	.+128    	; 0x104e <DIO_WRITEPIN+0x9c>
	{
		switch(PORT)
     fce:	91 30       	cpi	r25, 0x01	; 1
     fd0:	a1 f0       	breq	.+40     	; 0xffa <DIO_WRITEPIN+0x48>
     fd2:	28 f0       	brcs	.+10     	; 0xfde <DIO_WRITEPIN+0x2c>
     fd4:	92 30       	cpi	r25, 0x02	; 2
     fd6:	f9 f0       	breq	.+62     	; 0x1016 <DIO_WRITEPIN+0x64>
     fd8:	93 30       	cpi	r25, 0x03	; 3
     fda:	59 f1       	breq	.+86     	; 0x1032 <DIO_WRITEPIN+0x80>
     fdc:	83 c0       	rjmp	.+262    	; 0x10e4 <DIO_WRITEPIN+0x132>
		{
			case PA:
			set_bit(PORTA,PIN_NUM);
     fde:	4b b3       	in	r20, 0x1b	; 27
     fe0:	21 e0       	ldi	r18, 0x01	; 1
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	b9 01       	movw	r22, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <DIO_WRITEPIN+0x3a>
     fe8:	66 0f       	add	r22, r22
     fea:	77 1f       	adc	r23, r23
     fec:	8a 95       	dec	r24
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <DIO_WRITEPIN+0x36>
     ff0:	cb 01       	movw	r24, r22
     ff2:	84 2b       	or	r24, r20
     ff4:	8b bb       	out	0x1b, r24	; 27
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
     ff6:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PORT)
		{
			case PA:
			set_bit(PORTA,PIN_NUM);
			break;
     ff8:	08 95       	ret
			case PB:
			set_bit(PORTB,PIN_NUM);
     ffa:	48 b3       	in	r20, 0x18	; 24
     ffc:	21 e0       	ldi	r18, 0x01	; 1
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	b9 01       	movw	r22, r18
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <DIO_WRITEPIN+0x56>
    1004:	66 0f       	add	r22, r22
    1006:	77 1f       	adc	r23, r23
    1008:	8a 95       	dec	r24
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <DIO_WRITEPIN+0x52>
    100c:	cb 01       	movw	r24, r22
    100e:	84 2b       	or	r24, r20
    1010:	88 bb       	out	0x18, r24	; 24
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
    1012:	80 e0       	ldi	r24, 0x00	; 0
			case PA:
			set_bit(PORTA,PIN_NUM);
			break;
			case PB:
			set_bit(PORTB,PIN_NUM);
			break;
    1014:	08 95       	ret
			case PC:
			set_bit(PORTC,PIN_NUM);
    1016:	45 b3       	in	r20, 0x15	; 21
    1018:	21 e0       	ldi	r18, 0x01	; 1
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	b9 01       	movw	r22, r18
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <DIO_WRITEPIN+0x72>
    1020:	66 0f       	add	r22, r22
    1022:	77 1f       	adc	r23, r23
    1024:	8a 95       	dec	r24
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <DIO_WRITEPIN+0x6e>
    1028:	cb 01       	movw	r24, r22
    102a:	84 2b       	or	r24, r20
    102c:	85 bb       	out	0x15, r24	; 21
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
    102e:	80 e0       	ldi	r24, 0x00	; 0
			case PB:
			set_bit(PORTB,PIN_NUM);
			break;
			case PC:
			set_bit(PORTC,PIN_NUM);
			break;
    1030:	08 95       	ret
			case PD:
			set_bit(PORTD,PIN_NUM);
    1032:	42 b3       	in	r20, 0x12	; 18
    1034:	21 e0       	ldi	r18, 0x01	; 1
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	b9 01       	movw	r22, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <DIO_WRITEPIN+0x8e>
    103c:	66 0f       	add	r22, r22
    103e:	77 1f       	adc	r23, r23
    1040:	8a 95       	dec	r24
    1042:	e2 f7       	brpl	.-8      	; 0x103c <DIO_WRITEPIN+0x8a>
    1044:	cb 01       	movw	r24, r22
    1046:	84 2b       	or	r24, r20
    1048:	82 bb       	out	0x12, r24	; 18
			break;

		}
		return VALID_DIO;
    104a:	80 e0       	ldi	r24, 0x00	; 0
			case PC:
			set_bit(PORTC,PIN_NUM);
			break;
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;
    104c:	08 95       	ret
		}
		return VALID_DIO;
	}


	else if(VOLTAGE==LOW)
    104e:	61 11       	cpse	r22, r1
    1050:	44 c0       	rjmp	.+136    	; 0x10da <DIO_WRITEPIN+0x128>
	{
		switch(PORT)
    1052:	91 30       	cpi	r25, 0x01	; 1
    1054:	a9 f0       	breq	.+42     	; 0x1080 <DIO_WRITEPIN+0xce>
    1056:	28 f0       	brcs	.+10     	; 0x1062 <DIO_WRITEPIN+0xb0>
    1058:	92 30       	cpi	r25, 0x02	; 2
    105a:	09 f1       	breq	.+66     	; 0x109e <DIO_WRITEPIN+0xec>
    105c:	93 30       	cpi	r25, 0x03	; 3
    105e:	71 f1       	breq	.+92     	; 0x10bc <DIO_WRITEPIN+0x10a>
    1060:	43 c0       	rjmp	.+134    	; 0x10e8 <DIO_WRITEPIN+0x136>
		{
			case PA:
			clear_bit(PORTA,PIN_NUM);
    1062:	4b b3       	in	r20, 0x1b	; 27
    1064:	21 e0       	ldi	r18, 0x01	; 1
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	b9 01       	movw	r22, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <DIO_WRITEPIN+0xbe>
    106c:	66 0f       	add	r22, r22
    106e:	77 1f       	adc	r23, r23
    1070:	8a 95       	dec	r24
    1072:	e2 f7       	brpl	.-8      	; 0x106c <DIO_WRITEPIN+0xba>
    1074:	cb 01       	movw	r24, r22
    1076:	80 95       	com	r24
    1078:	84 23       	and	r24, r20
    107a:	8b bb       	out	0x1b, r24	; 27
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
    107c:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PORT)
		{
			case PA:
			clear_bit(PORTA,PIN_NUM);
			break;
    107e:	08 95       	ret
			case PB:
			clear_bit(PORTB,PIN_NUM);
    1080:	48 b3       	in	r20, 0x18	; 24
    1082:	21 e0       	ldi	r18, 0x01	; 1
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	b9 01       	movw	r22, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <DIO_WRITEPIN+0xdc>
    108a:	66 0f       	add	r22, r22
    108c:	77 1f       	adc	r23, r23
    108e:	8a 95       	dec	r24
    1090:	e2 f7       	brpl	.-8      	; 0x108a <DIO_WRITEPIN+0xd8>
    1092:	cb 01       	movw	r24, r22
    1094:	80 95       	com	r24
    1096:	84 23       	and	r24, r20
    1098:	88 bb       	out	0x18, r24	; 24
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
    109a:	80 e0       	ldi	r24, 0x00	; 0
			case PA:
			clear_bit(PORTA,PIN_NUM);
			break;
			case PB:
			clear_bit(PORTB,PIN_NUM);
			break;
    109c:	08 95       	ret
			case PC:
			clear_bit(PORTC,PIN_NUM);
    109e:	45 b3       	in	r20, 0x15	; 21
    10a0:	21 e0       	ldi	r18, 0x01	; 1
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	b9 01       	movw	r22, r18
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <DIO_WRITEPIN+0xfa>
    10a8:	66 0f       	add	r22, r22
    10aa:	77 1f       	adc	r23, r23
    10ac:	8a 95       	dec	r24
    10ae:	e2 f7       	brpl	.-8      	; 0x10a8 <DIO_WRITEPIN+0xf6>
    10b0:	cb 01       	movw	r24, r22
    10b2:	80 95       	com	r24
    10b4:	84 23       	and	r24, r20
    10b6:	85 bb       	out	0x15, r24	; 21
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
    10b8:	80 e0       	ldi	r24, 0x00	; 0
			case PB:
			clear_bit(PORTB,PIN_NUM);
			break;
			case PC:
			clear_bit(PORTC,PIN_NUM);
			break;
    10ba:	08 95       	ret
			case PD:
			clear_bit(PORTD,PIN_NUM);
    10bc:	42 b3       	in	r20, 0x12	; 18
    10be:	21 e0       	ldi	r18, 0x01	; 1
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	b9 01       	movw	r22, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <DIO_WRITEPIN+0x118>
    10c6:	66 0f       	add	r22, r22
    10c8:	77 1f       	adc	r23, r23
    10ca:	8a 95       	dec	r24
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <DIO_WRITEPIN+0x114>
    10ce:	cb 01       	movw	r24, r22
    10d0:	80 95       	com	r24
    10d2:	84 23       	and	r24, r20
    10d4:	82 bb       	out	0x12, r24	; 18
			break;

		}
		return VALID_DIO;
    10d6:	80 e0       	ldi	r24, 0x00	; 0
			case PC:
			clear_bit(PORTC,PIN_NUM);
			break;
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;
    10d8:	08 95       	ret

		}
		return VALID_DIO;
	}
}
}
    10da:	08 95       	ret
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
	if(PORT>4)
	{
		return INVALID_PORT;
    10dc:	82 e0       	ldi	r24, 0x02	; 2
    10de:	08 95       	ret
	{
		return INVALID_PIN_NUMBER;
	}
	else if(VOLTAGE>2)
	{
		return INVALID_VOLTAGE;
    10e0:	83 e0       	ldi	r24, 0x03	; 3
    10e2:	08 95       	ret
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	08 95       	ret
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
    10e8:	80 e0       	ldi	r24, 0x00	; 0
	}
}
}
    10ea:	08 95       	ret

000010ec <DIO_READPIN>:
*/
DIO_ERROR_TYPE DIO_READPIN(DIO_PIN_TYPE PIN,DIO_VOLTAGE_TYPE* VOLT)
{
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
    10ec:	98 2f       	mov	r25, r24
    10ee:	96 95       	lsr	r25
    10f0:	96 95       	lsr	r25
    10f2:	96 95       	lsr	r25
	PIN_NUM=PIN%8;
    10f4:	87 70       	andi	r24, 0x07	; 7
	if(PORT>4)
    10f6:	95 30       	cpi	r25, 0x05	; 5
    10f8:	08 f0       	brcs	.+2      	; 0x10fc <DIO_READPIN+0x10>
    10fa:	40 c0       	rjmp	.+128    	; 0x117c <DIO_READPIN+0x90>
		return INVALID_PIN_NUMBER;
	}
	else
	{
	
	switch(PORT)
    10fc:	91 30       	cpi	r25, 0x01	; 1
    10fe:	a1 f0       	breq	.+40     	; 0x1128 <DIO_READPIN+0x3c>
    1100:	28 f0       	brcs	.+10     	; 0x110c <DIO_READPIN+0x20>
    1102:	92 30       	cpi	r25, 0x02	; 2
    1104:	f9 f0       	breq	.+62     	; 0x1144 <DIO_READPIN+0x58>
    1106:	93 30       	cpi	r25, 0x03	; 3
    1108:	59 f1       	breq	.+86     	; 0x1160 <DIO_READPIN+0x74>
    110a:	3a c0       	rjmp	.+116    	; 0x1180 <DIO_READPIN+0x94>
	{
		case PA:
		*VOLT=read_bit(PINA,PIN_NUM);
    110c:	29 b3       	in	r18, 0x19	; 25
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	a9 01       	movw	r20, r18
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <DIO_READPIN+0x2c>
    1114:	55 95       	asr	r21
    1116:	47 95       	ror	r20
    1118:	8a 95       	dec	r24
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <DIO_READPIN+0x28>
    111c:	ca 01       	movw	r24, r20
    111e:	81 70       	andi	r24, 0x01	; 1
    1120:	fb 01       	movw	r30, r22
    1122:	80 83       	st	Z, r24
		break;
		case PD:
		*VOLT=read_bit(PIND,PIN_NUM);
		break;
	}
	return VALID_DIO;
    1124:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(PORT)
	{
		case PA:
		*VOLT=read_bit(PINA,PIN_NUM);
		break;
    1126:	08 95       	ret
		case PB:
		*VOLT=read_bit(PINB,PIN_NUM);
    1128:	26 b3       	in	r18, 0x16	; 22
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	a9 01       	movw	r20, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <DIO_READPIN+0x48>
    1130:	55 95       	asr	r21
    1132:	47 95       	ror	r20
    1134:	8a 95       	dec	r24
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <DIO_READPIN+0x44>
    1138:	ca 01       	movw	r24, r20
    113a:	81 70       	andi	r24, 0x01	; 1
    113c:	fb 01       	movw	r30, r22
    113e:	80 83       	st	Z, r24
		break;
		case PD:
		*VOLT=read_bit(PIND,PIN_NUM);
		break;
	}
	return VALID_DIO;
    1140:	80 e0       	ldi	r24, 0x00	; 0
		case PA:
		*VOLT=read_bit(PINA,PIN_NUM);
		break;
		case PB:
		*VOLT=read_bit(PINB,PIN_NUM);
		break;
    1142:	08 95       	ret
		case PC:
		*VOLT=read_bit(PINC,PIN_NUM);
    1144:	23 b3       	in	r18, 0x13	; 19
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	a9 01       	movw	r20, r18
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <DIO_READPIN+0x64>
    114c:	55 95       	asr	r21
    114e:	47 95       	ror	r20
    1150:	8a 95       	dec	r24
    1152:	e2 f7       	brpl	.-8      	; 0x114c <DIO_READPIN+0x60>
    1154:	ca 01       	movw	r24, r20
    1156:	81 70       	andi	r24, 0x01	; 1
    1158:	fb 01       	movw	r30, r22
    115a:	80 83       	st	Z, r24
		break;
		case PD:
		*VOLT=read_bit(PIND,PIN_NUM);
		break;
	}
	return VALID_DIO;
    115c:	80 e0       	ldi	r24, 0x00	; 0
		case PB:
		*VOLT=read_bit(PINB,PIN_NUM);
		break;
		case PC:
		*VOLT=read_bit(PINC,PIN_NUM);
		break;
    115e:	08 95       	ret
		case PD:
		*VOLT=read_bit(PIND,PIN_NUM);
    1160:	20 b3       	in	r18, 0x10	; 16
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	a9 01       	movw	r20, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <DIO_READPIN+0x80>
    1168:	55 95       	asr	r21
    116a:	47 95       	ror	r20
    116c:	8a 95       	dec	r24
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <DIO_READPIN+0x7c>
    1170:	ca 01       	movw	r24, r20
    1172:	81 70       	andi	r24, 0x01	; 1
    1174:	fb 01       	movw	r30, r22
    1176:	80 83       	st	Z, r24
		break;
	}
	return VALID_DIO;
    1178:	80 e0       	ldi	r24, 0x00	; 0
		case PC:
		*VOLT=read_bit(PINC,PIN_NUM);
		break;
		case PD:
		*VOLT=read_bit(PIND,PIN_NUM);
		break;
    117a:	08 95       	ret
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
	if(PORT>4)
	{
		return INVALID_PORT;
    117c:	82 e0       	ldi	r24, 0x02	; 2
    117e:	08 95       	ret
		break;
		case PD:
		*VOLT=read_bit(PIND,PIN_NUM);
		break;
	}
	return VALID_DIO;
    1180:	80 e0       	ldi	r24, 0x00	; 0
}
}
    1182:	08 95       	ret

00001184 <EXI_Enable>:
/**DESCRIPTION:-
it enables one of the external interrupt
*/
EN_int__error_t EXI_Enable (EN_int_t Interrupt)
{
	switch (Interrupt)
    1184:	81 30       	cpi	r24, 0x01	; 1
    1186:	41 f0       	breq	.+16     	; 0x1198 <EXI_Enable+0x14>
    1188:	18 f0       	brcs	.+6      	; 0x1190 <EXI_Enable+0xc>
    118a:	82 30       	cpi	r24, 0x02	; 2
    118c:	49 f0       	breq	.+18     	; 0x11a0 <EXI_Enable+0x1c>
    118e:	08 95       	ret
	{
		case EXT_INT_0:
		set_bit(GICR,INT0);
    1190:	8b b7       	in	r24, 0x3b	; 59
    1192:	80 64       	ori	r24, 0x40	; 64
    1194:	8b bf       	out	0x3b, r24	; 59
		break;
    1196:	08 95       	ret
		case EXT_INT_1:
		set_bit(GICR,INT1);
    1198:	8b b7       	in	r24, 0x3b	; 59
    119a:	80 68       	ori	r24, 0x80	; 128
    119c:	8b bf       	out	0x3b, r24	; 59
		break;
    119e:	08 95       	ret
		case EXT_INT_2:
		set_bit(GICR,INT2);
    11a0:	8b b7       	in	r24, 0x3b	; 59
    11a2:	80 62       	ori	r24, 0x20	; 32
    11a4:	8b bf       	out	0x3b, r24	; 59
		break;
	}
}
    11a6:	08 95       	ret

000011a8 <EXI_Disable>:
it disables one of the external interrupt
*/

EN_int__error_t EXI_Disable (EN_int_t Interrupt)
{
	switch (Interrupt)
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	41 f0       	breq	.+16     	; 0x11bc <EXI_Disable+0x14>
    11ac:	18 f0       	brcs	.+6      	; 0x11b4 <EXI_Disable+0xc>
    11ae:	82 30       	cpi	r24, 0x02	; 2
    11b0:	49 f0       	breq	.+18     	; 0x11c4 <EXI_Disable+0x1c>
    11b2:	08 95       	ret
	{
		case EXT_INT_0:
		clear_bit(GICR,INT0);
    11b4:	8b b7       	in	r24, 0x3b	; 59
    11b6:	8f 7b       	andi	r24, 0xBF	; 191
    11b8:	8b bf       	out	0x3b, r24	; 59
		break;
    11ba:	08 95       	ret
		case EXT_INT_1:
		clear_bit(GICR,INT1);
    11bc:	8b b7       	in	r24, 0x3b	; 59
    11be:	8f 77       	andi	r24, 0x7F	; 127
    11c0:	8b bf       	out	0x3b, r24	; 59
		break;
    11c2:	08 95       	ret
		case EXT_INT_2:
		clear_bit(GICR,INT2);
    11c4:	8b b7       	in	r24, 0x3b	; 59
    11c6:	8f 7d       	andi	r24, 0xDF	; 223
    11c8:	8b bf       	out	0x3b, r24	; 59
		break;
	}
}
    11ca:	08 95       	ret

000011cc <EXI_Trigger>:
*/

EN_int__error_t EXI_Trigger(EN_int_t Interrupt,EN_trig trigger)
{
	
	switch(Interrupt)
    11cc:	81 30       	cpi	r24, 0x01	; 1
    11ce:	49 f1       	breq	.+82     	; 0x1222 <EXI_Trigger+0x56>
    11d0:	20 f0       	brcs	.+8      	; 0x11da <EXI_Trigger+0xe>
    11d2:	82 30       	cpi	r24, 0x02	; 2
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <EXI_Trigger+0xc>
    11d6:	49 c0       	rjmp	.+146    	; 0x126a <EXI_Trigger+0x9e>
    11d8:	08 95       	ret
	{
		case EXT_INT_0:
		switch(trigger)
    11da:	61 30       	cpi	r22, 0x01	; 1
    11dc:	69 f0       	breq	.+26     	; 0x11f8 <EXI_Trigger+0x2c>
    11de:	28 f0       	brcs	.+10     	; 0x11ea <EXI_Trigger+0x1e>
    11e0:	62 30       	cpi	r22, 0x02	; 2
    11e2:	89 f0       	breq	.+34     	; 0x1206 <EXI_Trigger+0x3a>
    11e4:	63 30       	cpi	r22, 0x03	; 3
    11e6:	b1 f0       	breq	.+44     	; 0x1214 <EXI_Trigger+0x48>
    11e8:	08 95       	ret
		{
			case LOW_LEVEL:
			clear_bit(MCUCR,ISC00);
    11ea:	85 b7       	in	r24, 0x35	; 53
    11ec:	8e 7f       	andi	r24, 0xFE	; 254
    11ee:	85 bf       	out	0x35, r24	; 53
			clear_bit(MCUCR,ISC01);
    11f0:	85 b7       	in	r24, 0x35	; 53
    11f2:	8d 7f       	andi	r24, 0xFD	; 253
    11f4:	85 bf       	out	0x35, r24	; 53
			break;
    11f6:	08 95       	ret
			case ANY_LOGIC_CHANGE:
			set_bit(MCUCR,ISC00);
    11f8:	85 b7       	in	r24, 0x35	; 53
    11fa:	81 60       	ori	r24, 0x01	; 1
    11fc:	85 bf       	out	0x35, r24	; 53
			clear_bit(MCUCR,ISC01);
    11fe:	85 b7       	in	r24, 0x35	; 53
    1200:	8d 7f       	andi	r24, 0xFD	; 253
    1202:	85 bf       	out	0x35, r24	; 53
			break;
    1204:	08 95       	ret
			case FALLING_EDGE:
			clear_bit(MCUCR,ISC00);
    1206:	85 b7       	in	r24, 0x35	; 53
    1208:	8e 7f       	andi	r24, 0xFE	; 254
    120a:	85 bf       	out	0x35, r24	; 53
			set_bit(MCUCR,ISC01);
    120c:	85 b7       	in	r24, 0x35	; 53
    120e:	82 60       	ori	r24, 0x02	; 2
    1210:	85 bf       	out	0x35, r24	; 53
			break;
    1212:	08 95       	ret
			case RISING_EDGE:
			set_bit(MCUCR,ISC00);
    1214:	85 b7       	in	r24, 0x35	; 53
    1216:	81 60       	ori	r24, 0x01	; 1
    1218:	85 bf       	out	0x35, r24	; 53
			set_bit(MCUCR,ISC01);
    121a:	85 b7       	in	r24, 0x35	; 53
    121c:	82 60       	ori	r24, 0x02	; 2
    121e:	85 bf       	out	0x35, r24	; 53
			break;
    1220:	08 95       	ret
		}
		break;
		case EXT_INT_1:
		switch(trigger)
    1222:	61 30       	cpi	r22, 0x01	; 1
    1224:	69 f0       	breq	.+26     	; 0x1240 <EXI_Trigger+0x74>
    1226:	28 f0       	brcs	.+10     	; 0x1232 <EXI_Trigger+0x66>
    1228:	62 30       	cpi	r22, 0x02	; 2
    122a:	89 f0       	breq	.+34     	; 0x124e <EXI_Trigger+0x82>
    122c:	63 30       	cpi	r22, 0x03	; 3
    122e:	b1 f0       	breq	.+44     	; 0x125c <EXI_Trigger+0x90>
    1230:	08 95       	ret
		{
			case LOW_LEVEL:
			clear_bit(MCUCR,ISC10);
    1232:	85 b7       	in	r24, 0x35	; 53
    1234:	8b 7f       	andi	r24, 0xFB	; 251
    1236:	85 bf       	out	0x35, r24	; 53
			clear_bit(MCUCR,ISC11); break;
    1238:	85 b7       	in	r24, 0x35	; 53
    123a:	87 7f       	andi	r24, 0xF7	; 247
    123c:	85 bf       	out	0x35, r24	; 53
    123e:	08 95       	ret
			case ANY_LOGIC_CHANGE:
			set_bit(MCUCR,ISC10);
    1240:	85 b7       	in	r24, 0x35	; 53
    1242:	84 60       	ori	r24, 0x04	; 4
    1244:	85 bf       	out	0x35, r24	; 53
			clear_bit(MCUCR,ISC11); break;
    1246:	85 b7       	in	r24, 0x35	; 53
    1248:	87 7f       	andi	r24, 0xF7	; 247
    124a:	85 bf       	out	0x35, r24	; 53
    124c:	08 95       	ret
			case FALLING_EDGE:
			clear_bit(MCUCR,ISC10);
    124e:	85 b7       	in	r24, 0x35	; 53
    1250:	8b 7f       	andi	r24, 0xFB	; 251
    1252:	85 bf       	out	0x35, r24	; 53
			set_bit(MCUCR,ISC11); break;
    1254:	85 b7       	in	r24, 0x35	; 53
    1256:	88 60       	ori	r24, 0x08	; 8
    1258:	85 bf       	out	0x35, r24	; 53
    125a:	08 95       	ret
			case RISING_EDGE:
			set_bit(MCUCR,ISC10);
    125c:	85 b7       	in	r24, 0x35	; 53
    125e:	84 60       	ori	r24, 0x04	; 4
    1260:	85 bf       	out	0x35, r24	; 53
			set_bit(MCUCR,ISC11); break;
    1262:	85 b7       	in	r24, 0x35	; 53
    1264:	88 60       	ori	r24, 0x08	; 8
    1266:	85 bf       	out	0x35, r24	; 53
    1268:	08 95       	ret
		}
		break;
		case EXT_INT_2:
		switch(trigger)
    126a:	62 30       	cpi	r22, 0x02	; 2
    126c:	19 f0       	breq	.+6      	; 0x1274 <EXI_Trigger+0xa8>
    126e:	63 30       	cpi	r22, 0x03	; 3
    1270:	29 f0       	breq	.+10     	; 0x127c <EXI_Trigger+0xb0>
    1272:	08 95       	ret
		{
			case FALLING_EDGE:
			clear_bit(MCUCSR,ISC2);
    1274:	84 b7       	in	r24, 0x34	; 52
    1276:	8f 7b       	andi	r24, 0xBF	; 191
    1278:	84 bf       	out	0x34, r24	; 52
			break;
    127a:	08 95       	ret
			case RISING_EDGE:
			set_bit(MCUCSR,ISC2);
    127c:	84 b7       	in	r24, 0x34	; 52
    127e:	80 64       	ori	r24, 0x40	; 64
    1280:	84 bf       	out	0x34, r24	; 52
			break;
		}
		break;
	}
}
    1282:	08 95       	ret

00001284 <EXI_SetCallBack>:
*/


void EXI_SetCallBack(EN_int_t Interrupt,void(*ptrf)(void))
{
	switch (Interrupt)
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	49 f0       	breq	.+18     	; 0x129a <EXI_SetCallBack+0x16>
    1288:	18 f0       	brcs	.+6      	; 0x1290 <EXI_SetCallBack+0xc>
    128a:	82 30       	cpi	r24, 0x02	; 2
    128c:	59 f0       	breq	.+22     	; 0x12a4 <EXI_SetCallBack+0x20>
    128e:	08 95       	ret
	{
		case EXT_INT_0:
		ptrf_INT_0 =ptrf;
    1290:	70 93 65 03 	sts	0x0365, r23	; 0x800365 <ptrf_INT_0+0x1>
    1294:	60 93 64 03 	sts	0x0364, r22	; 0x800364 <ptrf_INT_0>
		break;
    1298:	08 95       	ret
		case EXT_INT_1:
		ptrf_INT_1 =ptrf;
    129a:	70 93 63 03 	sts	0x0363, r23	; 0x800363 <ptrf_INT_1+0x1>
    129e:	60 93 62 03 	sts	0x0362, r22	; 0x800362 <ptrf_INT_1>
		break;
    12a2:	08 95       	ret
		case EXT_INT_2:
		ptrf_INT_2 =ptrf;
    12a4:	70 93 61 03 	sts	0x0361, r23	; 0x800361 <ptrf_INT_2+0x1>
    12a8:	60 93 60 03 	sts	0x0360, r22	; 0x800360 <ptrf_INT_2>
    12ac:	08 95       	ret

000012ae <__vector_1>:
}
/*******************************************************ISR INT_0********************************************************/


ISR (INT0_vect)
{
    12ae:	1f 92       	push	r1
    12b0:	0f 92       	push	r0
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	0f 92       	push	r0
    12b6:	11 24       	eor	r1, r1
    12b8:	2f 93       	push	r18
    12ba:	3f 93       	push	r19
    12bc:	4f 93       	push	r20
    12be:	5f 93       	push	r21
    12c0:	6f 93       	push	r22
    12c2:	7f 93       	push	r23
    12c4:	8f 93       	push	r24
    12c6:	9f 93       	push	r25
    12c8:	af 93       	push	r26
    12ca:	bf 93       	push	r27
    12cc:	ef 93       	push	r30
    12ce:	ff 93       	push	r31
	
	if (ptrf_INT_0 != NULL)
    12d0:	e0 91 64 03 	lds	r30, 0x0364	; 0x800364 <ptrf_INT_0>
    12d4:	f0 91 65 03 	lds	r31, 0x0365	; 0x800365 <ptrf_INT_0+0x1>
    12d8:	30 97       	sbiw	r30, 0x00	; 0
    12da:	09 f0       	breq	.+2      	; 0x12de <__vector_1+0x30>
	{
		ptrf_INT_0();
    12dc:	09 95       	icall
		

	}
}
    12de:	ff 91       	pop	r31
    12e0:	ef 91       	pop	r30
    12e2:	bf 91       	pop	r27
    12e4:	af 91       	pop	r26
    12e6:	9f 91       	pop	r25
    12e8:	8f 91       	pop	r24
    12ea:	7f 91       	pop	r23
    12ec:	6f 91       	pop	r22
    12ee:	5f 91       	pop	r21
    12f0:	4f 91       	pop	r20
    12f2:	3f 91       	pop	r19
    12f4:	2f 91       	pop	r18
    12f6:	0f 90       	pop	r0
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	0f 90       	pop	r0
    12fc:	1f 90       	pop	r1
    12fe:	18 95       	reti

00001300 <__vector_2>:

ISR (INT1_vect)
{
    1300:	1f 92       	push	r1
    1302:	0f 92       	push	r0
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	0f 92       	push	r0
    1308:	11 24       	eor	r1, r1
    130a:	2f 93       	push	r18
    130c:	3f 93       	push	r19
    130e:	4f 93       	push	r20
    1310:	5f 93       	push	r21
    1312:	6f 93       	push	r22
    1314:	7f 93       	push	r23
    1316:	8f 93       	push	r24
    1318:	9f 93       	push	r25
    131a:	af 93       	push	r26
    131c:	bf 93       	push	r27
    131e:	ef 93       	push	r30
    1320:	ff 93       	push	r31
	if (ptrf_INT_1 != NULL)
    1322:	e0 91 62 03 	lds	r30, 0x0362	; 0x800362 <ptrf_INT_1>
    1326:	f0 91 63 03 	lds	r31, 0x0363	; 0x800363 <ptrf_INT_1+0x1>
    132a:	30 97       	sbiw	r30, 0x00	; 0
    132c:	09 f0       	breq	.+2      	; 0x1330 <__vector_2+0x30>
	{
		ptrf_INT_1();
    132e:	09 95       	icall
		
	}
	
}
    1330:	ff 91       	pop	r31
    1332:	ef 91       	pop	r30
    1334:	bf 91       	pop	r27
    1336:	af 91       	pop	r26
    1338:	9f 91       	pop	r25
    133a:	8f 91       	pop	r24
    133c:	7f 91       	pop	r23
    133e:	6f 91       	pop	r22
    1340:	5f 91       	pop	r21
    1342:	4f 91       	pop	r20
    1344:	3f 91       	pop	r19
    1346:	2f 91       	pop	r18
    1348:	0f 90       	pop	r0
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	0f 90       	pop	r0
    134e:	1f 90       	pop	r1
    1350:	18 95       	reti

00001352 <__vector_3>:

ISR (INT2_vect)
{
    1352:	1f 92       	push	r1
    1354:	0f 92       	push	r0
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	0f 92       	push	r0
    135a:	11 24       	eor	r1, r1
    135c:	2f 93       	push	r18
    135e:	3f 93       	push	r19
    1360:	4f 93       	push	r20
    1362:	5f 93       	push	r21
    1364:	6f 93       	push	r22
    1366:	7f 93       	push	r23
    1368:	8f 93       	push	r24
    136a:	9f 93       	push	r25
    136c:	af 93       	push	r26
    136e:	bf 93       	push	r27
    1370:	ef 93       	push	r30
    1372:	ff 93       	push	r31
	if (ptrf_INT_2 != NULL)
    1374:	e0 91 60 03 	lds	r30, 0x0360	; 0x800360 <ptrf_INT_2>
    1378:	f0 91 61 03 	lds	r31, 0x0361	; 0x800361 <ptrf_INT_2+0x1>
    137c:	30 97       	sbiw	r30, 0x00	; 0
    137e:	09 f0       	breq	.+2      	; 0x1382 <__vector_3+0x30>
	{
		ptrf_INT_2();
    1380:	09 95       	icall
	}
    1382:	ff 91       	pop	r31
    1384:	ef 91       	pop	r30
    1386:	bf 91       	pop	r27
    1388:	af 91       	pop	r26
    138a:	9f 91       	pop	r25
    138c:	8f 91       	pop	r24
    138e:	7f 91       	pop	r23
    1390:	6f 91       	pop	r22
    1392:	5f 91       	pop	r21
    1394:	4f 91       	pop	r20
    1396:	3f 91       	pop	r19
    1398:	2f 91       	pop	r18
    139a:	0f 90       	pop	r0
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	0f 90       	pop	r0
    13a0:	1f 90       	pop	r1
    13a2:	18 95       	reti

000013a4 <SPI_SlaveInit>:
{
	SPDR=data;
	while(!read_bit(SPSR,SPIF));
	return  SPDR;
	
}
    13a4:	cf 93       	push	r28
    13a6:	c8 2f       	mov	r28, r24
    13a8:	62 e0       	ldi	r22, 0x02	; 2
    13aa:	8d e0       	ldi	r24, 0x0D	; 13
    13ac:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_INITPIN>
    13b0:	62 e0       	ldi	r22, 0x02	; 2
    13b2:	8f e0       	ldi	r24, 0x0F	; 15
    13b4:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_INITPIN>
    13b8:	62 e0       	ldi	r22, 0x02	; 2
    13ba:	8c e0       	ldi	r24, 0x0C	; 12
    13bc:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_INITPIN>
    13c0:	60 e0       	ldi	r22, 0x00	; 0
    13c2:	8e e0       	ldi	r24, 0x0E	; 14
    13c4:	0e 94 d7 06 	call	0xdae	; 0xdae <DIO_INITPIN>
    13c8:	61 e0       	ldi	r22, 0x01	; 1
    13ca:	8c e0       	ldi	r24, 0x0C	; 12
    13cc:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <DIO_WRITEPIN>
    13d0:	8d b1       	in	r24, 0x0d	; 13
    13d2:	80 64       	ori	r24, 0x40	; 64
    13d4:	8d b9       	out	0x0d, r24	; 13
    13d6:	8c 2f       	mov	r24, r28
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	87 30       	cpi	r24, 0x07	; 7
    13dc:	91 05       	cpc	r25, r1
    13de:	08 f0       	brcs	.+2      	; 0x13e2 <SPI_SlaveInit+0x3e>
    13e0:	4a c0       	rjmp	.+148    	; 0x1476 <SPI_SlaveInit+0xd2>
    13e2:	fc 01       	movw	r30, r24
    13e4:	e6 5d       	subi	r30, 0xD6	; 214
    13e6:	ff 4f       	sbci	r31, 0xFF	; 255
    13e8:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <__tablejump2__>
    13ec:	8d b1       	in	r24, 0x0d	; 13
    13ee:	8e 7f       	andi	r24, 0xFE	; 254
    13f0:	8d b9       	out	0x0d, r24	; 13
    13f2:	8d b1       	in	r24, 0x0d	; 13
    13f4:	8d 7f       	andi	r24, 0xFD	; 253
    13f6:	8d b9       	out	0x0d, r24	; 13
    13f8:	8e b1       	in	r24, 0x0e	; 14
    13fa:	81 60       	ori	r24, 0x01	; 1
    13fc:	8e b9       	out	0x0e, r24	; 14
    13fe:	3b c0       	rjmp	.+118    	; 0x1476 <SPI_SlaveInit+0xd2>
    1400:	8d b1       	in	r24, 0x0d	; 13
    1402:	8e 7f       	andi	r24, 0xFE	; 254
    1404:	8d b9       	out	0x0d, r24	; 13
    1406:	8d b1       	in	r24, 0x0d	; 13
    1408:	8d 7f       	andi	r24, 0xFD	; 253
    140a:	8d b9       	out	0x0d, r24	; 13
    140c:	8e b1       	in	r24, 0x0e	; 14
    140e:	8e 7f       	andi	r24, 0xFE	; 254
    1410:	8e b9       	out	0x0e, r24	; 14
    1412:	31 c0       	rjmp	.+98     	; 0x1476 <SPI_SlaveInit+0xd2>
    1414:	8d b1       	in	r24, 0x0d	; 13
    1416:	81 60       	ori	r24, 0x01	; 1
    1418:	8d b9       	out	0x0d, r24	; 13
    141a:	8d b1       	in	r24, 0x0d	; 13
    141c:	8d 7f       	andi	r24, 0xFD	; 253
    141e:	8d b9       	out	0x0d, r24	; 13
    1420:	8e b1       	in	r24, 0x0e	; 14
    1422:	81 60       	ori	r24, 0x01	; 1
    1424:	8e b9       	out	0x0e, r24	; 14
    1426:	27 c0       	rjmp	.+78     	; 0x1476 <SPI_SlaveInit+0xd2>
    1428:	8d b1       	in	r24, 0x0d	; 13
    142a:	81 60       	ori	r24, 0x01	; 1
    142c:	8d b9       	out	0x0d, r24	; 13
    142e:	8d b1       	in	r24, 0x0d	; 13
    1430:	8d 7f       	andi	r24, 0xFD	; 253
    1432:	8d b9       	out	0x0d, r24	; 13
    1434:	8e b1       	in	r24, 0x0e	; 14
    1436:	8e 7f       	andi	r24, 0xFE	; 254
    1438:	8e b9       	out	0x0e, r24	; 14
    143a:	1d c0       	rjmp	.+58     	; 0x1476 <SPI_SlaveInit+0xd2>
    143c:	8d b1       	in	r24, 0x0d	; 13
    143e:	8e 7f       	andi	r24, 0xFE	; 254
    1440:	8d b9       	out	0x0d, r24	; 13
    1442:	8d b1       	in	r24, 0x0d	; 13
    1444:	82 60       	ori	r24, 0x02	; 2
    1446:	8d b9       	out	0x0d, r24	; 13
    1448:	8e b1       	in	r24, 0x0e	; 14
    144a:	81 60       	ori	r24, 0x01	; 1
    144c:	8e b9       	out	0x0e, r24	; 14
    144e:	13 c0       	rjmp	.+38     	; 0x1476 <SPI_SlaveInit+0xd2>
    1450:	8d b1       	in	r24, 0x0d	; 13
    1452:	8e 7f       	andi	r24, 0xFE	; 254
    1454:	8d b9       	out	0x0d, r24	; 13
    1456:	8d b1       	in	r24, 0x0d	; 13
    1458:	82 60       	ori	r24, 0x02	; 2
    145a:	8d b9       	out	0x0d, r24	; 13
    145c:	8e b1       	in	r24, 0x0e	; 14
    145e:	8e 7f       	andi	r24, 0xFE	; 254
    1460:	8e b9       	out	0x0e, r24	; 14
    1462:	09 c0       	rjmp	.+18     	; 0x1476 <SPI_SlaveInit+0xd2>
    1464:	8d b1       	in	r24, 0x0d	; 13
    1466:	81 60       	ori	r24, 0x01	; 1
    1468:	8d b9       	out	0x0d, r24	; 13
    146a:	8d b1       	in	r24, 0x0d	; 13
    146c:	82 60       	ori	r24, 0x02	; 2
    146e:	8d b9       	out	0x0d, r24	; 13
    1470:	8e b1       	in	r24, 0x0e	; 14
    1472:	8e 7f       	andi	r24, 0xFE	; 254
    1474:	8e b9       	out	0x0e, r24	; 14
    1476:	cf 91       	pop	r28
    1478:	08 95       	ret

0000147a <SPI_RecievePeriodicChecking>:



uint8_t SPI_RecievePeriodicChecking(uint8_t * pdata)
{
    147a:	fc 01       	movw	r30, r24
	if (read_bit(SPSR,SPIF))
    147c:	9e b1       	in	r25, 0x0e	; 14
    147e:	89 2f       	mov	r24, r25
    1480:	88 1f       	adc	r24, r24
    1482:	88 27       	eor	r24, r24
    1484:	88 1f       	adc	r24, r24
    1486:	19 f0       	breq	.+6      	; 0x148e <SPI_RecievePeriodicChecking+0x14>
	{
		*pdata=SPDR;
    1488:	8f b1       	in	r24, 0x0f	; 15
    148a:	80 83       	st	Z, r24
		return 1;
    148c:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
    148e:	08 95       	ret

00001490 <TIMER_0_init>:
	
}



void TIMER2_SetCallBack(void(*ptf)(void)){
    1490:	81 30       	cpi	r24, 0x01	; 1
    1492:	f1 f0       	breq	.+60     	; 0x14d0 <TIMER_0_init+0x40>
    1494:	28 f0       	brcs	.+10     	; 0x14a0 <TIMER_0_init+0x10>
    1496:	82 30       	cpi	r24, 0x02	; 2
    1498:	99 f0       	breq	.+38     	; 0x14c0 <TIMER_0_init+0x30>
    149a:	83 30       	cpi	r24, 0x03	; 3
    149c:	49 f0       	breq	.+18     	; 0x14b0 <TIMER_0_init+0x20>
    149e:	20 c0       	rjmp	.+64     	; 0x14e0 <TIMER_0_init+0x50>
    14a0:	83 b7       	in	r24, 0x33	; 51
    14a2:	8f 7b       	andi	r24, 0xBF	; 191
    14a4:	83 bf       	out	0x33, r24	; 51
    14a6:	83 b7       	in	r24, 0x33	; 51
    14a8:	87 7f       	andi	r24, 0xF7	; 247
    14aa:	83 bf       	out	0x33, r24	; 51
    14ac:	84 e0       	ldi	r24, 0x04	; 4
    14ae:	08 95       	ret
    14b0:	83 b7       	in	r24, 0x33	; 51
    14b2:	80 64       	ori	r24, 0x40	; 64
    14b4:	83 bf       	out	0x33, r24	; 51
    14b6:	83 b7       	in	r24, 0x33	; 51
    14b8:	87 7f       	andi	r24, 0xF7	; 247
    14ba:	83 bf       	out	0x33, r24	; 51
    14bc:	84 e0       	ldi	r24, 0x04	; 4
    14be:	08 95       	ret
    14c0:	83 b7       	in	r24, 0x33	; 51
    14c2:	8f 7b       	andi	r24, 0xBF	; 191
    14c4:	83 bf       	out	0x33, r24	; 51
    14c6:	83 b7       	in	r24, 0x33	; 51
    14c8:	88 60       	ori	r24, 0x08	; 8
    14ca:	83 bf       	out	0x33, r24	; 51
    14cc:	84 e0       	ldi	r24, 0x04	; 4
    14ce:	08 95       	ret
    14d0:	83 b7       	in	r24, 0x33	; 51
    14d2:	80 64       	ori	r24, 0x40	; 64
    14d4:	83 bf       	out	0x33, r24	; 51
    14d6:	83 b7       	in	r24, 0x33	; 51
    14d8:	88 60       	ori	r24, 0x08	; 8
    14da:	83 bf       	out	0x33, r24	; 51
    14dc:	84 e0       	ldi	r24, 0x04	; 4
    14de:	08 95       	ret
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	08 95       	ret

000014e4 <TIMER_0_start>:
    14e4:	82 30       	cpi	r24, 0x02	; 2
    14e6:	09 f1       	breq	.+66     	; 0x152a <TIMER_0_start+0x46>
    14e8:	28 f4       	brcc	.+10     	; 0x14f4 <TIMER_0_start+0x10>
    14ea:	88 23       	and	r24, r24
    14ec:	41 f0       	breq	.+16     	; 0x14fe <TIMER_0_start+0x1a>
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	89 f0       	breq	.+34     	; 0x1514 <TIMER_0_start+0x30>
    14f2:	3c c0       	rjmp	.+120    	; 0x156c <TIMER_0_start+0x88>
    14f4:	85 30       	cpi	r24, 0x05	; 5
    14f6:	21 f1       	breq	.+72     	; 0x1540 <TIMER_0_start+0x5c>
    14f8:	86 30       	cpi	r24, 0x06	; 6
    14fa:	69 f1       	breq	.+90     	; 0x1556 <TIMER_0_start+0x72>
    14fc:	37 c0       	rjmp	.+110    	; 0x156c <TIMER_0_start+0x88>
    14fe:	83 b7       	in	r24, 0x33	; 51
    1500:	81 60       	ori	r24, 0x01	; 1
    1502:	83 bf       	out	0x33, r24	; 51
    1504:	83 b7       	in	r24, 0x33	; 51
    1506:	8d 7f       	andi	r24, 0xFD	; 253
    1508:	83 bf       	out	0x33, r24	; 51
    150a:	83 b7       	in	r24, 0x33	; 51
    150c:	8b 7f       	andi	r24, 0xFB	; 251
    150e:	83 bf       	out	0x33, r24	; 51
    1510:	84 e0       	ldi	r24, 0x04	; 4
    1512:	08 95       	ret
    1514:	83 b7       	in	r24, 0x33	; 51
    1516:	82 60       	ori	r24, 0x02	; 2
    1518:	83 bf       	out	0x33, r24	; 51
    151a:	83 b7       	in	r24, 0x33	; 51
    151c:	8e 7f       	andi	r24, 0xFE	; 254
    151e:	83 bf       	out	0x33, r24	; 51
    1520:	83 b7       	in	r24, 0x33	; 51
    1522:	8b 7f       	andi	r24, 0xFB	; 251
    1524:	83 bf       	out	0x33, r24	; 51
    1526:	84 e0       	ldi	r24, 0x04	; 4
    1528:	08 95       	ret
    152a:	83 b7       	in	r24, 0x33	; 51
    152c:	81 60       	ori	r24, 0x01	; 1
    152e:	83 bf       	out	0x33, r24	; 51
    1530:	83 b7       	in	r24, 0x33	; 51
    1532:	82 60       	ori	r24, 0x02	; 2
    1534:	83 bf       	out	0x33, r24	; 51
    1536:	83 b7       	in	r24, 0x33	; 51
    1538:	8b 7f       	andi	r24, 0xFB	; 251
    153a:	83 bf       	out	0x33, r24	; 51
    153c:	84 e0       	ldi	r24, 0x04	; 4
    153e:	08 95       	ret
    1540:	83 b7       	in	r24, 0x33	; 51
    1542:	84 60       	ori	r24, 0x04	; 4
    1544:	83 bf       	out	0x33, r24	; 51
    1546:	83 b7       	in	r24, 0x33	; 51
    1548:	8d 7f       	andi	r24, 0xFD	; 253
    154a:	83 bf       	out	0x33, r24	; 51
    154c:	83 b7       	in	r24, 0x33	; 51
    154e:	8e 7f       	andi	r24, 0xFE	; 254
    1550:	83 bf       	out	0x33, r24	; 51
    1552:	84 e0       	ldi	r24, 0x04	; 4
    1554:	08 95       	ret
    1556:	83 b7       	in	r24, 0x33	; 51
    1558:	81 60       	ori	r24, 0x01	; 1
    155a:	83 bf       	out	0x33, r24	; 51
    155c:	83 b7       	in	r24, 0x33	; 51
    155e:	8d 7f       	andi	r24, 0xFD	; 253
    1560:	83 bf       	out	0x33, r24	; 51
    1562:	83 b7       	in	r24, 0x33	; 51
    1564:	84 60       	ori	r24, 0x04	; 4
    1566:	83 bf       	out	0x33, r24	; 51
    1568:	84 e0       	ldi	r24, 0x04	; 4
    156a:	08 95       	ret
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	08 95       	ret

00001570 <TIMER_0_setIntialValue>:
    1570:	cf 92       	push	r12
    1572:	df 92       	push	r13
    1574:	ef 92       	push	r14
    1576:	ff 92       	push	r15
    1578:	6b 01       	movw	r12, r22
    157a:	7c 01       	movw	r14, r24
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	40 e8       	ldi	r20, 0x80	; 128
    1582:	53 e4       	ldi	r21, 0x43	; 67
    1584:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__cmpsf2>
    1588:	88 23       	and	r24, r24
    158a:	94 f4       	brge	.+36     	; 0x15b0 <TIMER_0_setIntialValue+0x40>
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	a9 01       	movw	r20, r18
    1592:	c7 01       	movw	r24, r14
    1594:	b6 01       	movw	r22, r12
    1596:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__gesf2>
    159a:	88 23       	and	r24, r24
    159c:	5c f0       	brlt	.+22     	; 0x15b4 <TIMER_0_setIntialValue+0x44>
    159e:	c7 01       	movw	r24, r14
    15a0:	b6 01       	movw	r22, r12
    15a2:	0e 94 ba 0c 	call	0x1974	; 0x1974 <ceil>
    15a6:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fixunssfsi>
    15aa:	62 bf       	out	0x32, r22	; 50
    15ac:	84 e0       	ldi	r24, 0x04	; 4
    15ae:	03 c0       	rjmp	.+6      	; 0x15b6 <TIMER_0_setIntialValue+0x46>
    15b0:	83 e0       	ldi	r24, 0x03	; 3
    15b2:	01 c0       	rjmp	.+2      	; 0x15b6 <TIMER_0_setIntialValue+0x46>
    15b4:	83 e0       	ldi	r24, 0x03	; 3
    15b6:	ff 90       	pop	r15
    15b8:	ef 90       	pop	r14
    15ba:	df 90       	pop	r13
    15bc:	cf 90       	pop	r12
    15be:	08 95       	ret

000015c0 <TIMER_0_OvfNum>:
    15c0:	8f 92       	push	r8
    15c2:	9f 92       	push	r9
    15c4:	af 92       	push	r10
    15c6:	bf 92       	push	r11
    15c8:	cf 92       	push	r12
    15ca:	df 92       	push	r13
    15cc:	ef 92       	push	r14
    15ce:	ff 92       	push	r15
    15d0:	4b 01       	movw	r8, r22
    15d2:	5c 01       	movw	r10, r24
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	a9 01       	movw	r20, r18
    15da:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__gesf2>
    15de:	18 16       	cp	r1, r24
    15e0:	94 f0       	brlt	.+36     	; 0x1606 <TIMER_0_OvfNum+0x46>
    15e2:	1e c0       	rjmp	.+60     	; 0x1620 <TIMER_0_OvfNum+0x60>
    15e4:	08 b6       	in	r0, 0x38	; 56
    15e6:	00 fe       	sbrs	r0, 0
    15e8:	fd cf       	rjmp	.-6      	; 0x15e4 <TIMER_0_OvfNum+0x24>
    15ea:	88 b7       	in	r24, 0x38	; 56
    15ec:	81 60       	ori	r24, 0x01	; 1
    15ee:	88 bf       	out	0x38, r24	; 56
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	40 e8       	ldi	r20, 0x80	; 128
    15f6:	5f e3       	ldi	r21, 0x3F	; 63
    15f8:	c7 01       	movw	r24, r14
    15fa:	b6 01       	movw	r22, r12
    15fc:	0e 94 4e 0c 	call	0x189c	; 0x189c <__addsf3>
    1600:	6b 01       	movw	r12, r22
    1602:	7c 01       	movw	r14, r24
    1604:	03 c0       	rjmp	.+6      	; 0x160c <TIMER_0_OvfNum+0x4c>
    1606:	c1 2c       	mov	r12, r1
    1608:	d1 2c       	mov	r13, r1
    160a:	76 01       	movw	r14, r12
    160c:	a5 01       	movw	r20, r10
    160e:	94 01       	movw	r18, r8
    1610:	c7 01       	movw	r24, r14
    1612:	b6 01       	movw	r22, r12
    1614:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__cmpsf2>
    1618:	88 23       	and	r24, r24
    161a:	24 f3       	brlt	.-56     	; 0x15e4 <TIMER_0_OvfNum+0x24>
    161c:	84 e0       	ldi	r24, 0x04	; 4
    161e:	2a c0       	rjmp	.+84     	; 0x1674 <TIMER_0_OvfNum+0xb4>
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	a9 01       	movw	r20, r18
    1626:	c5 01       	movw	r24, r10
    1628:	b4 01       	movw	r22, r8
    162a:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__cmpsf2>
    162e:	18 16       	cp	r1, r24
    1630:	9c f4       	brge	.+38     	; 0x1658 <TIMER_0_OvfNum+0x98>
    1632:	82 e0       	ldi	r24, 0x02	; 2
    1634:	1f c0       	rjmp	.+62     	; 0x1674 <TIMER_0_OvfNum+0xb4>
    1636:	08 b6       	in	r0, 0x38	; 56
    1638:	00 fe       	sbrs	r0, 0
    163a:	fd cf       	rjmp	.-6      	; 0x1636 <TIMER_0_OvfNum+0x76>
    163c:	88 b7       	in	r24, 0x38	; 56
    163e:	81 60       	ori	r24, 0x01	; 1
    1640:	88 bf       	out	0x38, r24	; 56
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	40 e8       	ldi	r20, 0x80	; 128
    1648:	5f e3       	ldi	r21, 0x3F	; 63
    164a:	c7 01       	movw	r24, r14
    164c:	b6 01       	movw	r22, r12
    164e:	0e 94 4e 0c 	call	0x189c	; 0x189c <__addsf3>
    1652:	6b 01       	movw	r12, r22
    1654:	7c 01       	movw	r14, r24
    1656:	03 c0       	rjmp	.+6      	; 0x165e <TIMER_0_OvfNum+0x9e>
    1658:	c1 2c       	mov	r12, r1
    165a:	d1 2c       	mov	r13, r1
    165c:	76 01       	movw	r14, r12
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	40 e8       	ldi	r20, 0x80	; 128
    1664:	5f e3       	ldi	r21, 0x3F	; 63
    1666:	c7 01       	movw	r24, r14
    1668:	b6 01       	movw	r22, r12
    166a:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__cmpsf2>
    166e:	88 23       	and	r24, r24
    1670:	14 f3       	brlt	.-60     	; 0x1636 <TIMER_0_OvfNum+0x76>
    1672:	84 e0       	ldi	r24, 0x04	; 4
    1674:	ff 90       	pop	r15
    1676:	ef 90       	pop	r14
    1678:	df 90       	pop	r13
    167a:	cf 90       	pop	r12
    167c:	bf 90       	pop	r11
    167e:	af 90       	pop	r10
    1680:	9f 90       	pop	r9
    1682:	8f 90       	pop	r8
    1684:	08 95       	ret

00001686 <TIMER_0_DELAY_MS>:
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	4a e7       	ldi	r20, 0x7A	; 122
    168c:	54 e4       	ldi	r21, 0x44	; 68
    168e:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__divsf3>
    1692:	2d eb       	ldi	r18, 0xBD	; 189
    1694:	37 e3       	ldi	r19, 0x37	; 55
    1696:	46 e8       	ldi	r20, 0x86	; 134
    1698:	59 e3       	ldi	r21, 0x39	; 57
    169a:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__divsf3>
    169e:	0e 94 ba 0c 	call	0x1974	; 0x1974 <ceil>
    16a2:	60 93 6a 03 	sts	0x036A, r22	; 0x80036a <g_ovfNum>
    16a6:	70 93 6b 03 	sts	0x036B, r23	; 0x80036b <g_ovfNum+0x1>
    16aa:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <g_ovfNum+0x2>
    16ae:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <g_ovfNum+0x3>
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	0e 94 48 0a 	call	0x1490	; 0x1490 <TIMER_0_init>
    16b8:	60 e0       	ldi	r22, 0x00	; 0
    16ba:	70 e0       	ldi	r23, 0x00	; 0
    16bc:	cb 01       	movw	r24, r22
    16be:	0e 94 b8 0a 	call	0x1570	; 0x1570 <TIMER_0_setIntialValue>
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <TIMER_0_start>
    16c8:	60 91 6a 03 	lds	r22, 0x036A	; 0x80036a <g_ovfNum>
    16cc:	70 91 6b 03 	lds	r23, 0x036B	; 0x80036b <g_ovfNum+0x1>
    16d0:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <g_ovfNum+0x2>
    16d4:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <g_ovfNum+0x3>
    16d8:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <TIMER_0_OvfNum>
    16dc:	08 95       	ret

000016de <TIMER_2_init>:
    16de:	81 30       	cpi	r24, 0x01	; 1
    16e0:	f1 f0       	breq	.+60     	; 0x171e <TIMER_2_init+0x40>
    16e2:	28 f0       	brcs	.+10     	; 0x16ee <TIMER_2_init+0x10>
    16e4:	82 30       	cpi	r24, 0x02	; 2
    16e6:	99 f0       	breq	.+38     	; 0x170e <TIMER_2_init+0x30>
    16e8:	83 30       	cpi	r24, 0x03	; 3
    16ea:	49 f0       	breq	.+18     	; 0x16fe <TIMER_2_init+0x20>
    16ec:	20 c0       	rjmp	.+64     	; 0x172e <TIMER_2_init+0x50>
    16ee:	85 b5       	in	r24, 0x25	; 37
    16f0:	8f 7b       	andi	r24, 0xBF	; 191
    16f2:	85 bd       	out	0x25, r24	; 37
    16f4:	85 b5       	in	r24, 0x25	; 37
    16f6:	87 7f       	andi	r24, 0xF7	; 247
    16f8:	85 bd       	out	0x25, r24	; 37
    16fa:	84 e0       	ldi	r24, 0x04	; 4
    16fc:	08 95       	ret
    16fe:	85 b5       	in	r24, 0x25	; 37
    1700:	80 64       	ori	r24, 0x40	; 64
    1702:	85 bd       	out	0x25, r24	; 37
    1704:	85 b5       	in	r24, 0x25	; 37
    1706:	87 7f       	andi	r24, 0xF7	; 247
    1708:	85 bd       	out	0x25, r24	; 37
    170a:	84 e0       	ldi	r24, 0x04	; 4
    170c:	08 95       	ret
    170e:	85 b5       	in	r24, 0x25	; 37
    1710:	8f 7b       	andi	r24, 0xBF	; 191
    1712:	85 bd       	out	0x25, r24	; 37
    1714:	85 b5       	in	r24, 0x25	; 37
    1716:	88 60       	ori	r24, 0x08	; 8
    1718:	85 bd       	out	0x25, r24	; 37
    171a:	84 e0       	ldi	r24, 0x04	; 4
    171c:	08 95       	ret
    171e:	85 b5       	in	r24, 0x25	; 37
    1720:	80 64       	ori	r24, 0x40	; 64
    1722:	85 bd       	out	0x25, r24	; 37
    1724:	85 b5       	in	r24, 0x25	; 37
    1726:	88 60       	ori	r24, 0x08	; 8
    1728:	85 bd       	out	0x25, r24	; 37
    172a:	84 e0       	ldi	r24, 0x04	; 4
    172c:	08 95       	ret
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	08 95       	ret

00001732 <TIMER_2_setIntialValue>:
    1732:	84 bd       	out	0x24, r24	; 36
    1734:	84 e0       	ldi	r24, 0x04	; 4
    1736:	08 95       	ret

00001738 <TIMER_2_start>:
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	87 30       	cpi	r24, 0x07	; 7
    173c:	91 05       	cpc	r25, r1
    173e:	08 f0       	brcs	.+2      	; 0x1742 <TIMER_2_start+0xa>
    1740:	52 c0       	rjmp	.+164    	; 0x17e6 <TIMER_2_start+0xae>
    1742:	fc 01       	movw	r30, r24
    1744:	ef 5c       	subi	r30, 0xCF	; 207
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <__tablejump2__>
    174c:	85 b5       	in	r24, 0x25	; 37
    174e:	81 60       	ori	r24, 0x01	; 1
    1750:	85 bd       	out	0x25, r24	; 37
    1752:	85 b5       	in	r24, 0x25	; 37
    1754:	8d 7f       	andi	r24, 0xFD	; 253
    1756:	85 bd       	out	0x25, r24	; 37
    1758:	85 b5       	in	r24, 0x25	; 37
    175a:	8b 7f       	andi	r24, 0xFB	; 251
    175c:	85 bd       	out	0x25, r24	; 37
    175e:	84 e0       	ldi	r24, 0x04	; 4
    1760:	08 95       	ret
    1762:	85 b5       	in	r24, 0x25	; 37
    1764:	82 60       	ori	r24, 0x02	; 2
    1766:	85 bd       	out	0x25, r24	; 37
    1768:	85 b5       	in	r24, 0x25	; 37
    176a:	8e 7f       	andi	r24, 0xFE	; 254
    176c:	85 bd       	out	0x25, r24	; 37
    176e:	85 b5       	in	r24, 0x25	; 37
    1770:	8b 7f       	andi	r24, 0xFB	; 251
    1772:	85 bd       	out	0x25, r24	; 37
    1774:	84 e0       	ldi	r24, 0x04	; 4
    1776:	08 95       	ret
    1778:	85 b5       	in	r24, 0x25	; 37
    177a:	81 60       	ori	r24, 0x01	; 1
    177c:	85 bd       	out	0x25, r24	; 37
    177e:	85 b5       	in	r24, 0x25	; 37
    1780:	82 60       	ori	r24, 0x02	; 2
    1782:	85 bd       	out	0x25, r24	; 37
    1784:	85 b5       	in	r24, 0x25	; 37
    1786:	8b 7f       	andi	r24, 0xFB	; 251
    1788:	85 bd       	out	0x25, r24	; 37
    178a:	84 e0       	ldi	r24, 0x04	; 4
    178c:	08 95       	ret
    178e:	85 b5       	in	r24, 0x25	; 37
    1790:	84 60       	ori	r24, 0x04	; 4
    1792:	85 bd       	out	0x25, r24	; 37
    1794:	85 b5       	in	r24, 0x25	; 37
    1796:	8d 7f       	andi	r24, 0xFD	; 253
    1798:	85 bd       	out	0x25, r24	; 37
    179a:	85 b5       	in	r24, 0x25	; 37
    179c:	8e 7f       	andi	r24, 0xFE	; 254
    179e:	85 bd       	out	0x25, r24	; 37
    17a0:	84 e0       	ldi	r24, 0x04	; 4
    17a2:	08 95       	ret
    17a4:	85 b5       	in	r24, 0x25	; 37
    17a6:	81 60       	ori	r24, 0x01	; 1
    17a8:	85 bd       	out	0x25, r24	; 37
    17aa:	85 b5       	in	r24, 0x25	; 37
    17ac:	8d 7f       	andi	r24, 0xFD	; 253
    17ae:	85 bd       	out	0x25, r24	; 37
    17b0:	85 b5       	in	r24, 0x25	; 37
    17b2:	84 60       	ori	r24, 0x04	; 4
    17b4:	85 bd       	out	0x25, r24	; 37
    17b6:	84 e0       	ldi	r24, 0x04	; 4
    17b8:	08 95       	ret
    17ba:	85 b5       	in	r24, 0x25	; 37
    17bc:	84 60       	ori	r24, 0x04	; 4
    17be:	85 bd       	out	0x25, r24	; 37
    17c0:	85 b5       	in	r24, 0x25	; 37
    17c2:	8e 7f       	andi	r24, 0xFE	; 254
    17c4:	85 bd       	out	0x25, r24	; 37
    17c6:	85 b5       	in	r24, 0x25	; 37
    17c8:	82 60       	ori	r24, 0x02	; 2
    17ca:	85 bd       	out	0x25, r24	; 37
    17cc:	84 e0       	ldi	r24, 0x04	; 4
    17ce:	08 95       	ret
    17d0:	85 b5       	in	r24, 0x25	; 37
    17d2:	81 60       	ori	r24, 0x01	; 1
    17d4:	85 bd       	out	0x25, r24	; 37
    17d6:	85 b5       	in	r24, 0x25	; 37
    17d8:	82 60       	ori	r24, 0x02	; 2
    17da:	85 bd       	out	0x25, r24	; 37
    17dc:	85 b5       	in	r24, 0x25	; 37
    17de:	84 60       	ori	r24, 0x04	; 4
    17e0:	85 bd       	out	0x25, r24	; 37
    17e2:	84 e0       	ldi	r24, 0x04	; 4
    17e4:	08 95       	ret
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	08 95       	ret

000017ea <TIMER_2_INT>:
}



void TIMER_2_INT(){
	sei();
    17ea:	78 94       	sei
	set_bit(TIMSK,TOIE2);
    17ec:	89 b7       	in	r24, 0x39	; 57
    17ee:	80 64       	ori	r24, 0x40	; 64
    17f0:	89 bf       	out	0x39, r24	; 57
	TIMER_2_init(NORMAL_MODE);
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	0e 94 6f 0b 	call	0x16de	; 0x16de <TIMER_2_init>
	TIMER_2_setIntialValue(0);
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	0e 94 99 0b 	call	0x1732	; 0x1732 <TIMER_2_setIntialValue>
	TIMER_2_start(PRECALER_1);
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	0e 94 9c 0b 	call	0x1738	; 0x1738 <TIMER_2_start>
    1804:	08 95       	ret

00001806 <__vector_5>:
}




ISR(TIMER2_OVF){
    1806:	1f 92       	push	r1
    1808:	0f 92       	push	r0
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	0f 92       	push	r0
    180e:	11 24       	eor	r1, r1
    1810:	2f 93       	push	r18
    1812:	8f 93       	push	r24
    1814:	9f 93       	push	r25
    1816:	af 93       	push	r26
    1818:	bf 93       	push	r27

if(state){
    181a:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <state>
    181e:	88 23       	and	r24, r24
    1820:	31 f1       	breq	.+76     	; 0x186e <__vector_5+0x68>
	
		if (ovf < 7813 ){
    1822:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <ovf>
    1826:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <ovf+0x1>
    182a:	a0 91 68 03 	lds	r26, 0x0368	; 0x800368 <ovf+0x2>
    182e:	b0 91 69 03 	lds	r27, 0x0369	; 0x800369 <ovf+0x3>
    1832:	85 38       	cpi	r24, 0x85	; 133
    1834:	2e e1       	ldi	r18, 0x1E	; 30
    1836:	92 07       	cpc	r25, r18
    1838:	a1 05       	cpc	r26, r1
    183a:	b1 05       	cpc	r27, r1
    183c:	7c f4       	brge	.+30     	; 0x185c <__vector_5+0x56>
			ovf++;
    183e:	01 96       	adiw	r24, 0x01	; 1
    1840:	a1 1d       	adc	r26, r1
    1842:	b1 1d       	adc	r27, r1
    1844:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <ovf>
    1848:	90 93 67 03 	sts	0x0367, r25	; 0x800367 <ovf+0x1>
    184c:	a0 93 68 03 	sts	0x0368, r26	; 0x800368 <ovf+0x2>
    1850:	b0 93 69 03 	sts	0x0369, r27	; 0x800369 <ovf+0x3>
			enter_zeroFlag = 2 ;
    1854:	82 e0       	ldi	r24, 0x02	; 2
    1856:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <enter_zeroFlag>
    185a:	15 c0       	rjmp	.+42     	; 0x1886 <__vector_5+0x80>
		}
		else if ( ovf >= 7813){
    185c:	85 38       	cpi	r24, 0x85	; 133
    185e:	9e 41       	sbci	r25, 0x1E	; 30
    1860:	a1 05       	cpc	r26, r1
    1862:	b1 05       	cpc	r27, r1
    1864:	84 f0       	brlt	.+32     	; 0x1886 <__vector_5+0x80>
			enter_zeroFlag = 1 ;
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <enter_zeroFlag>
    186c:	0c c0       	rjmp	.+24     	; 0x1886 <__vector_5+0x80>
			
		}
		
}else{
	enter_zeroFlag = 0 ;
    186e:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <enter_zeroFlag>
	ovf = 0;
    1872:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <ovf>
    1876:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <ovf+0x1>
    187a:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <ovf+0x2>
    187e:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <ovf+0x3>
	state = 0 ;
    1882:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <state>
}
    1886:	bf 91       	pop	r27
    1888:	af 91       	pop	r26
    188a:	9f 91       	pop	r25
    188c:	8f 91       	pop	r24
    188e:	2f 91       	pop	r18
    1890:	0f 90       	pop	r0
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	0f 90       	pop	r0
    1896:	1f 90       	pop	r1
    1898:	18 95       	reti

0000189a <__subsf3>:
    189a:	50 58       	subi	r21, 0x80	; 128

0000189c <__addsf3>:
    189c:	bb 27       	eor	r27, r27
    189e:	aa 27       	eor	r26, r26
    18a0:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__addsf3x>
    18a4:	0c 94 18 0e 	jmp	0x1c30	; 0x1c30 <__fp_round>
    18a8:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__fp_pscA>
    18ac:	38 f0       	brcs	.+14     	; 0x18bc <__addsf3+0x20>
    18ae:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <__fp_pscB>
    18b2:	20 f0       	brcs	.+8      	; 0x18bc <__addsf3+0x20>
    18b4:	39 f4       	brne	.+14     	; 0x18c4 <__addsf3+0x28>
    18b6:	9f 3f       	cpi	r25, 0xFF	; 255
    18b8:	19 f4       	brne	.+6      	; 0x18c0 <__addsf3+0x24>
    18ba:	26 f4       	brtc	.+8      	; 0x18c4 <__addsf3+0x28>
    18bc:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__fp_nan>
    18c0:	0e f4       	brtc	.+2      	; 0x18c4 <__addsf3+0x28>
    18c2:	e0 95       	com	r30
    18c4:	e7 fb       	bst	r30, 7
    18c6:	0c 94 d8 0d 	jmp	0x1bb0	; 0x1bb0 <__fp_inf>

000018ca <__addsf3x>:
    18ca:	e9 2f       	mov	r30, r25
    18cc:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <__fp_split3>
    18d0:	58 f3       	brcs	.-42     	; 0x18a8 <__addsf3+0xc>
    18d2:	ba 17       	cp	r27, r26
    18d4:	62 07       	cpc	r22, r18
    18d6:	73 07       	cpc	r23, r19
    18d8:	84 07       	cpc	r24, r20
    18da:	95 07       	cpc	r25, r21
    18dc:	20 f0       	brcs	.+8      	; 0x18e6 <__addsf3x+0x1c>
    18de:	79 f4       	brne	.+30     	; 0x18fe <__addsf3x+0x34>
    18e0:	a6 f5       	brtc	.+104    	; 0x194a <__addsf3x+0x80>
    18e2:	0c 94 63 0e 	jmp	0x1cc6	; 0x1cc6 <__fp_zero>
    18e6:	0e f4       	brtc	.+2      	; 0x18ea <__addsf3x+0x20>
    18e8:	e0 95       	com	r30
    18ea:	0b 2e       	mov	r0, r27
    18ec:	ba 2f       	mov	r27, r26
    18ee:	a0 2d       	mov	r26, r0
    18f0:	0b 01       	movw	r0, r22
    18f2:	b9 01       	movw	r22, r18
    18f4:	90 01       	movw	r18, r0
    18f6:	0c 01       	movw	r0, r24
    18f8:	ca 01       	movw	r24, r20
    18fa:	a0 01       	movw	r20, r0
    18fc:	11 24       	eor	r1, r1
    18fe:	ff 27       	eor	r31, r31
    1900:	59 1b       	sub	r21, r25
    1902:	99 f0       	breq	.+38     	; 0x192a <__addsf3x+0x60>
    1904:	59 3f       	cpi	r21, 0xF9	; 249
    1906:	50 f4       	brcc	.+20     	; 0x191c <__addsf3x+0x52>
    1908:	50 3e       	cpi	r21, 0xE0	; 224
    190a:	68 f1       	brcs	.+90     	; 0x1966 <__addsf3x+0x9c>
    190c:	1a 16       	cp	r1, r26
    190e:	f0 40       	sbci	r31, 0x00	; 0
    1910:	a2 2f       	mov	r26, r18
    1912:	23 2f       	mov	r18, r19
    1914:	34 2f       	mov	r19, r20
    1916:	44 27       	eor	r20, r20
    1918:	58 5f       	subi	r21, 0xF8	; 248
    191a:	f3 cf       	rjmp	.-26     	; 0x1902 <__addsf3x+0x38>
    191c:	46 95       	lsr	r20
    191e:	37 95       	ror	r19
    1920:	27 95       	ror	r18
    1922:	a7 95       	ror	r26
    1924:	f0 40       	sbci	r31, 0x00	; 0
    1926:	53 95       	inc	r21
    1928:	c9 f7       	brne	.-14     	; 0x191c <__addsf3x+0x52>
    192a:	7e f4       	brtc	.+30     	; 0x194a <__addsf3x+0x80>
    192c:	1f 16       	cp	r1, r31
    192e:	ba 0b       	sbc	r27, r26
    1930:	62 0b       	sbc	r22, r18
    1932:	73 0b       	sbc	r23, r19
    1934:	84 0b       	sbc	r24, r20
    1936:	ba f0       	brmi	.+46     	; 0x1966 <__addsf3x+0x9c>
    1938:	91 50       	subi	r25, 0x01	; 1
    193a:	a1 f0       	breq	.+40     	; 0x1964 <__addsf3x+0x9a>
    193c:	ff 0f       	add	r31, r31
    193e:	bb 1f       	adc	r27, r27
    1940:	66 1f       	adc	r22, r22
    1942:	77 1f       	adc	r23, r23
    1944:	88 1f       	adc	r24, r24
    1946:	c2 f7       	brpl	.-16     	; 0x1938 <__addsf3x+0x6e>
    1948:	0e c0       	rjmp	.+28     	; 0x1966 <__addsf3x+0x9c>
    194a:	ba 0f       	add	r27, r26
    194c:	62 1f       	adc	r22, r18
    194e:	73 1f       	adc	r23, r19
    1950:	84 1f       	adc	r24, r20
    1952:	48 f4       	brcc	.+18     	; 0x1966 <__addsf3x+0x9c>
    1954:	87 95       	ror	r24
    1956:	77 95       	ror	r23
    1958:	67 95       	ror	r22
    195a:	b7 95       	ror	r27
    195c:	f7 95       	ror	r31
    195e:	9e 3f       	cpi	r25, 0xFE	; 254
    1960:	08 f0       	brcs	.+2      	; 0x1964 <__addsf3x+0x9a>
    1962:	b0 cf       	rjmp	.-160    	; 0x18c4 <__addsf3+0x28>
    1964:	93 95       	inc	r25
    1966:	88 0f       	add	r24, r24
    1968:	08 f0       	brcs	.+2      	; 0x196c <__addsf3x+0xa2>
    196a:	99 27       	eor	r25, r25
    196c:	ee 0f       	add	r30, r30
    196e:	97 95       	ror	r25
    1970:	87 95       	ror	r24
    1972:	08 95       	ret

00001974 <ceil>:
    1974:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <__fp_trunc>
    1978:	90 f0       	brcs	.+36     	; 0x199e <ceil+0x2a>
    197a:	9f 37       	cpi	r25, 0x7F	; 127
    197c:	48 f4       	brcc	.+18     	; 0x1990 <ceil+0x1c>
    197e:	91 11       	cpse	r25, r1
    1980:	16 f4       	brtc	.+4      	; 0x1986 <ceil+0x12>
    1982:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <__fp_szero>
    1986:	60 e0       	ldi	r22, 0x00	; 0
    1988:	70 e0       	ldi	r23, 0x00	; 0
    198a:	80 e8       	ldi	r24, 0x80	; 128
    198c:	9f e3       	ldi	r25, 0x3F	; 63
    198e:	08 95       	ret
    1990:	26 f0       	brts	.+8      	; 0x199a <ceil+0x26>
    1992:	1b 16       	cp	r1, r27
    1994:	61 1d       	adc	r22, r1
    1996:	71 1d       	adc	r23, r1
    1998:	81 1d       	adc	r24, r1
    199a:	0c 94 de 0d 	jmp	0x1bbc	; 0x1bbc <__fp_mintl>
    199e:	0c 94 f9 0d 	jmp	0x1bf2	; 0x1bf2 <__fp_mpack>

000019a2 <__cmpsf2>:
    19a2:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <__fp_cmp>
    19a6:	08 f4       	brcc	.+2      	; 0x19aa <__cmpsf2+0x8>
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	08 95       	ret

000019ac <__divsf3>:
    19ac:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__divsf3x>
    19b0:	0c 94 18 0e 	jmp	0x1c30	; 0x1c30 <__fp_round>
    19b4:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <__fp_pscB>
    19b8:	58 f0       	brcs	.+22     	; 0x19d0 <__divsf3+0x24>
    19ba:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__fp_pscA>
    19be:	40 f0       	brcs	.+16     	; 0x19d0 <__divsf3+0x24>
    19c0:	29 f4       	brne	.+10     	; 0x19cc <__divsf3+0x20>
    19c2:	5f 3f       	cpi	r21, 0xFF	; 255
    19c4:	29 f0       	breq	.+10     	; 0x19d0 <__divsf3+0x24>
    19c6:	0c 94 d8 0d 	jmp	0x1bb0	; 0x1bb0 <__fp_inf>
    19ca:	51 11       	cpse	r21, r1
    19cc:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <__fp_szero>
    19d0:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__fp_nan>

000019d4 <__divsf3x>:
    19d4:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <__fp_split3>
    19d8:	68 f3       	brcs	.-38     	; 0x19b4 <__divsf3+0x8>

000019da <__divsf3_pse>:
    19da:	99 23       	and	r25, r25
    19dc:	b1 f3       	breq	.-20     	; 0x19ca <__divsf3+0x1e>
    19de:	55 23       	and	r21, r21
    19e0:	91 f3       	breq	.-28     	; 0x19c6 <__divsf3+0x1a>
    19e2:	95 1b       	sub	r25, r21
    19e4:	55 0b       	sbc	r21, r21
    19e6:	bb 27       	eor	r27, r27
    19e8:	aa 27       	eor	r26, r26
    19ea:	62 17       	cp	r22, r18
    19ec:	73 07       	cpc	r23, r19
    19ee:	84 07       	cpc	r24, r20
    19f0:	38 f0       	brcs	.+14     	; 0x1a00 <__divsf3_pse+0x26>
    19f2:	9f 5f       	subi	r25, 0xFF	; 255
    19f4:	5f 4f       	sbci	r21, 0xFF	; 255
    19f6:	22 0f       	add	r18, r18
    19f8:	33 1f       	adc	r19, r19
    19fa:	44 1f       	adc	r20, r20
    19fc:	aa 1f       	adc	r26, r26
    19fe:	a9 f3       	breq	.-22     	; 0x19ea <__divsf3_pse+0x10>
    1a00:	35 d0       	rcall	.+106    	; 0x1a6c <__divsf3_pse+0x92>
    1a02:	0e 2e       	mov	r0, r30
    1a04:	3a f0       	brmi	.+14     	; 0x1a14 <__divsf3_pse+0x3a>
    1a06:	e0 e8       	ldi	r30, 0x80	; 128
    1a08:	32 d0       	rcall	.+100    	; 0x1a6e <__divsf3_pse+0x94>
    1a0a:	91 50       	subi	r25, 0x01	; 1
    1a0c:	50 40       	sbci	r21, 0x00	; 0
    1a0e:	e6 95       	lsr	r30
    1a10:	00 1c       	adc	r0, r0
    1a12:	ca f7       	brpl	.-14     	; 0x1a06 <__divsf3_pse+0x2c>
    1a14:	2b d0       	rcall	.+86     	; 0x1a6c <__divsf3_pse+0x92>
    1a16:	fe 2f       	mov	r31, r30
    1a18:	29 d0       	rcall	.+82     	; 0x1a6c <__divsf3_pse+0x92>
    1a1a:	66 0f       	add	r22, r22
    1a1c:	77 1f       	adc	r23, r23
    1a1e:	88 1f       	adc	r24, r24
    1a20:	bb 1f       	adc	r27, r27
    1a22:	26 17       	cp	r18, r22
    1a24:	37 07       	cpc	r19, r23
    1a26:	48 07       	cpc	r20, r24
    1a28:	ab 07       	cpc	r26, r27
    1a2a:	b0 e8       	ldi	r27, 0x80	; 128
    1a2c:	09 f0       	breq	.+2      	; 0x1a30 <__divsf3_pse+0x56>
    1a2e:	bb 0b       	sbc	r27, r27
    1a30:	80 2d       	mov	r24, r0
    1a32:	bf 01       	movw	r22, r30
    1a34:	ff 27       	eor	r31, r31
    1a36:	93 58       	subi	r25, 0x83	; 131
    1a38:	5f 4f       	sbci	r21, 0xFF	; 255
    1a3a:	3a f0       	brmi	.+14     	; 0x1a4a <__divsf3_pse+0x70>
    1a3c:	9e 3f       	cpi	r25, 0xFE	; 254
    1a3e:	51 05       	cpc	r21, r1
    1a40:	78 f0       	brcs	.+30     	; 0x1a60 <__divsf3_pse+0x86>
    1a42:	0c 94 d8 0d 	jmp	0x1bb0	; 0x1bb0 <__fp_inf>
    1a46:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <__fp_szero>
    1a4a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a4c:	e4 f3       	brlt	.-8      	; 0x1a46 <__divsf3_pse+0x6c>
    1a4e:	98 3e       	cpi	r25, 0xE8	; 232
    1a50:	d4 f3       	brlt	.-12     	; 0x1a46 <__divsf3_pse+0x6c>
    1a52:	86 95       	lsr	r24
    1a54:	77 95       	ror	r23
    1a56:	67 95       	ror	r22
    1a58:	b7 95       	ror	r27
    1a5a:	f7 95       	ror	r31
    1a5c:	9f 5f       	subi	r25, 0xFF	; 255
    1a5e:	c9 f7       	brne	.-14     	; 0x1a52 <__divsf3_pse+0x78>
    1a60:	88 0f       	add	r24, r24
    1a62:	91 1d       	adc	r25, r1
    1a64:	96 95       	lsr	r25
    1a66:	87 95       	ror	r24
    1a68:	97 f9       	bld	r25, 7
    1a6a:	08 95       	ret
    1a6c:	e1 e0       	ldi	r30, 0x01	; 1
    1a6e:	66 0f       	add	r22, r22
    1a70:	77 1f       	adc	r23, r23
    1a72:	88 1f       	adc	r24, r24
    1a74:	bb 1f       	adc	r27, r27
    1a76:	62 17       	cp	r22, r18
    1a78:	73 07       	cpc	r23, r19
    1a7a:	84 07       	cpc	r24, r20
    1a7c:	ba 07       	cpc	r27, r26
    1a7e:	20 f0       	brcs	.+8      	; 0x1a88 <__divsf3_pse+0xae>
    1a80:	62 1b       	sub	r22, r18
    1a82:	73 0b       	sbc	r23, r19
    1a84:	84 0b       	sbc	r24, r20
    1a86:	ba 0b       	sbc	r27, r26
    1a88:	ee 1f       	adc	r30, r30
    1a8a:	88 f7       	brcc	.-30     	; 0x1a6e <__divsf3_pse+0x94>
    1a8c:	e0 95       	com	r30
    1a8e:	08 95       	ret

00001a90 <__fixunssfsi>:
    1a90:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__fp_splitA>
    1a94:	88 f0       	brcs	.+34     	; 0x1ab8 <__fixunssfsi+0x28>
    1a96:	9f 57       	subi	r25, 0x7F	; 127
    1a98:	98 f0       	brcs	.+38     	; 0x1ac0 <__fixunssfsi+0x30>
    1a9a:	b9 2f       	mov	r27, r25
    1a9c:	99 27       	eor	r25, r25
    1a9e:	b7 51       	subi	r27, 0x17	; 23
    1aa0:	b0 f0       	brcs	.+44     	; 0x1ace <__fixunssfsi+0x3e>
    1aa2:	e1 f0       	breq	.+56     	; 0x1adc <__fixunssfsi+0x4c>
    1aa4:	66 0f       	add	r22, r22
    1aa6:	77 1f       	adc	r23, r23
    1aa8:	88 1f       	adc	r24, r24
    1aaa:	99 1f       	adc	r25, r25
    1aac:	1a f0       	brmi	.+6      	; 0x1ab4 <__fixunssfsi+0x24>
    1aae:	ba 95       	dec	r27
    1ab0:	c9 f7       	brne	.-14     	; 0x1aa4 <__fixunssfsi+0x14>
    1ab2:	14 c0       	rjmp	.+40     	; 0x1adc <__fixunssfsi+0x4c>
    1ab4:	b1 30       	cpi	r27, 0x01	; 1
    1ab6:	91 f0       	breq	.+36     	; 0x1adc <__fixunssfsi+0x4c>
    1ab8:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <__fp_zero>
    1abc:	b1 e0       	ldi	r27, 0x01	; 1
    1abe:	08 95       	ret
    1ac0:	0c 94 63 0e 	jmp	0x1cc6	; 0x1cc6 <__fp_zero>
    1ac4:	67 2f       	mov	r22, r23
    1ac6:	78 2f       	mov	r23, r24
    1ac8:	88 27       	eor	r24, r24
    1aca:	b8 5f       	subi	r27, 0xF8	; 248
    1acc:	39 f0       	breq	.+14     	; 0x1adc <__fixunssfsi+0x4c>
    1ace:	b9 3f       	cpi	r27, 0xF9	; 249
    1ad0:	cc f3       	brlt	.-14     	; 0x1ac4 <__fixunssfsi+0x34>
    1ad2:	86 95       	lsr	r24
    1ad4:	77 95       	ror	r23
    1ad6:	67 95       	ror	r22
    1ad8:	b3 95       	inc	r27
    1ada:	d9 f7       	brne	.-10     	; 0x1ad2 <__fixunssfsi+0x42>
    1adc:	3e f4       	brtc	.+14     	; 0x1aec <__fixunssfsi+0x5c>
    1ade:	90 95       	com	r25
    1ae0:	80 95       	com	r24
    1ae2:	70 95       	com	r23
    1ae4:	61 95       	neg	r22
    1ae6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aea:	9f 4f       	sbci	r25, 0xFF	; 255
    1aec:	08 95       	ret

00001aee <__floatunsisf>:
    1aee:	e8 94       	clt
    1af0:	09 c0       	rjmp	.+18     	; 0x1b04 <__floatsisf+0x12>

00001af2 <__floatsisf>:
    1af2:	97 fb       	bst	r25, 7
    1af4:	3e f4       	brtc	.+14     	; 0x1b04 <__floatsisf+0x12>
    1af6:	90 95       	com	r25
    1af8:	80 95       	com	r24
    1afa:	70 95       	com	r23
    1afc:	61 95       	neg	r22
    1afe:	7f 4f       	sbci	r23, 0xFF	; 255
    1b00:	8f 4f       	sbci	r24, 0xFF	; 255
    1b02:	9f 4f       	sbci	r25, 0xFF	; 255
    1b04:	99 23       	and	r25, r25
    1b06:	a9 f0       	breq	.+42     	; 0x1b32 <__floatsisf+0x40>
    1b08:	f9 2f       	mov	r31, r25
    1b0a:	96 e9       	ldi	r25, 0x96	; 150
    1b0c:	bb 27       	eor	r27, r27
    1b0e:	93 95       	inc	r25
    1b10:	f6 95       	lsr	r31
    1b12:	87 95       	ror	r24
    1b14:	77 95       	ror	r23
    1b16:	67 95       	ror	r22
    1b18:	b7 95       	ror	r27
    1b1a:	f1 11       	cpse	r31, r1
    1b1c:	f8 cf       	rjmp	.-16     	; 0x1b0e <__floatsisf+0x1c>
    1b1e:	fa f4       	brpl	.+62     	; 0x1b5e <__floatsisf+0x6c>
    1b20:	bb 0f       	add	r27, r27
    1b22:	11 f4       	brne	.+4      	; 0x1b28 <__floatsisf+0x36>
    1b24:	60 ff       	sbrs	r22, 0
    1b26:	1b c0       	rjmp	.+54     	; 0x1b5e <__floatsisf+0x6c>
    1b28:	6f 5f       	subi	r22, 0xFF	; 255
    1b2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b2c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b30:	16 c0       	rjmp	.+44     	; 0x1b5e <__floatsisf+0x6c>
    1b32:	88 23       	and	r24, r24
    1b34:	11 f0       	breq	.+4      	; 0x1b3a <__floatsisf+0x48>
    1b36:	96 e9       	ldi	r25, 0x96	; 150
    1b38:	11 c0       	rjmp	.+34     	; 0x1b5c <__floatsisf+0x6a>
    1b3a:	77 23       	and	r23, r23
    1b3c:	21 f0       	breq	.+8      	; 0x1b46 <__floatsisf+0x54>
    1b3e:	9e e8       	ldi	r25, 0x8E	; 142
    1b40:	87 2f       	mov	r24, r23
    1b42:	76 2f       	mov	r23, r22
    1b44:	05 c0       	rjmp	.+10     	; 0x1b50 <__floatsisf+0x5e>
    1b46:	66 23       	and	r22, r22
    1b48:	71 f0       	breq	.+28     	; 0x1b66 <__floatsisf+0x74>
    1b4a:	96 e8       	ldi	r25, 0x86	; 134
    1b4c:	86 2f       	mov	r24, r22
    1b4e:	70 e0       	ldi	r23, 0x00	; 0
    1b50:	60 e0       	ldi	r22, 0x00	; 0
    1b52:	2a f0       	brmi	.+10     	; 0x1b5e <__floatsisf+0x6c>
    1b54:	9a 95       	dec	r25
    1b56:	66 0f       	add	r22, r22
    1b58:	77 1f       	adc	r23, r23
    1b5a:	88 1f       	adc	r24, r24
    1b5c:	da f7       	brpl	.-10     	; 0x1b54 <__floatsisf+0x62>
    1b5e:	88 0f       	add	r24, r24
    1b60:	96 95       	lsr	r25
    1b62:	87 95       	ror	r24
    1b64:	97 f9       	bld	r25, 7
    1b66:	08 95       	ret

00001b68 <__fp_cmp>:
    1b68:	99 0f       	add	r25, r25
    1b6a:	00 08       	sbc	r0, r0
    1b6c:	55 0f       	add	r21, r21
    1b6e:	aa 0b       	sbc	r26, r26
    1b70:	e0 e8       	ldi	r30, 0x80	; 128
    1b72:	fe ef       	ldi	r31, 0xFE	; 254
    1b74:	16 16       	cp	r1, r22
    1b76:	17 06       	cpc	r1, r23
    1b78:	e8 07       	cpc	r30, r24
    1b7a:	f9 07       	cpc	r31, r25
    1b7c:	c0 f0       	brcs	.+48     	; 0x1bae <__fp_cmp+0x46>
    1b7e:	12 16       	cp	r1, r18
    1b80:	13 06       	cpc	r1, r19
    1b82:	e4 07       	cpc	r30, r20
    1b84:	f5 07       	cpc	r31, r21
    1b86:	98 f0       	brcs	.+38     	; 0x1bae <__fp_cmp+0x46>
    1b88:	62 1b       	sub	r22, r18
    1b8a:	73 0b       	sbc	r23, r19
    1b8c:	84 0b       	sbc	r24, r20
    1b8e:	95 0b       	sbc	r25, r21
    1b90:	39 f4       	brne	.+14     	; 0x1ba0 <__fp_cmp+0x38>
    1b92:	0a 26       	eor	r0, r26
    1b94:	61 f0       	breq	.+24     	; 0x1bae <__fp_cmp+0x46>
    1b96:	23 2b       	or	r18, r19
    1b98:	24 2b       	or	r18, r20
    1b9a:	25 2b       	or	r18, r21
    1b9c:	21 f4       	brne	.+8      	; 0x1ba6 <__fp_cmp+0x3e>
    1b9e:	08 95       	ret
    1ba0:	0a 26       	eor	r0, r26
    1ba2:	09 f4       	brne	.+2      	; 0x1ba6 <__fp_cmp+0x3e>
    1ba4:	a1 40       	sbci	r26, 0x01	; 1
    1ba6:	a6 95       	lsr	r26
    1ba8:	8f ef       	ldi	r24, 0xFF	; 255
    1baa:	81 1d       	adc	r24, r1
    1bac:	81 1d       	adc	r24, r1
    1bae:	08 95       	ret

00001bb0 <__fp_inf>:
    1bb0:	97 f9       	bld	r25, 7
    1bb2:	9f 67       	ori	r25, 0x7F	; 127
    1bb4:	80 e8       	ldi	r24, 0x80	; 128
    1bb6:	70 e0       	ldi	r23, 0x00	; 0
    1bb8:	60 e0       	ldi	r22, 0x00	; 0
    1bba:	08 95       	ret

00001bbc <__fp_mintl>:
    1bbc:	88 23       	and	r24, r24
    1bbe:	71 f4       	brne	.+28     	; 0x1bdc <__fp_mintl+0x20>
    1bc0:	77 23       	and	r23, r23
    1bc2:	21 f0       	breq	.+8      	; 0x1bcc <__fp_mintl+0x10>
    1bc4:	98 50       	subi	r25, 0x08	; 8
    1bc6:	87 2b       	or	r24, r23
    1bc8:	76 2f       	mov	r23, r22
    1bca:	07 c0       	rjmp	.+14     	; 0x1bda <__fp_mintl+0x1e>
    1bcc:	66 23       	and	r22, r22
    1bce:	11 f4       	brne	.+4      	; 0x1bd4 <__fp_mintl+0x18>
    1bd0:	99 27       	eor	r25, r25
    1bd2:	0d c0       	rjmp	.+26     	; 0x1bee <__fp_mintl+0x32>
    1bd4:	90 51       	subi	r25, 0x10	; 16
    1bd6:	86 2b       	or	r24, r22
    1bd8:	70 e0       	ldi	r23, 0x00	; 0
    1bda:	60 e0       	ldi	r22, 0x00	; 0
    1bdc:	2a f0       	brmi	.+10     	; 0x1be8 <__fp_mintl+0x2c>
    1bde:	9a 95       	dec	r25
    1be0:	66 0f       	add	r22, r22
    1be2:	77 1f       	adc	r23, r23
    1be4:	88 1f       	adc	r24, r24
    1be6:	da f7       	brpl	.-10     	; 0x1bde <__fp_mintl+0x22>
    1be8:	88 0f       	add	r24, r24
    1bea:	96 95       	lsr	r25
    1bec:	87 95       	ror	r24
    1bee:	97 f9       	bld	r25, 7
    1bf0:	08 95       	ret

00001bf2 <__fp_mpack>:
    1bf2:	9f 3f       	cpi	r25, 0xFF	; 255
    1bf4:	31 f0       	breq	.+12     	; 0x1c02 <__fp_mpack_finite+0xc>

00001bf6 <__fp_mpack_finite>:
    1bf6:	91 50       	subi	r25, 0x01	; 1
    1bf8:	20 f4       	brcc	.+8      	; 0x1c02 <__fp_mpack_finite+0xc>
    1bfa:	87 95       	ror	r24
    1bfc:	77 95       	ror	r23
    1bfe:	67 95       	ror	r22
    1c00:	b7 95       	ror	r27
    1c02:	88 0f       	add	r24, r24
    1c04:	91 1d       	adc	r25, r1
    1c06:	96 95       	lsr	r25
    1c08:	87 95       	ror	r24
    1c0a:	97 f9       	bld	r25, 7
    1c0c:	08 95       	ret

00001c0e <__fp_nan>:
    1c0e:	9f ef       	ldi	r25, 0xFF	; 255
    1c10:	80 ec       	ldi	r24, 0xC0	; 192
    1c12:	08 95       	ret

00001c14 <__fp_pscA>:
    1c14:	00 24       	eor	r0, r0
    1c16:	0a 94       	dec	r0
    1c18:	16 16       	cp	r1, r22
    1c1a:	17 06       	cpc	r1, r23
    1c1c:	18 06       	cpc	r1, r24
    1c1e:	09 06       	cpc	r0, r25
    1c20:	08 95       	ret

00001c22 <__fp_pscB>:
    1c22:	00 24       	eor	r0, r0
    1c24:	0a 94       	dec	r0
    1c26:	12 16       	cp	r1, r18
    1c28:	13 06       	cpc	r1, r19
    1c2a:	14 06       	cpc	r1, r20
    1c2c:	05 06       	cpc	r0, r21
    1c2e:	08 95       	ret

00001c30 <__fp_round>:
    1c30:	09 2e       	mov	r0, r25
    1c32:	03 94       	inc	r0
    1c34:	00 0c       	add	r0, r0
    1c36:	11 f4       	brne	.+4      	; 0x1c3c <__fp_round+0xc>
    1c38:	88 23       	and	r24, r24
    1c3a:	52 f0       	brmi	.+20     	; 0x1c50 <__fp_round+0x20>
    1c3c:	bb 0f       	add	r27, r27
    1c3e:	40 f4       	brcc	.+16     	; 0x1c50 <__fp_round+0x20>
    1c40:	bf 2b       	or	r27, r31
    1c42:	11 f4       	brne	.+4      	; 0x1c48 <__fp_round+0x18>
    1c44:	60 ff       	sbrs	r22, 0
    1c46:	04 c0       	rjmp	.+8      	; 0x1c50 <__fp_round+0x20>
    1c48:	6f 5f       	subi	r22, 0xFF	; 255
    1c4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c50:	08 95       	ret

00001c52 <__fp_split3>:
    1c52:	57 fd       	sbrc	r21, 7
    1c54:	90 58       	subi	r25, 0x80	; 128
    1c56:	44 0f       	add	r20, r20
    1c58:	55 1f       	adc	r21, r21
    1c5a:	59 f0       	breq	.+22     	; 0x1c72 <__fp_splitA+0x10>
    1c5c:	5f 3f       	cpi	r21, 0xFF	; 255
    1c5e:	71 f0       	breq	.+28     	; 0x1c7c <__fp_splitA+0x1a>
    1c60:	47 95       	ror	r20

00001c62 <__fp_splitA>:
    1c62:	88 0f       	add	r24, r24
    1c64:	97 fb       	bst	r25, 7
    1c66:	99 1f       	adc	r25, r25
    1c68:	61 f0       	breq	.+24     	; 0x1c82 <__fp_splitA+0x20>
    1c6a:	9f 3f       	cpi	r25, 0xFF	; 255
    1c6c:	79 f0       	breq	.+30     	; 0x1c8c <__fp_splitA+0x2a>
    1c6e:	87 95       	ror	r24
    1c70:	08 95       	ret
    1c72:	12 16       	cp	r1, r18
    1c74:	13 06       	cpc	r1, r19
    1c76:	14 06       	cpc	r1, r20
    1c78:	55 1f       	adc	r21, r21
    1c7a:	f2 cf       	rjmp	.-28     	; 0x1c60 <__fp_split3+0xe>
    1c7c:	46 95       	lsr	r20
    1c7e:	f1 df       	rcall	.-30     	; 0x1c62 <__fp_splitA>
    1c80:	08 c0       	rjmp	.+16     	; 0x1c92 <__fp_splitA+0x30>
    1c82:	16 16       	cp	r1, r22
    1c84:	17 06       	cpc	r1, r23
    1c86:	18 06       	cpc	r1, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	f1 cf       	rjmp	.-30     	; 0x1c6e <__fp_splitA+0xc>
    1c8c:	86 95       	lsr	r24
    1c8e:	71 05       	cpc	r23, r1
    1c90:	61 05       	cpc	r22, r1
    1c92:	08 94       	sec
    1c94:	08 95       	ret

00001c96 <__fp_trunc>:
    1c96:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__fp_splitA>
    1c9a:	a0 f0       	brcs	.+40     	; 0x1cc4 <__fp_trunc+0x2e>
    1c9c:	be e7       	ldi	r27, 0x7E	; 126
    1c9e:	b9 17       	cp	r27, r25
    1ca0:	88 f4       	brcc	.+34     	; 0x1cc4 <__fp_trunc+0x2e>
    1ca2:	bb 27       	eor	r27, r27
    1ca4:	9f 38       	cpi	r25, 0x8F	; 143
    1ca6:	60 f4       	brcc	.+24     	; 0x1cc0 <__fp_trunc+0x2a>
    1ca8:	16 16       	cp	r1, r22
    1caa:	b1 1d       	adc	r27, r1
    1cac:	67 2f       	mov	r22, r23
    1cae:	78 2f       	mov	r23, r24
    1cb0:	88 27       	eor	r24, r24
    1cb2:	98 5f       	subi	r25, 0xF8	; 248
    1cb4:	f7 cf       	rjmp	.-18     	; 0x1ca4 <__fp_trunc+0xe>
    1cb6:	86 95       	lsr	r24
    1cb8:	77 95       	ror	r23
    1cba:	67 95       	ror	r22
    1cbc:	b1 1d       	adc	r27, r1
    1cbe:	93 95       	inc	r25
    1cc0:	96 39       	cpi	r25, 0x96	; 150
    1cc2:	c8 f3       	brcs	.-14     	; 0x1cb6 <__fp_trunc+0x20>
    1cc4:	08 95       	ret

00001cc6 <__fp_zero>:
    1cc6:	e8 94       	clt

00001cc8 <__fp_szero>:
    1cc8:	bb 27       	eor	r27, r27
    1cca:	66 27       	eor	r22, r22
    1ccc:	77 27       	eor	r23, r23
    1cce:	cb 01       	movw	r24, r22
    1cd0:	97 f9       	bld	r25, 7
    1cd2:	08 95       	ret

00001cd4 <__gesf2>:
    1cd4:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <__fp_cmp>
    1cd8:	08 f4       	brcc	.+2      	; 0x1cdc <__gesf2+0x8>
    1cda:	8f ef       	ldi	r24, 0xFF	; 255
    1cdc:	08 95       	ret

00001cde <__mulsf3>:
    1cde:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__mulsf3x>
    1ce2:	0c 94 18 0e 	jmp	0x1c30	; 0x1c30 <__fp_round>
    1ce6:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__fp_pscA>
    1cea:	38 f0       	brcs	.+14     	; 0x1cfa <__mulsf3+0x1c>
    1cec:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <__fp_pscB>
    1cf0:	20 f0       	brcs	.+8      	; 0x1cfa <__mulsf3+0x1c>
    1cf2:	95 23       	and	r25, r21
    1cf4:	11 f0       	breq	.+4      	; 0x1cfa <__mulsf3+0x1c>
    1cf6:	0c 94 d8 0d 	jmp	0x1bb0	; 0x1bb0 <__fp_inf>
    1cfa:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__fp_nan>
    1cfe:	11 24       	eor	r1, r1
    1d00:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <__fp_szero>

00001d04 <__mulsf3x>:
    1d04:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <__fp_split3>
    1d08:	70 f3       	brcs	.-36     	; 0x1ce6 <__mulsf3+0x8>

00001d0a <__mulsf3_pse>:
    1d0a:	95 9f       	mul	r25, r21
    1d0c:	c1 f3       	breq	.-16     	; 0x1cfe <__mulsf3+0x20>
    1d0e:	95 0f       	add	r25, r21
    1d10:	50 e0       	ldi	r21, 0x00	; 0
    1d12:	55 1f       	adc	r21, r21
    1d14:	62 9f       	mul	r22, r18
    1d16:	f0 01       	movw	r30, r0
    1d18:	72 9f       	mul	r23, r18
    1d1a:	bb 27       	eor	r27, r27
    1d1c:	f0 0d       	add	r31, r0
    1d1e:	b1 1d       	adc	r27, r1
    1d20:	63 9f       	mul	r22, r19
    1d22:	aa 27       	eor	r26, r26
    1d24:	f0 0d       	add	r31, r0
    1d26:	b1 1d       	adc	r27, r1
    1d28:	aa 1f       	adc	r26, r26
    1d2a:	64 9f       	mul	r22, r20
    1d2c:	66 27       	eor	r22, r22
    1d2e:	b0 0d       	add	r27, r0
    1d30:	a1 1d       	adc	r26, r1
    1d32:	66 1f       	adc	r22, r22
    1d34:	82 9f       	mul	r24, r18
    1d36:	22 27       	eor	r18, r18
    1d38:	b0 0d       	add	r27, r0
    1d3a:	a1 1d       	adc	r26, r1
    1d3c:	62 1f       	adc	r22, r18
    1d3e:	73 9f       	mul	r23, r19
    1d40:	b0 0d       	add	r27, r0
    1d42:	a1 1d       	adc	r26, r1
    1d44:	62 1f       	adc	r22, r18
    1d46:	83 9f       	mul	r24, r19
    1d48:	a0 0d       	add	r26, r0
    1d4a:	61 1d       	adc	r22, r1
    1d4c:	22 1f       	adc	r18, r18
    1d4e:	74 9f       	mul	r23, r20
    1d50:	33 27       	eor	r19, r19
    1d52:	a0 0d       	add	r26, r0
    1d54:	61 1d       	adc	r22, r1
    1d56:	23 1f       	adc	r18, r19
    1d58:	84 9f       	mul	r24, r20
    1d5a:	60 0d       	add	r22, r0
    1d5c:	21 1d       	adc	r18, r1
    1d5e:	82 2f       	mov	r24, r18
    1d60:	76 2f       	mov	r23, r22
    1d62:	6a 2f       	mov	r22, r26
    1d64:	11 24       	eor	r1, r1
    1d66:	9f 57       	subi	r25, 0x7F	; 127
    1d68:	50 40       	sbci	r21, 0x00	; 0
    1d6a:	9a f0       	brmi	.+38     	; 0x1d92 <__mulsf3_pse+0x88>
    1d6c:	f1 f0       	breq	.+60     	; 0x1daa <__mulsf3_pse+0xa0>
    1d6e:	88 23       	and	r24, r24
    1d70:	4a f0       	brmi	.+18     	; 0x1d84 <__mulsf3_pse+0x7a>
    1d72:	ee 0f       	add	r30, r30
    1d74:	ff 1f       	adc	r31, r31
    1d76:	bb 1f       	adc	r27, r27
    1d78:	66 1f       	adc	r22, r22
    1d7a:	77 1f       	adc	r23, r23
    1d7c:	88 1f       	adc	r24, r24
    1d7e:	91 50       	subi	r25, 0x01	; 1
    1d80:	50 40       	sbci	r21, 0x00	; 0
    1d82:	a9 f7       	brne	.-22     	; 0x1d6e <__mulsf3_pse+0x64>
    1d84:	9e 3f       	cpi	r25, 0xFE	; 254
    1d86:	51 05       	cpc	r21, r1
    1d88:	80 f0       	brcs	.+32     	; 0x1daa <__mulsf3_pse+0xa0>
    1d8a:	0c 94 d8 0d 	jmp	0x1bb0	; 0x1bb0 <__fp_inf>
    1d8e:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <__fp_szero>
    1d92:	5f 3f       	cpi	r21, 0xFF	; 255
    1d94:	e4 f3       	brlt	.-8      	; 0x1d8e <__mulsf3_pse+0x84>
    1d96:	98 3e       	cpi	r25, 0xE8	; 232
    1d98:	d4 f3       	brlt	.-12     	; 0x1d8e <__mulsf3_pse+0x84>
    1d9a:	86 95       	lsr	r24
    1d9c:	77 95       	ror	r23
    1d9e:	67 95       	ror	r22
    1da0:	b7 95       	ror	r27
    1da2:	f7 95       	ror	r31
    1da4:	e7 95       	ror	r30
    1da6:	9f 5f       	subi	r25, 0xFF	; 255
    1da8:	c1 f7       	brne	.-16     	; 0x1d9a <__mulsf3_pse+0x90>
    1daa:	fe 2b       	or	r31, r30
    1dac:	88 0f       	add	r24, r24
    1dae:	91 1d       	adc	r25, r1
    1db0:	96 95       	lsr	r25
    1db2:	87 95       	ror	r24
    1db4:	97 f9       	bld	r25, 7
    1db6:	08 95       	ret

00001db8 <__udivmodsi4>:
    1db8:	a1 e2       	ldi	r26, 0x21	; 33
    1dba:	1a 2e       	mov	r1, r26
    1dbc:	aa 1b       	sub	r26, r26
    1dbe:	bb 1b       	sub	r27, r27
    1dc0:	fd 01       	movw	r30, r26
    1dc2:	0d c0       	rjmp	.+26     	; 0x1dde <__udivmodsi4_ep>

00001dc4 <__udivmodsi4_loop>:
    1dc4:	aa 1f       	adc	r26, r26
    1dc6:	bb 1f       	adc	r27, r27
    1dc8:	ee 1f       	adc	r30, r30
    1dca:	ff 1f       	adc	r31, r31
    1dcc:	a2 17       	cp	r26, r18
    1dce:	b3 07       	cpc	r27, r19
    1dd0:	e4 07       	cpc	r30, r20
    1dd2:	f5 07       	cpc	r31, r21
    1dd4:	20 f0       	brcs	.+8      	; 0x1dde <__udivmodsi4_ep>
    1dd6:	a2 1b       	sub	r26, r18
    1dd8:	b3 0b       	sbc	r27, r19
    1dda:	e4 0b       	sbc	r30, r20
    1ddc:	f5 0b       	sbc	r31, r21

00001dde <__udivmodsi4_ep>:
    1dde:	66 1f       	adc	r22, r22
    1de0:	77 1f       	adc	r23, r23
    1de2:	88 1f       	adc	r24, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	1a 94       	dec	r1
    1de8:	69 f7       	brne	.-38     	; 0x1dc4 <__udivmodsi4_loop>
    1dea:	60 95       	com	r22
    1dec:	70 95       	com	r23
    1dee:	80 95       	com	r24
    1df0:	90 95       	com	r25
    1df2:	9b 01       	movw	r18, r22
    1df4:	ac 01       	movw	r20, r24
    1df6:	bd 01       	movw	r22, r26
    1df8:	cf 01       	movw	r24, r30
    1dfa:	08 95       	ret

00001dfc <__tablejump2__>:
    1dfc:	ee 0f       	add	r30, r30
    1dfe:	ff 1f       	adc	r31, r31
    1e00:	05 90       	lpm	r0, Z+
    1e02:	f4 91       	lpm	r31, Z
    1e04:	e0 2d       	mov	r30, r0
    1e06:	09 94       	ijmp

00001e08 <atof>:
    1e08:	66 27       	eor	r22, r22
    1e0a:	77 27       	eor	r23, r23
    1e0c:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <strtod>

00001e10 <strtod>:
    1e10:	a0 e0       	ldi	r26, 0x00	; 0
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	ee e0       	ldi	r30, 0x0E	; 14
    1e16:	ff e0       	ldi	r31, 0x0F	; 15
    1e18:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <__prologue_saves__+0xc>
    1e1c:	ec 01       	movw	r28, r24
    1e1e:	6b 01       	movw	r12, r22
    1e20:	61 15       	cp	r22, r1
    1e22:	71 05       	cpc	r23, r1
    1e24:	19 f0       	breq	.+6      	; 0x1e2c <strtod+0x1c>
    1e26:	fb 01       	movw	r30, r22
    1e28:	91 83       	std	Z+1, r25	; 0x01
    1e2a:	80 83       	st	Z, r24
    1e2c:	7e 01       	movw	r14, r28
    1e2e:	ff ef       	ldi	r31, 0xFF	; 255
    1e30:	ef 1a       	sub	r14, r31
    1e32:	ff 0a       	sbc	r15, r31
    1e34:	08 81       	ld	r16, Y
    1e36:	80 2f       	mov	r24, r16
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	0e 94 56 10 	call	0x20ac	; 0x20ac <isspace>
    1e3e:	89 2b       	or	r24, r25
    1e40:	11 f0       	breq	.+4      	; 0x1e46 <strtod+0x36>
    1e42:	e7 01       	movw	r28, r14
    1e44:	f3 cf       	rjmp	.-26     	; 0x1e2c <strtod+0x1c>
    1e46:	0d 32       	cpi	r16, 0x2D	; 45
    1e48:	39 f4       	brne	.+14     	; 0x1e58 <strtod+0x48>
    1e4a:	7e 01       	movw	r14, r28
    1e4c:	82 e0       	ldi	r24, 0x02	; 2
    1e4e:	e8 0e       	add	r14, r24
    1e50:	f1 1c       	adc	r15, r1
    1e52:	09 81       	ldd	r16, Y+1	; 0x01
    1e54:	11 e0       	ldi	r17, 0x01	; 1
    1e56:	08 c0       	rjmp	.+16     	; 0x1e68 <strtod+0x58>
    1e58:	0b 32       	cpi	r16, 0x2B	; 43
    1e5a:	29 f4       	brne	.+10     	; 0x1e66 <strtod+0x56>
    1e5c:	7e 01       	movw	r14, r28
    1e5e:	92 e0       	ldi	r25, 0x02	; 2
    1e60:	e9 0e       	add	r14, r25
    1e62:	f1 1c       	adc	r15, r1
    1e64:	09 81       	ldd	r16, Y+1	; 0x01
    1e66:	10 e0       	ldi	r17, 0x00	; 0
    1e68:	e7 01       	movw	r28, r14
    1e6a:	21 97       	sbiw	r28, 0x01	; 1
    1e6c:	43 e0       	ldi	r20, 0x03	; 3
    1e6e:	50 e0       	ldi	r21, 0x00	; 0
    1e70:	68 e7       	ldi	r22, 0x78	; 120
    1e72:	70 e0       	ldi	r23, 0x00	; 0
    1e74:	ce 01       	movw	r24, r28
    1e76:	0e 94 5f 10 	call	0x20be	; 0x20be <strncasecmp_P>
    1e7a:	89 2b       	or	r24, r25
    1e7c:	c1 f4       	brne	.+48     	; 0x1eae <strtod+0x9e>
    1e7e:	23 96       	adiw	r28, 0x03	; 3
    1e80:	45 e0       	ldi	r20, 0x05	; 5
    1e82:	50 e0       	ldi	r21, 0x00	; 0
    1e84:	63 e7       	ldi	r22, 0x73	; 115
    1e86:	70 e0       	ldi	r23, 0x00	; 0
    1e88:	ce 01       	movw	r24, r28
    1e8a:	0e 94 5f 10 	call	0x20be	; 0x20be <strncasecmp_P>
    1e8e:	89 2b       	or	r24, r25
    1e90:	09 f4       	brne	.+2      	; 0x1e94 <strtod+0x84>
    1e92:	25 96       	adiw	r28, 0x05	; 5
    1e94:	c1 14       	cp	r12, r1
    1e96:	d1 04       	cpc	r13, r1
    1e98:	19 f0       	breq	.+6      	; 0x1ea0 <strtod+0x90>
    1e9a:	f6 01       	movw	r30, r12
    1e9c:	d1 83       	std	Z+1, r29	; 0x01
    1e9e:	c0 83       	st	Z, r28
    1ea0:	11 11       	cpse	r17, r1
    1ea2:	f6 c0       	rjmp	.+492    	; 0x2090 <strtod+0x280>
    1ea4:	60 e0       	ldi	r22, 0x00	; 0
    1ea6:	70 e0       	ldi	r23, 0x00	; 0
    1ea8:	80 e8       	ldi	r24, 0x80	; 128
    1eaa:	9f e7       	ldi	r25, 0x7F	; 127
    1eac:	fa c0       	rjmp	.+500    	; 0x20a2 <strtod+0x292>
    1eae:	43 e0       	ldi	r20, 0x03	; 3
    1eb0:	50 e0       	ldi	r21, 0x00	; 0
    1eb2:	60 e7       	ldi	r22, 0x70	; 112
    1eb4:	70 e0       	ldi	r23, 0x00	; 0
    1eb6:	ce 01       	movw	r24, r28
    1eb8:	0e 94 5f 10 	call	0x20be	; 0x20be <strncasecmp_P>
    1ebc:	89 2b       	or	r24, r25
    1ebe:	59 f4       	brne	.+22     	; 0x1ed6 <strtod+0xc6>
    1ec0:	c1 14       	cp	r12, r1
    1ec2:	d1 04       	cpc	r13, r1
    1ec4:	09 f4       	brne	.+2      	; 0x1ec8 <strtod+0xb8>
    1ec6:	e9 c0       	rjmp	.+466    	; 0x209a <strtod+0x28a>
    1ec8:	f2 e0       	ldi	r31, 0x02	; 2
    1eca:	ef 0e       	add	r14, r31
    1ecc:	f1 1c       	adc	r15, r1
    1ece:	f6 01       	movw	r30, r12
    1ed0:	f1 82       	std	Z+1, r15	; 0x01
    1ed2:	e0 82       	st	Z, r14
    1ed4:	e2 c0       	rjmp	.+452    	; 0x209a <strtod+0x28a>
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	a9 01       	movw	r20, r18
    1edc:	c0 e0       	ldi	r28, 0x00	; 0
    1ede:	d0 e0       	ldi	r29, 0x00	; 0
    1ee0:	f7 01       	movw	r30, r14
    1ee2:	80 ed       	ldi	r24, 0xD0	; 208
    1ee4:	a8 2e       	mov	r10, r24
    1ee6:	a0 0e       	add	r10, r16
    1ee8:	89 e0       	ldi	r24, 0x09	; 9
    1eea:	8a 15       	cp	r24, r10
    1eec:	30 f1       	brcs	.+76     	; 0x1f3a <strtod+0x12a>
    1eee:	91 2f       	mov	r25, r17
    1ef0:	92 60       	ori	r25, 0x02	; 2
    1ef2:	b9 2e       	mov	r11, r25
    1ef4:	81 2f       	mov	r24, r17
    1ef6:	88 70       	andi	r24, 0x08	; 8
    1ef8:	12 ff       	sbrs	r17, 2
    1efa:	04 c0       	rjmp	.+8      	; 0x1f04 <strtod+0xf4>
    1efc:	81 11       	cpse	r24, r1
    1efe:	24 c0       	rjmp	.+72     	; 0x1f48 <strtod+0x138>
    1f00:	21 96       	adiw	r28, 0x01	; 1
    1f02:	22 c0       	rjmp	.+68     	; 0x1f48 <strtod+0x138>
    1f04:	81 11       	cpse	r24, r1
    1f06:	21 97       	sbiw	r28, 0x01	; 1
    1f08:	a5 e0       	ldi	r26, 0x05	; 5
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <__muluhisi3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	88 0f       	add	r24, r24
    1f16:	99 1f       	adc	r25, r25
    1f18:	aa 1f       	adc	r26, r26
    1f1a:	bb 1f       	adc	r27, r27
    1f1c:	9c 01       	movw	r18, r24
    1f1e:	ad 01       	movw	r20, r26
    1f20:	2a 0d       	add	r18, r10
    1f22:	31 1d       	adc	r19, r1
    1f24:	41 1d       	adc	r20, r1
    1f26:	51 1d       	adc	r21, r1
    1f28:	28 39       	cpi	r18, 0x98	; 152
    1f2a:	89 e9       	ldi	r24, 0x99	; 153
    1f2c:	38 07       	cpc	r19, r24
    1f2e:	48 07       	cpc	r20, r24
    1f30:	89 e1       	ldi	r24, 0x19	; 25
    1f32:	58 07       	cpc	r21, r24
    1f34:	48 f0       	brcs	.+18     	; 0x1f48 <strtod+0x138>
    1f36:	16 60       	ori	r17, 0x06	; 6
    1f38:	06 c0       	rjmp	.+12     	; 0x1f46 <strtod+0x136>
    1f3a:	9e ef       	ldi	r25, 0xFE	; 254
    1f3c:	a9 12       	cpse	r10, r25
    1f3e:	0a c0       	rjmp	.+20     	; 0x1f54 <strtod+0x144>
    1f40:	13 fd       	sbrc	r17, 3
    1f42:	40 c0       	rjmp	.+128    	; 0x1fc4 <strtod+0x1b4>
    1f44:	18 60       	ori	r17, 0x08	; 8
    1f46:	b1 2e       	mov	r11, r17
    1f48:	8f ef       	ldi	r24, 0xFF	; 255
    1f4a:	e8 1a       	sub	r14, r24
    1f4c:	f8 0a       	sbc	r15, r24
    1f4e:	00 81       	ld	r16, Z
    1f50:	1b 2d       	mov	r17, r11
    1f52:	c6 cf       	rjmp	.-116    	; 0x1ee0 <strtod+0xd0>
    1f54:	80 2f       	mov	r24, r16
    1f56:	8f 7d       	andi	r24, 0xDF	; 223
    1f58:	85 34       	cpi	r24, 0x45	; 69
    1f5a:	a1 f5       	brne	.+104    	; 0x1fc4 <strtod+0x1b4>
    1f5c:	80 81       	ld	r24, Z
    1f5e:	8d 32       	cpi	r24, 0x2D	; 45
    1f60:	11 f4       	brne	.+4      	; 0x1f66 <strtod+0x156>
    1f62:	10 61       	ori	r17, 0x10	; 16
    1f64:	06 c0       	rjmp	.+12     	; 0x1f72 <strtod+0x162>
    1f66:	8b 32       	cpi	r24, 0x2B	; 43
    1f68:	21 f0       	breq	.+8      	; 0x1f72 <strtod+0x162>
    1f6a:	31 96       	adiw	r30, 0x01	; 1
    1f6c:	61 e0       	ldi	r22, 0x01	; 1
    1f6e:	70 e0       	ldi	r23, 0x00	; 0
    1f70:	04 c0       	rjmp	.+8      	; 0x1f7a <strtod+0x16a>
    1f72:	81 81       	ldd	r24, Z+1	; 0x01
    1f74:	32 96       	adiw	r30, 0x02	; 2
    1f76:	62 e0       	ldi	r22, 0x02	; 2
    1f78:	70 e0       	ldi	r23, 0x00	; 0
    1f7a:	80 53       	subi	r24, 0x30	; 48
    1f7c:	8a 30       	cpi	r24, 0x0A	; 10
    1f7e:	18 f0       	brcs	.+6      	; 0x1f86 <strtod+0x176>
    1f80:	e6 1b       	sub	r30, r22
    1f82:	f7 0b       	sbc	r31, r23
    1f84:	1f c0       	rjmp	.+62     	; 0x1fc4 <strtod+0x1b4>
    1f86:	60 e0       	ldi	r22, 0x00	; 0
    1f88:	70 e0       	ldi	r23, 0x00	; 0
    1f8a:	60 38       	cpi	r22, 0x80	; 128
    1f8c:	9c e0       	ldi	r25, 0x0C	; 12
    1f8e:	79 07       	cpc	r23, r25
    1f90:	5c f4       	brge	.+22     	; 0x1fa8 <strtod+0x198>
    1f92:	db 01       	movw	r26, r22
    1f94:	aa 0f       	add	r26, r26
    1f96:	bb 1f       	adc	r27, r27
    1f98:	aa 0f       	add	r26, r26
    1f9a:	bb 1f       	adc	r27, r27
    1f9c:	6a 0f       	add	r22, r26
    1f9e:	7b 1f       	adc	r23, r27
    1fa0:	66 0f       	add	r22, r22
    1fa2:	77 1f       	adc	r23, r23
    1fa4:	68 0f       	add	r22, r24
    1fa6:	71 1d       	adc	r23, r1
    1fa8:	31 96       	adiw	r30, 0x01	; 1
    1faa:	df 01       	movw	r26, r30
    1fac:	11 97       	sbiw	r26, 0x01	; 1
    1fae:	8c 91       	ld	r24, X
    1fb0:	80 53       	subi	r24, 0x30	; 48
    1fb2:	8a 30       	cpi	r24, 0x0A	; 10
    1fb4:	50 f3       	brcs	.-44     	; 0x1f8a <strtod+0x17a>
    1fb6:	14 ff       	sbrs	r17, 4
    1fb8:	03 c0       	rjmp	.+6      	; 0x1fc0 <strtod+0x1b0>
    1fba:	71 95       	neg	r23
    1fbc:	61 95       	neg	r22
    1fbe:	71 09       	sbc	r23, r1
    1fc0:	c6 0f       	add	r28, r22
    1fc2:	d7 1f       	adc	r29, r23
    1fc4:	11 ff       	sbrs	r17, 1
    1fc6:	08 c0       	rjmp	.+16     	; 0x1fd8 <strtod+0x1c8>
    1fc8:	c1 14       	cp	r12, r1
    1fca:	d1 04       	cpc	r13, r1
    1fcc:	29 f0       	breq	.+10     	; 0x1fd8 <strtod+0x1c8>
    1fce:	cf 01       	movw	r24, r30
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	f6 01       	movw	r30, r12
    1fd4:	91 83       	std	Z+1, r25	; 0x01
    1fd6:	80 83       	st	Z, r24
    1fd8:	ca 01       	movw	r24, r20
    1fda:	b9 01       	movw	r22, r18
    1fdc:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__floatunsisf>
    1fe0:	21 2f       	mov	r18, r17
    1fe2:	23 70       	andi	r18, 0x03	; 3
    1fe4:	23 30       	cpi	r18, 0x03	; 3
    1fe6:	19 f0       	breq	.+6      	; 0x1fee <strtod+0x1de>
    1fe8:	4b 01       	movw	r8, r22
    1fea:	5c 01       	movw	r10, r24
    1fec:	06 c0       	rjmp	.+12     	; 0x1ffa <strtod+0x1ea>
    1fee:	4b 01       	movw	r8, r22
    1ff0:	5c 01       	movw	r10, r24
    1ff2:	b7 fa       	bst	r11, 7
    1ff4:	b0 94       	com	r11
    1ff6:	b7 f8       	bld	r11, 7
    1ff8:	b0 94       	com	r11
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	a9 01       	movw	r20, r18
    2000:	c5 01       	movw	r24, r10
    2002:	b4 01       	movw	r22, r8
    2004:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__cmpsf2>
    2008:	88 23       	and	r24, r24
    200a:	09 f4       	brne	.+2      	; 0x200e <strtod+0x1fe>
    200c:	3e c0       	rjmp	.+124    	; 0x208a <strtod+0x27a>
    200e:	d7 ff       	sbrs	r29, 7
    2010:	06 c0       	rjmp	.+12     	; 0x201e <strtod+0x20e>
    2012:	d1 95       	neg	r29
    2014:	c1 95       	neg	r28
    2016:	d1 09       	sbc	r29, r1
    2018:	0f e8       	ldi	r16, 0x8F	; 143
    201a:	10 e0       	ldi	r17, 0x00	; 0
    201c:	02 c0       	rjmp	.+4      	; 0x2022 <strtod+0x212>
    201e:	07 ea       	ldi	r16, 0xA7	; 167
    2020:	10 e0       	ldi	r17, 0x00	; 0
    2022:	68 01       	movw	r12, r16
    2024:	f8 e1       	ldi	r31, 0x18	; 24
    2026:	cf 1a       	sub	r12, r31
    2028:	d1 08       	sbc	r13, r1
    202a:	90 e2       	ldi	r25, 0x20	; 32
    202c:	e9 2e       	mov	r14, r25
    202e:	f1 2c       	mov	r15, r1
    2030:	ce 15       	cp	r28, r14
    2032:	df 05       	cpc	r29, r15
    2034:	74 f0       	brlt	.+28     	; 0x2052 <strtod+0x242>
    2036:	f8 01       	movw	r30, r16
    2038:	25 91       	lpm	r18, Z+
    203a:	35 91       	lpm	r19, Z+
    203c:	45 91       	lpm	r20, Z+
    203e:	54 91       	lpm	r21, Z
    2040:	c5 01       	movw	r24, r10
    2042:	b4 01       	movw	r22, r8
    2044:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <__mulsf3>
    2048:	4b 01       	movw	r8, r22
    204a:	5c 01       	movw	r10, r24
    204c:	ce 19       	sub	r28, r14
    204e:	df 09       	sbc	r29, r15
    2050:	ef cf       	rjmp	.-34     	; 0x2030 <strtod+0x220>
    2052:	04 50       	subi	r16, 0x04	; 4
    2054:	11 09       	sbc	r17, r1
    2056:	f5 94       	asr	r15
    2058:	e7 94       	ror	r14
    205a:	0c 15       	cp	r16, r12
    205c:	1d 05       	cpc	r17, r13
    205e:	41 f7       	brne	.-48     	; 0x2030 <strtod+0x220>
    2060:	8a 2d       	mov	r24, r10
    2062:	88 0f       	add	r24, r24
    2064:	8b 2d       	mov	r24, r11
    2066:	88 1f       	adc	r24, r24
    2068:	8f 3f       	cpi	r24, 0xFF	; 255
    206a:	49 f0       	breq	.+18     	; 0x207e <strtod+0x26e>
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	a9 01       	movw	r20, r18
    2072:	c5 01       	movw	r24, r10
    2074:	b4 01       	movw	r22, r8
    2076:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__cmpsf2>
    207a:	81 11       	cpse	r24, r1
    207c:	06 c0       	rjmp	.+12     	; 0x208a <strtod+0x27a>
    207e:	82 e2       	ldi	r24, 0x22	; 34
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <errno+0x1>
    2086:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <errno>
    208a:	c5 01       	movw	r24, r10
    208c:	b4 01       	movw	r22, r8
    208e:	09 c0       	rjmp	.+18     	; 0x20a2 <strtod+0x292>
    2090:	60 e0       	ldi	r22, 0x00	; 0
    2092:	70 e0       	ldi	r23, 0x00	; 0
    2094:	80 e8       	ldi	r24, 0x80	; 128
    2096:	9f ef       	ldi	r25, 0xFF	; 255
    2098:	04 c0       	rjmp	.+8      	; 0x20a2 <strtod+0x292>
    209a:	60 e0       	ldi	r22, 0x00	; 0
    209c:	70 e0       	ldi	r23, 0x00	; 0
    209e:	80 ec       	ldi	r24, 0xC0	; 192
    20a0:	9f e7       	ldi	r25, 0x7F	; 127
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
    20a6:	ec e0       	ldi	r30, 0x0C	; 12
    20a8:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__epilogue_restores__+0xc>

000020ac <isspace>:
    20ac:	91 11       	cpse	r25, r1
    20ae:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <__ctype_isfalse>
    20b2:	80 32       	cpi	r24, 0x20	; 32
    20b4:	19 f0       	breq	.+6      	; 0x20bc <isspace+0x10>
    20b6:	89 50       	subi	r24, 0x09	; 9
    20b8:	85 50       	subi	r24, 0x05	; 5
    20ba:	c8 f7       	brcc	.-14     	; 0x20ae <isspace+0x2>
    20bc:	08 95       	ret

000020be <strncasecmp_P>:
    20be:	fb 01       	movw	r30, r22
    20c0:	dc 01       	movw	r26, r24
    20c2:	41 50       	subi	r20, 0x01	; 1
    20c4:	50 40       	sbci	r21, 0x00	; 0
    20c6:	88 f0       	brcs	.+34     	; 0x20ea <strncasecmp_P+0x2c>
    20c8:	8d 91       	ld	r24, X+
    20ca:	81 34       	cpi	r24, 0x41	; 65
    20cc:	1c f0       	brlt	.+6      	; 0x20d4 <strncasecmp_P+0x16>
    20ce:	8b 35       	cpi	r24, 0x5B	; 91
    20d0:	0c f4       	brge	.+2      	; 0x20d4 <strncasecmp_P+0x16>
    20d2:	80 5e       	subi	r24, 0xE0	; 224
    20d4:	65 91       	lpm	r22, Z+
    20d6:	61 34       	cpi	r22, 0x41	; 65
    20d8:	1c f0       	brlt	.+6      	; 0x20e0 <strncasecmp_P+0x22>
    20da:	6b 35       	cpi	r22, 0x5B	; 91
    20dc:	0c f4       	brge	.+2      	; 0x20e0 <strncasecmp_P+0x22>
    20de:	60 5e       	subi	r22, 0xE0	; 224
    20e0:	86 1b       	sub	r24, r22
    20e2:	61 11       	cpse	r22, r1
    20e4:	71 f3       	breq	.-36     	; 0x20c2 <strncasecmp_P+0x4>
    20e6:	99 0b       	sbc	r25, r25
    20e8:	08 95       	ret
    20ea:	88 1b       	sub	r24, r24
    20ec:	fc cf       	rjmp	.-8      	; 0x20e6 <strncasecmp_P+0x28>

000020ee <__ctype_isfalse>:
    20ee:	99 27       	eor	r25, r25
    20f0:	88 27       	eor	r24, r24

000020f2 <__ctype_istrue>:
    20f2:	08 95       	ret

000020f4 <__muluhisi3>:
    20f4:	0e 94 bc 10 	call	0x2178	; 0x2178 <__umulhisi3>
    20f8:	a5 9f       	mul	r26, r21
    20fa:	90 0d       	add	r25, r0
    20fc:	b4 9f       	mul	r27, r20
    20fe:	90 0d       	add	r25, r0
    2100:	a4 9f       	mul	r26, r20
    2102:	80 0d       	add	r24, r0
    2104:	91 1d       	adc	r25, r1
    2106:	11 24       	eor	r1, r1
    2108:	08 95       	ret

0000210a <__prologue_saves__>:
    210a:	2f 92       	push	r2
    210c:	3f 92       	push	r3
    210e:	4f 92       	push	r4
    2110:	5f 92       	push	r5
    2112:	6f 92       	push	r6
    2114:	7f 92       	push	r7
    2116:	8f 92       	push	r8
    2118:	9f 92       	push	r9
    211a:	af 92       	push	r10
    211c:	bf 92       	push	r11
    211e:	cf 92       	push	r12
    2120:	df 92       	push	r13
    2122:	ef 92       	push	r14
    2124:	ff 92       	push	r15
    2126:	0f 93       	push	r16
    2128:	1f 93       	push	r17
    212a:	cf 93       	push	r28
    212c:	df 93       	push	r29
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	ca 1b       	sub	r28, r26
    2134:	db 0b       	sbc	r29, r27
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	de bf       	out	0x3e, r29	; 62
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	cd bf       	out	0x3d, r28	; 61
    2140:	09 94       	ijmp

00002142 <__epilogue_restores__>:
    2142:	2a 88       	ldd	r2, Y+18	; 0x12
    2144:	39 88       	ldd	r3, Y+17	; 0x11
    2146:	48 88       	ldd	r4, Y+16	; 0x10
    2148:	5f 84       	ldd	r5, Y+15	; 0x0f
    214a:	6e 84       	ldd	r6, Y+14	; 0x0e
    214c:	7d 84       	ldd	r7, Y+13	; 0x0d
    214e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2150:	9b 84       	ldd	r9, Y+11	; 0x0b
    2152:	aa 84       	ldd	r10, Y+10	; 0x0a
    2154:	b9 84       	ldd	r11, Y+9	; 0x09
    2156:	c8 84       	ldd	r12, Y+8	; 0x08
    2158:	df 80       	ldd	r13, Y+7	; 0x07
    215a:	ee 80       	ldd	r14, Y+6	; 0x06
    215c:	fd 80       	ldd	r15, Y+5	; 0x05
    215e:	0c 81       	ldd	r16, Y+4	; 0x04
    2160:	1b 81       	ldd	r17, Y+3	; 0x03
    2162:	aa 81       	ldd	r26, Y+2	; 0x02
    2164:	b9 81       	ldd	r27, Y+1	; 0x01
    2166:	ce 0f       	add	r28, r30
    2168:	d1 1d       	adc	r29, r1
    216a:	0f b6       	in	r0, 0x3f	; 63
    216c:	f8 94       	cli
    216e:	de bf       	out	0x3e, r29	; 62
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	cd bf       	out	0x3d, r28	; 61
    2174:	ed 01       	movw	r28, r26
    2176:	08 95       	ret

00002178 <__umulhisi3>:
    2178:	a2 9f       	mul	r26, r18
    217a:	b0 01       	movw	r22, r0
    217c:	b3 9f       	mul	r27, r19
    217e:	c0 01       	movw	r24, r0
    2180:	a3 9f       	mul	r26, r19
    2182:	70 0d       	add	r23, r0
    2184:	81 1d       	adc	r24, r1
    2186:	11 24       	eor	r1, r1
    2188:	91 1d       	adc	r25, r1
    218a:	b2 9f       	mul	r27, r18
    218c:	70 0d       	add	r23, r0
    218e:	81 1d       	adc	r24, r1
    2190:	11 24       	eor	r1, r1
    2192:	91 1d       	adc	r25, r1
    2194:	08 95       	ret

00002196 <_exit>:
    2196:	f8 94       	cli

00002198 <__stop_program>:
    2198:	ff cf       	rjmp	.-2      	; 0x2198 <__stop_program>
